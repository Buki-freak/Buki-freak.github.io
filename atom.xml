<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>buk1</title>
  
  <subtitle>Every day is my last day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://buki-freak.github.io/"/>
  <updated>2020-08-05T14:44:24.738Z</updated>
  <id>https://buki-freak.github.io/</id>
  
  <author>
    <name>buki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA-Learning</title>
    <link href="https://buki-freak.github.io/2020/08/03/RSA-Learning/"/>
    <id>https://buki-freak.github.io/2020/08/03/RSA-Learning/</id>
    <published>2020-08-03T13:22:37.000Z</published>
    <updated>2020-08-05T14:44:24.738Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了一篇 RSA 的paper，总结的不错，简单地做下笔记。</p><p>RSA 是基于 Factoring Large Integers Problem 的公钥密码体制。</p><h1 id="elementary-attacks"><a class="markdownIt-Anchor" href="#elementary-attacks"></a> Elementary Attacks</h1><h2 id="common-modulus"><a class="markdownIt-Anchor" href="#common-modulus"></a> Common Modulus</h2><p>…</p><h2 id="blinding"><a class="markdownIt-Anchor" href="#blinding"></a> Blinding</h2><p>出现在不经 padding 和 check 的 RSA signiture 中，如果签名方不仔细审查明文，攻击者可以伪造某人对于任何内容的签名。</p><p>cheat 大致过程如下：</p><p><img src="./images/RSA-learning/1.jpg" alt></p><p>整个过程称为 blinding，是因为 Bob 没能得知他要签名的内容。签名方在签名前检查内容能够防止这个问题。</p><h1 id="low-private-exponent"><a class="markdownIt-Anchor" href="#low-private-exponent"></a> Low Private Exponent</h1><p>低解密指数攻击。</p><p>d 的大小会影响解密的时长。为了速度上的要求，有人会将 d 设置的更小。M.Wiener 提出的攻击方法对很小的 d 的 RSA 系统带来威胁。</p><h2 id="theorem-2m-wiener"><a class="markdownIt-Anchor" href="#theorem-2m-wiener"></a> Theorem 2(M. Wiener):</h2><p><img src="../images/RSA-learning/2.jpg" alt></p><h2 id="proof"><a class="markdownIt-Anchor" href="#proof"></a> Proof:</h2><p>证明过程利用连分数。<br>因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>d</mi><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mn>1</mn><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ed\;\equiv\;1\mod\;\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，所以存在一个 k 满足： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>d</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">ed\;-\;k\varphi(N)\;=\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因此有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">∣</mo><mfrac><mi>e</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></mfrac><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mfrac><mi>k</mi><mi>d</mi></mfrac><mo fence="true">∣</mo></mrow><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mfrac><mn>1</mn><mrow><mi>d</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\left|\frac{e}{\varphi(N)}\;-\;\frac{k}{d}\right|\;=\;\frac{1}{d\varphi(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.424em;vertical-align:-0.9500199999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>所以可以把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 看成是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>e</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{e}{\varphi(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.215392em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的大概值。<br>然后因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>N</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>p</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>q</mi><mtext>  </mtext><mo>+</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">\varphi(N)\;=\;N\;-\;p\;-\;q\;+\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 以及 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mtext>  </mtext><mo>+</mo><mtext>  </mtext><mi>q</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mo>&lt;</mo><mtext>  </mtext><mn>3</mn><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">p\;+\;q\;-\;1\;&lt;\;3\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord">3</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span> 所以有：</p><p><img src="../images/RSA-learning/3.jpg" alt></p><p>计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>e</mi><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{e}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的连分数，其中有一个解等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>d</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">ed\;-\;k\varphi(N)\;=\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(k, d)\;=\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>k</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 为真分数。线性时间可以解得 d。</p><h2 id="limits"><a class="markdownIt-Anchor" href="#limits"></a> Limits</h2><h3 id="large-e"><a class="markdownIt-Anchor" href="#large-e"></a> Large e:</h3><p>对解密指数进行改进，令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mo mathvariant="normal">′</mo></msup><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>e</mi><mtext>  </mtext><mo>+</mo><mtext>  </mtext><mi>t</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>t</mi><mi>i</mi><mi>s</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>e</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>g</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">e&#x27;\;=\;e\;+\;t\varphi(N), t is large enough</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span></span></span></span>，e’ 作为新的加密指数:</p><p><img src="../images/RSA-learning/4.jpg" alt></p><h3 id="using-crt"><a class="markdownIt-Anchor" href="#using-crt"></a> Using CRT</h3><p>保证 d 的 bit size 的同时，使用 CRT 对解密来提升解密速度。<br>计算：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mi>d</mi><mtext>  </mtext><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>d</mi><mi>q</mi></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mi>d</mi><mtext>  </mtext><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>q</mi><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_p\;\equiv\;d\;\mod(p\;-\;1)\\d_q\;\equiv\;d\;\mod(q\;-\;1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>并且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">d_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">d_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 足够小(128 bits each)。<br>然后计算：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>p</mi></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>C</mi><msub><mi>d</mi><mi>p</mi></msub></msup><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>p</mi><mspace linebreak="newline"></mspace><msub><mi>M</mi><mi>q</mi></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>C</mi><msub><mi>d</mi><mi>q</mi></msub></msup><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">M_p\;\equiv\;C^{d_p}\mod\;p\\M_q\;\equiv\;C^{d_q}\mod\;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p>最后 CRT：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>C</mi><msub><mi>d</mi><mi>p</mi></msub></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>C</mi><msub><mi>d</mi><mi>q</mi></msub></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>q</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}M\;\equiv\;C^{d_p}\mod\;p \\\\M\;\equiv\;C^{d_q}\mod\;q\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">d_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">d_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 过小会导致 N 容易分解。</p><p>Boneh and Durfee 方法可以将上界提到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><msup><mi>N</mi><mn>0.292</mn></msup></mrow><annotation encoding="application/x-tex">d &lt; N^{0.292}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">2</span><span class="mord mtight">9</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="low-public-exponent"><a class="markdownIt-Anchor" href="#low-public-exponent"></a> Low Public Exponent</h1><p>数字签名中，e 的大小会影响验证的计算时长。e 过小会导致低加密指数攻击。</p><h2 id="coppersmiths-theorem"><a class="markdownIt-Anchor" href="#coppersmiths-theorem"></a> Coppersmith’s Theorem</h2><h3 id="theorem-3coppersmith"><a class="markdownIt-Anchor" href="#theorem-3coppersmith"></a> Theorem 3(Coppersmith)</h3><p><img src="../images/RSA-learning/5.jpg" alt></p><p>Coppersmith 提供了一个快速寻找 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>N</mi></mrow><annotation encoding="application/x-tex">f(x_0)\;\equiv\;0\;\mod\;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 根( <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mtext>  </mtext><mo>=</mo><mtext>  </mtext><msup><mi>N</mi><mfrac><mn>1</mn><mi>d</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">X\;=\;N^{\frac{1}{d}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9540200000000001em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span> )的方法。</p><h3 id="lemma-4"><a class="markdownIt-Anchor" href="#lemma-4"></a> Lemma 4</h3><p><img src="../images/RSA-learning/6.jpg" alt></p><h3 id="proof-2"><a class="markdownIt-Anchor" href="#proof-2"></a> Proof</h3><p>由 Schwarz inequality 可得：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">∣</mo><mi>h</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo fence="true">∣</mo></mrow><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mrow><mo fence="true">∣</mo><mo>∑</mo><msub><mi>a</mi><mi>i</mi></msub><msubsup><mi>x</mi><mn>0</mn><mi>i</mi></msubsup><mo fence="true">∣</mo></mrow><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mrow><mo fence="true">∣</mo><mo>∑</mo><msub><mi>a</mi><mi>i</mi></msub><msup><mi>X</mi><mi>i</mi></msup><mo stretchy="false">(</mo><mfrac><msub><mi>x</mi><mn>0</mn></msub><mi>X</mi></mfrac><msup><mo stretchy="false">)</mo><mi>i</mi></msup><mo fence="true">∣</mo></mrow><mtext>  </mtext><mo>≤</mo><mtext>  </mtext><mo>∑</mo><mrow><mo fence="true">∣</mo><msub><mi>a</mi><mi>i</mi></msub><msup><mi>X</mi><mi>i</mi></msup><mo stretchy="false">(</mo><mfrac><msub><mi>x</mi><mn>0</mn></msub><mi>X</mi></mfrac><msup><mo stretchy="false">)</mo><mi>i</mi></msup><mo fence="true">∣</mo></mrow><mspace linebreak="newline"></mspace><mo>≤</mo><mtext>  </mtext><mo>∑</mo><mrow><mo fence="true">∣</mo><msub><mi>a</mi><mi>i</mi></msub><msup><mi>X</mi><mi>i</mi></msup><mo fence="true">∣</mo></mrow><mtext>  </mtext><mo>≤</mo><mtext>  </mtext><msqrt><mi>d</mi></msqrt><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mi>X</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mtext>  </mtext><mo>≤</mo><mtext>  </mtext><mi>N</mi></mrow><annotation encoding="application/x-tex">\left|h(x_0)\right|\;=\;\left|\sum{a_i}x_{0}^{i}\right|\;=\;\left|\sum{a_i}X^{i}(\frac{x_0}{X})^{i}\right|\;\leq\;\sum\left|a_{i}X^{i}(\frac{x_0}{X})^i\right|\\\leq\;\sum\left|a_{i}X^{i}\right|\;\leq\;\sqrt{d}||h(xX)||\;\leq\;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.818em;vertical-align:-0.6500149999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8539850000000002em;vertical-align:-0.686em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8539850000000002em;vertical-align:-0.686em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.86199em;"><span style="top:-2.2559899999999997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86199em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000999999999993em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.86199em;"><span style="top:-2.2559899999999997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86199em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000999999999993em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231095em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.941095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.058904999999999985em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><mi>N</mi></mrow><annotation encoding="application/x-tex">h(x_0)\;\equiv\;0\;\mod\;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，所以有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>0</mn></mrow><annotation encoding="application/x-tex">h(x_0)\;=\;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 前提是 h 的范数足够小。<br>因此，我们需要找到另外一个范数更小的多项式。满足上面的条件。</p><p>Coppersmith 提供了一个方法：</p><p><img src="../images/RSA-learning/7.jpg" alt></p><p>m 是未知的常量。我们从 $g_{u,v}(x);equiv;0;\mod;N^m 中找到符合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>  </mtext><mo>&lt;</mo><mtext>  </mtext><msup><mi>N</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">norm(h(xX))\;&lt;\;N^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 的多项式。m 足够大的时候有多个解。</p><p>找到这个合适的多项式需要构造格：</p><p><img src="../images/RSA-learning/8.jpg" alt></p><p>Hermite’s bound 说明m 足够大的时候，可以找到  $ norn(v) &lt; N^m$ 的向量。</p><h3 id="fact-5lll"><a class="markdownIt-Anchor" href="#fact-5lll"></a> Fact 5(LLL)</h3><p><img src="../images/RSA-learning/9.jpg" alt></p><p>LLL 满足 Lemma 4 的条件：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mfrac><mi>w</mi><mn>4</mn></mfrac></msup><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>L</mi><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>w</mi></mfrac></msup><mtext>  </mtext><mo>&lt;</mo><mtext>  </mtext><mfrac><msup><mi>N</mi><mi>m</mi></msup><msqrt><mi>w</mi></msqrt></mfrac><mo separator="true">,</mo><mtext>  </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>w</mi><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>d</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>  </mtext><mi>i</mi><mi>s</mi><mtext>  </mtext><mi>t</mi><mi>h</mi><mi>e</mi><mtext>  </mtext><mi>d</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext>  </mtext><mi>o</mi><mi>f</mi><mtext>  </mtext><mi>L</mi></mrow><annotation encoding="application/x-tex">2^{\frac{w}{4}}det(L)^{\frac{1}{w}}\;&lt;\;\frac{N^m}{\sqrt{w}},\;where\;w\;=\;d(m+1)\;is\;the\;dimension\;of\;L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2540200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89708em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0040200000000001em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.29033em;vertical-align:-0.9300000000000002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span></span></span></span></span></p><h2 id="hastads-broadcast-attack"><a class="markdownIt-Anchor" href="#hastads-broadcast-attack"></a> Hastad’s Broadcast Attack</h2><p>Hastad 第一次运用了 Coppersmith’s theorem。</p><h3 id="background"><a class="markdownIt-Anchor" href="#background"></a> Background</h3><p><img src="../images/RSA-learning/10.jpg" alt></p><p>如果 <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \req at position 4: k\;\̲r̲e̲q̲\3;">k\;\req\3;</span>，Marvin 可以恢复明文，假设我们有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3....</mn></mrow><annotation encoding="application/x-tex">e_i\;=\;1,2,3....</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>，</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>M</mi><mn>3</mn></msup><mtext>  </mtext><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><msub><mi>N</mi><mn>1</mn></msub><mo separator="true">,</mo><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>2</mn></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>M</mi><mn>3</mn></msup><mtext>  </mtext><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><msub><mi>N</mi><mn>2</mn></msub><mo separator="true">,</mo><mspace linebreak="newline"></mspace><msub><mi>C</mi><mn>3</mn></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msup><mi>M</mi><mn>3</mn></msup><mtext>  </mtext><mspace></mspace><mspace width="1em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><msub><mi>N</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_1\;\equiv\;M^3\;\mod\;N_1,\\C_2\;\equiv\;M^3\;\mod\;N_2,\\C_3\;\equiv\;M^3\;\mod\;N_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>如果对于所有  $N, i;\neq;j $，有  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>N</mi><mi>i</mi></msub><mo separator="true">,</mo><mtext>  </mtext><msub><mi>N</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(N_i,\;N_j)\;=\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，那么使用 CRT 可以解除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>M</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">M^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 在整数上的值，开三次方根可以求出 M。</p><h3 id="limits-2"><a class="markdownIt-Anchor" href="#limits-2"></a> Limits</h3><p>所有的加密指数需要相同，并且需要满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mtext>  </mtext><mo>≥</mo><mtext>  </mtext><mi>e</mi></mrow><annotation encoding="application/x-tex">k\;\geq\;e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>。</p><p>Hastad 对于 pad 的改进了攻击方法。</p><h3 id="theorem-6hastad"><a class="markdownIt-Anchor" href="#theorem-6hastad"></a> Theorem 6(Hastad)</h3><p><img src="../images/RSA-learning/11.jpg" alt></p><h3 id="proof-3"><a class="markdownIt-Anchor" href="#proof-3"></a> Proof</h3><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>N</mi><mo>ˉ</mo></mover><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mi>N</mi><mn>1</mn><mtext>  </mtext><mo>⋯</mo><mtext>  </mtext><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\bar{N}\;=\;N1\;\cdots\;N_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8201099999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 N_i 互质。如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">g_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中的高次项系数在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi mathvariant="double-struck">Z</mi><msub><mi>N</mi><mi>i</mi></msub><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">\Z^{*}_{N_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064321em;vertical-align:-0.37543099999999996em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">Z</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.424669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.37543099999999996em;"><span></span></span></span></span></span></span></span></span></span> 不可逆，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">N_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的可以被容易分解。构造多项式：</p><p><img src="../images/RSA-learning/12.jpg" alt></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 作为 Chinese Remainder Coefficients。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 是一元多项式，度为 d，并且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mover accent="true"><mi>N</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">g(M)\;\equiv\;0\;\mod\bar{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8201099999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span></span></span></span></span></span></span>。</p><p>Theorem 6 符合 Theorem 3。</p><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub><mtext>  </mtext><mo>≡</mo><mtext>  </mtext><msubsup><mi>f</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup><mtext>  </mtext><mo>−</mo><mtext>  </mtext><msub><mi>C</mi><mi>i</mi></msub><mtext>  </mtext><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext>  </mtext><msub><mi>N</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">g_i\;\equiv\;f_{i}^{e_i}\;-\;C_{i}\;\mod\;N_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.023156em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们可以恢复出明文。前提：<br>parties 的数量 k 需要大于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>e</mi><mi>i</mi></msub><mi>d</mi><mi>e</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>i</mi><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext>  </mtext><mo separator="true">,</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">max(e_{i}deg(f_i)), i\;=\;1,\cdots\;,k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。<br>特殊情况：所有加密指数相同，并且 pad 的 f 为线性函数（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">deg(f_i)\;=\;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ）时，满足 $ k;&gt;;e$ 即可。</p><h2 id="franklin-reiter-related-message-attack"><a class="markdownIt-Anchor" href="#franklin-reiter-related-message-attack"></a> Franklin-Reiter Related Message Attack</h2><p>（未完待续）</p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference:</h1><p><a href="https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf" target="_blank" rel="noopener">https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看了一篇 RSA 的paper，总结的不错，简单地做下笔记。&lt;/p&gt;
&lt;p&gt;RSA 是基于 Factoring Large Integers Problem 的公钥密码体制。&lt;/p&gt;
&lt;h1 id=&quot;elementary-attacks&quot;&gt;&lt;a class=&quot;markd
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pick up C in Seven Days</title>
    <link href="https://buki-freak.github.io/2020/08/03/Pick-up-C-in-Seven-Days/"/>
    <id>https://buki-freak.github.io/2020/08/03/Pick-up-C-in-Seven-Days/</id>
    <published>2020-08-03T12:33:15.000Z</published>
    <updated>2020-08-03T15:16:06.683Z</updated>
    
    <content type="html"><![CDATA[<p>Since C is significant to my further learning, I decide to review C and write a little bit about it.</p><p>C 语言是贝尔实验室在开发UNIX操作系统时的副产品，C++是对C语言的拓展。</p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><h2 id="如何高效地使用c语言"><a class="markdownIt-Anchor" href="#如何高效地使用c语言"></a> 如何高效地使用C语言</h2><ul><li>避开C语言的缺陷</li><li>利用现有的代码库</li><li>适应C语言的编写规范</li><li>使用标准C</li></ul><h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="编译与链接"><a class="markdownIt-Anchor" href="#编译与链接"></a> 编译与链接</h2><h3 id="预处理器preprocessor"><a class="markdownIt-Anchor" href="#预处理器preprocessor"></a> 预处理器（preprocessor）</h3><p>首先会把 .c 文件交给 preprocessor，preprocessor 执行指令（以&quot;#&quot;开头的命令）。preprocessor 类似于自动的文本编辑器，可以修改代码程序的内容。</p><h3 id="编译器compiler"><a class="markdownIt-Anchor" href="#编译器compiler"></a> 编译器（compiler）</h3><p>修改后的代码程序进入 compiler。compiler 会把代码程序翻译成机器指令，但是当前的程序仍然无法运行。</p><h3 id="链接器linker"><a class="markdownIt-Anchor" href="#链接器linker"></a> 链接器（linker）</h3><p>linker 将机器指令和其他任何附加代码整合，形成可执行的程序。这些附加代码中包括许多程序中用到的库函数。</p><h3 id="cc-与-gcc"><a class="markdownIt-Anchor" href="#cc-与-gcc"></a> cc 与 gcc</h3><p>cc 是 UNIX 机器下的 C 和 C++ 的编译环境。</p><p>gcc 是 GUN C Compiler，由 GNU 计划开发。</p><p>查了一下手册，发现两者没什么区别，但是文件指向不同。</p><p>Difference?</p><h2 id="指令"><a class="markdownIt-Anchor" href="#指令"></a> 指令</h2><p>在编译操作前修改程序的编辑命令称为指令(directive)，例如 #include&lt;stdio.h&gt;。</p><p>所有的指令都是以 “#” 为开头。</p><p>默认情况下，指令只占一行，每条指令的结尾没有任何特殊符号。</p><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><p>函数用于构建程序的&quot;子程序&quot;或者&quot;模块&quot;。</p><p>函数分为两大类：</p><ul><li>程序员编写的函数</li><li>C 语言提供的函数（库函数），这些函数由编译器提供。</li></ul><h2 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h2><p>类型+变量名（可以多个）</p><p>如：下面是一条声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> height, width, weight;</span><br></pre></td></tr></table></figure><h2 id="赋值"><a class="markdownIt-Anchor" href="#赋值"></a> 赋值</h2><p>变量名+&quot;=&quot;+值</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="number">10</span>;</span><br><span class="line">width = <span class="number">2</span>;</span><br><span class="line">weight = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><h2 id="初始化initialization"><a class="markdownIt-Anchor" href="#初始化initialization"></a> 初始化（Initialization)</h2><p>两种初始化方法：</p><p>Method One：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = <span class="number">2.3</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c1 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="comment">// Complex number: 1 + 2i</span></span><br></pre></td></tr></table></figure><p>Method Two：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = &#123;<span class="number">2.3</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> d1 &#123;<span class="number">2.3</span>&#125;; <span class="comment">// "=" can be ignored, if "&#123;&#125;" exists</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c1 &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><p>“{}” list is called <strong>initializer list</strong>, and it does not allow type conversion between variables.</p><p>Variables should be initialized when it is declaration.</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2><p>scanf 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Here is your number: %d"</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h2><p>常量用大写字母表示。</p><p>可以使用 #define 宏定义，或者 const 定义。</p><p>下面是 constexpr 的例子。</p><p>Constexpr can be used where only compile time constant expressions are allowed.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">double</span> i3 = <span class="keyword">double</span>(i); <span class="comment">// Works</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">double</span> i4 = <span class="keyword">double</span>(i2); <span class="comment">// Do not work</span></span><br></pre></td></tr></table></figure><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h2><p>标识符可以包含有下划线，字母和数字并且必须以下划线或者字母开头。</p><h2 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h2><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><p>标准注释为/<em>…</em>/。</p><p>杜绝使用 // 进行注释。</p><p>标准 C 中，编译器将每条注释语句分别替换成一个空格。</p><h1 id="格式化输入输出"><a class="markdownIt-Anchor" href="#格式化输入输出"></a> 格式化输入输出</h1><h2 id="printf-函数"><a class="markdownIt-Anchor" href="#printf-函数"></a> printf 函数</h2><p>printf 函数格式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200721200502210.png" alt="image-20200721200502210"></p><p>格式串包括普通字符和转换说明。</p><p>转换说明以 “%” 开头。&quot;%“后的信息指定了从二进制形式转为打印形式的方法，如 “%d”，”%f&quot;。</p><p>转换说明用于表示打印过程中填充了值的占位符。</p><p>compiler 不会检测格式串中转换说明是否和输出项的数量相匹配，只会发出 warning。若转换说明数量大，则根据多余转换说明根据对应说明进行填充；若输出项大，则忽略多余的输出项。</p><p>如果想要正常输出 “%” 字符，则需要使用 “%%”。</p><p>printf 函数有返回值，其返回值为输出的字符数。</p><h2 id="转换说明规则"><a class="markdownIt-Anchor" href="#转换说明规则"></a> 转换说明规则</h2><p>转换说明的两种格式：-m.pX 或者 m.pX 。这里的 m，p 是整型常量，X 是字母，表示类型。</p><p>m 是最小字段宽度，指定了要显示的最小字符数量。若打印字符长度小于 m，则输出进行右对齐。若打印字符长度大于 m，则 m 自动扩展为需要的尺寸。</p><p>p 是精度，规定显示小数点后 p 位，不够用 0 凑。</p><p>X 常见类别：d，e，f，g。</p><p>&quot;-&quot;表示左对齐；无 “-” 表示右对齐。</p><p>应用于乘法口诀表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%2d * %2d = %2d"</span>, i, j, i*j);</span><br><span class="line">                        <span class="keyword">if</span>(j==<span class="number">9</span>)&#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scanf"><a class="markdownIt-Anchor" href="#scanf"></a> scanf</h2><p>scanf 会将用户输入的字符串看成是一条连续的字符流。读取时会自动跳过空白字符，如空格，回车。</p><p>读取规则：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200721213429596.png" alt="image-20200721213429596"></p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200721213834351.png" alt="image-20200721213834351"></p><p>关于模式匹配：</p><p>空白字符：格式串中一个空白字符可以和多个或零个空白字符匹配，并且所有空白字符是等价的。</p><p>其他字符：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200721214159446.png" alt="image-20200721214159446"></p><h1 id="表达式"><a class="markdownIt-Anchor" href="#表达式"></a> 表达式</h1><p>pass</p><h1 id="选择语句"><a class="markdownIt-Anchor" href="#选择语句"></a> 选择语句</h1><p>C 没有内置的布尔类型。</p><h2 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h2><p>switch 的执行速度比 if 语句要快。</p><p>格式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722074255847.png" alt="image-20200722074255847"></p><p>各部分：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722074241430.png" alt="image-20200722074241430"></p><p>default 部分不一定需要放到最后。</p><p>break 语句在 switch 中的作用：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722074407789.png" alt="image-20200722074407789"></p><h1 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h1><p>没有一个循坏都有一个控制表达式（循环结束标志）。</p><p>for 语句格式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722075009139.png" alt="image-20200722075009139"></p><p>表达式可以使用多个表达式，用 “,” 隔开。</p><p>空语句–空循环。</p><h1 id="基本类型"><a class="markdownIt-Anchor" href="#基本类型"></a> 基本类型</h1><h2 id="int"><a class="markdownIt-Anchor" href="#int"></a> int</h2><p>六种类型：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722152647208.png" alt="image-20200722152647208"></p><p>需注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722153057720.png" alt="image-20200722153057720"></p><h3 id="读写整数"><a class="markdownIt-Anchor" href="#读写整数"></a> 读写整数</h3><p>再贴几张图：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722154847775.png" alt="image-20200722154847775"></p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722154941567.png" alt="image-20200722154941567"></p><h2 id="doublefloat"><a class="markdownIt-Anchor" href="#doublefloat"></a> double&amp;float</h2><p>默认情况下常量都以双精度浮点数的方式进行存储。</p><p>类型：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722155148852.png" alt="image-20200722155148852"></p><h3 id="读写浮点数"><a class="markdownIt-Anchor" href="#读写浮点数"></a> 读写浮点数</h3><p>首先知道 e，f，g 所代表的转换说明：</p><ul><li>e 表示指数（科学计数法）形式的整数。</li><li>f 表示 &quot;定点十进制&quot;形式的浮点数。</li><li>g 表示指数形式或者定点十进制形式的浮点数。系统自定。</li></ul><p>float 按照 e，f，g 规则，其余类型如下：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722155511743.png" alt="image-20200722155511743"></p><h2 id="char"><a class="markdownIt-Anchor" href="#char"></a> char</h2><p>字符常量需要用单引号括起来，而不是双引号。</p><p>字符拥有和数一样的属性，可以直接进行加减，如 ‘B’ = ‘A’ + 1。</p><p>字符型也分有符号型和无符号型，处理方法取决于不同的编译器。</p><h3 id="读写字符"><a class="markdownIt-Anchor" href="#读写字符"></a> 读写字符</h3><p>转换说明 “%c” 允许 scanf 函数和 printf 函数对单独一个字符进行读/写操作。</p><p>注意转换说明 “%c” 不会跳过空格以及换行符。</p><p>C 还提供了 getchar（读） 和 putchar（写） 两个函数，他们的执行速度更快。</p><p>getchar 和 putchar 同样也不会忽略空格，并且他们只会读取一个字符，如：ch = getchar();  putchar(ch);</p><h2 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h2><p>编译器自动处理的转换称为隐式转换。</p><p>程序员通过强制运算符执行的转换称为显式转换。</p><h4 id="隐式转换"><a class="markdownIt-Anchor" href="#隐式转换"></a> 隐式转换</h4><h3 id><a class="markdownIt-Anchor" href="#"></a> </h3><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722223732116.png" alt="image-20200722223732116"></p><h4 id="算术转换"><a class="markdownIt-Anchor" href="#算术转换"></a> 算术转换</h4><p>转换按照提升规则。</p><p>对于两浮点数：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722224320205.png" alt="image-20200722224320205"></p><p>对于两整型数：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722224342207.png" alt="image-20200722224342207"></p><p>注意有符号操作数转换为无符号操作数是可能会发生错误，当有符号数是负数的时候。</p><h4 id="赋值转换"><a class="markdownIt-Anchor" href="#赋值转换"></a> 赋值转换</h4><p>赋值运算左边的表达式的值赋值给右边的变量，并转换成右边的变量类型。</p><p>要求右边的变量类型至少和左边的一样宽。</p><h3 id="显式转换"><a class="markdownIt-Anchor" href="#显式转换"></a> 显式转换</h3><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200722224919431.png" alt="image-20200722224919431"></p><h2 id="类型定义typedef"><a class="markdownIt-Anchor" href="#类型定义typedef"></a> 类型定义（typedef）</h2><p>用法：</p><p>typedef 内置类型名 自定义类型名</p><p>使用 typedef 定义的类型名一般以 “_t” 结尾。</p><p>注意 typedef 不属于宏的部分。</p><h2 id="auto"><a class="markdownIt-Anchor" href="#auto"></a> Auto</h2><p>If we do not want to write the type of variables explicitly, we can use <strong>auto</strong> type.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> b = <span class="literal">true</span>; <span class="comment">// The type of b is boolean</span></span><br><span class="line"><span class="keyword">auto</span> ch = <span class="string">'x'</span>; <span class="comment">// The type of ch is char</span></span><br></pre></td></tr></table></figure><p>We 'd better use “=” for auto type initialization.</p><h1 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h1><h2 id="一维数组"><a class="markdownIt-Anchor" href="#一维数组"></a> 一维数组</h2><p>数组初始化：</p><p>最常见是使用常量表达式列表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>若列表长度比数组长度短，则剩余部分用零填充。</p><p>若需要初始化为全零，则用 “{0}” 常量表达式列表。</p><p>忽略数组长度如 a[] 时，编译器会根据列表长度自动决定数组长度。</p><h3 id="sizeof"><a class="markdownIt-Anchor" href="#sizeof"></a> sizeof</h3><p>使用 sizeof 函数可以得到数组所占用的字节大小。灵巧地，sizeof(a) / sizeof(a[0]) 可以得到数组的长度。</p><h2 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h2><p>初始化：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723100112566.png" alt="image-20200723100112566"></p><h1 id="函数-2"><a class="markdownIt-Anchor" href="#函数-2"></a> 函数</h1><h2 id="函数定义"><a class="markdownIt-Anchor" href="#函数定义"></a> 函数定义</h2><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723100949596.png" alt="image-20200723100949596"></p><p>一些规则：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723101052154.png" alt="image-20200723101052154"></p><p>有返回值的函数的返回值可以被弃用，可以选择性地在调用函数语句前加上 void 表示启用，如 (void) printf(…, …)。</p><p>贴一下形参和实参的英语：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723104607123.png" alt="image-20200723104607123"></p><h2 id="函数声明函数原型"><a class="markdownIt-Anchor" href="#函数声明函数原型"></a> 函数声明/函数原型</h2><p>函数没有被要求在调用之前定义，但是需要声明。</p><p>声明给编译器对函数进行一个概要浏览。</p><p>相同类型的函数和变量可以同时声明。</p><h1 id="程序结构"><a class="markdownIt-Anchor" href="#程序结构"></a> 程序结构</h1><h2 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h2><p>把函数体内声明的变量称为相对于外面的局部。</p><p>性质：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723143940978.png" alt="image-20200723143940978"></p><p>在局部变量声明中加入 static 关键字可以是变量拥有永久存储期限，即直到整个程序运行结束。</p><p>形式参数拥有和局部变量的性质。可以将形式参数理解为自动初始化的局部变量。</p><h2 id="外部变量全局变量"><a class="markdownIt-Anchor" href="#外部变量全局变量"></a> 外部变量/全局变量</h2><p>性质：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723144509940.png" alt="image-20200723144509940"></p><p>使用的取舍：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723145102863.png" alt="image-20200723145102863"></p><p>使用外部变量时，确保他们都拥有有意义的名字。</p><p>main函数内的变量不是全局变量，而是局部变量。只不过它的生命周期和全局变量一样长而已。</p><p>全局变量一定是定义在函数外部的。</p><h2 id="程序块"><a class="markdownIt-Anchor" href="#程序块"></a> 程序块</h2><p>形式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723150029018.png" alt="image-20200723150029018"></p><p>默认情况下，声明在程序块中的变量的存储期限是自动的；退出程序块时<strong>解除分配</strong>。</p><p>变量具有程序块作用域，不能再程序块外部引用。</p><p>典型的像 if, for, while, 函数定义等等。</p><p>与程序块作用域对应的是文件作用域。</p><p>好处：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723150544626.png" alt="image-20200723150544626"></p><h2 id="编排顺序"><a class="markdownIt-Anchor" href="#编排顺序"></a> 编排顺序</h2><ul><li>#include 指令</li><li>#define 指令</li><li>类型定义</li><li>外部变量声明</li><li>除 main 函数以外的函数原型</li><li>main 函数的定义</li><li>其他函数的定义</li></ul><p>以上是一般流程。</p><p>最后建议：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723151148782.png" alt="image-20200723151148782"></p><h1 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h1><h2 id="指针pointer"><a class="markdownIt-Anchor" href="#指针pointer"></a> 指针（Pointer）</h2><p>In declaration, “*” means “… points to …”.</p><p>In expression, “*” means “the content of …(the pointer refers to)”, “&amp;” means “the address of …”.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v[<span class="number">6</span>]&#123; <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> *p&#123; &amp;v[<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; **(&amp;p); <span class="comment">// "d"</span></span><br></pre></td></tr></table></figure><p>C 语言要求每个指针变量唯一指向特定类型（引用类型）的对象。</p><p>指针指向对象的首字节地址。</p><p>如上面所说，在表达式中，&quot;&amp;&quot; 为取地址运算符，&quot;*&quot; 为间接寻址运算符（访问存储在对象中的内容）。</p><p>在表达式中，从算术的角度来讲，两者互为逆运算。</p><h2 id="指针赋值"><a class="markdownIt-Anchor" href="#指针赋值"></a> 指针赋值</h2><p>C 语言允许使用赋值运算符进行指针的复制，前提是两个指针具有相同的类型。</p><p>任意数量的指针变量都可以指向同一个对象。</p><p>关于 scanf：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723164418277.png" alt="image-20200723164418277"></p><h2 id="指针作为实际参数"><a class="markdownIt-Anchor" href="#指针作为实际参数"></a> 指针作为实际参数</h2><p>可以使用 const 关键字来证明函数不会改变传递给函数的指针所指向的对象（但是指针本身可以改变）。</p><p>const  放到形式参数的类型说明之前，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">ture<span class="built_in">printf</span>(<span class="string">"%d"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针作为返回值"><a class="markdownIt-Anchor" href="#指针作为返回值"></a> 指针作为返回值</h2><p>注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723165238904.png" alt="image-20200723165238904"></p><h1 id="指针和数组"><a class="markdownIt-Anchor" href="#指针和数组"></a> 指针和数组</h1><h2 id="指针的算术运算"><a class="markdownIt-Anchor" href="#指针的算术运算"></a> 指针的算术运算</h2><p>分为三种：</p><ul><li>指针加上整数</li><li>指针减去整数</li><li>指针和指针相减</li></ul><p>指针上某个整数 j 产生的特定元素的指针，是指针原先指向的元素的后 j 个位置。减法亦然。</p><p>指针和指针相减，结果为指针之间的距离（两个元素相差的距离，有正有负），可以用于计算数组的大小。</p><p>指针指向同一个数组，指针之间的相减才有意义。</p><p>指针之间的相减只应用于数组。</p><h2 id="指针的比较"><a class="markdownIt-Anchor" href="#指针的比较"></a> 指针的比较</h2><p>指针比较的结果依赖于指针之间的相互位置，如：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723200401431.png" alt="image-20200723200401431"></p><p>中， p &gt; q 为真。</p><p>指针指向同一个数组，指针之间的比较才有意义。</p><p>指针之间的比较只应用于数组。</p><p>关于 ++ 和 * 的优先级：++ 优先级大于 *</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723205202566.png" alt="image-20200723205202566"></p><p>– 和 ++ 相同。</p><p>数组名可以作为指向数组第一个元素的指针。</p><p>数组名的指针不能对其进行修改。</p><h2 id="指针处理多维数组"><a class="markdownIt-Anchor" href="#指针处理多维数组"></a> 指针处理多维数组</h2><p>以一维的方式处理二维数组：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200723210609556.png" alt="image-20200723210609556"></p><h1 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h1><h2 id="字符串字面量"><a class="markdownIt-Anchor" href="#字符串字面量"></a> 字符串字面量</h2><p>又叫字符串常量，是用一对双引号括起来的字符序列。</p><p>使用 “/” 或者空白字符可以延续字符串字面量。</p><p>N 字节长度的字符串字面量使用 N + 1 长度的字符数组存储，默认最后一位为空字符 “\0”。</p><p>字符串字面量如 “abc…” 代表第一个字符的地址。因此：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724061000402.png" alt="image-20200724061000402"></p><p>可以对字符串字面量使用下标。</p><h2 id="字符串变量"><a class="markdownIt-Anchor" href="#字符串变量"></a> 字符串变量</h2><p>只要保证字符串以空字符结尾，任何一维的字符数组都可以用来存储字符串。</p><p>字符串的长度取决于空字符的位置，而不是数组长度。</p><p>在初始化的时候，字符串长度小于字符数组，字符数组会自动添加空字符。</p><p>没有空间添加空字符时，编译器也不会试图添加。</p><p>字符数组和字符指针的区别：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724062855755.png" alt="image-20200724062855755"></p><h2 id="字符串的读写"><a class="markdownIt-Anchor" href="#字符串的读写"></a> 字符串的读写</h2><h3 id="写"><a class="markdownIt-Anchor" href="#写"></a> 写</h3><p>转换说明 “%s” 允许 printf 函数写字符串。</p><p>printf 会逐个输出字符串直到遇到空字符为止。</p><p>转换说明 “%<a href="http://m.ps" target="_blank" rel="noopener">m.ps</a>”，使字符串的前 p 个字符在大小为 m 的域内显示。默认右对齐，加 “-” 变为左对齐。</p><p>puts 函数也可以写字符串：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724091137166.png" alt="image-20200724091137166"></p><h3 id="读"><a class="markdownIt-Anchor" href="#读"></a> 读</h3><p>读取字符串时会保证字符串末尾存储空字符（如果有空的位置）。</p><p>scanf 读取字符串：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724091430826.png" alt="image-20200724091430826"></p><p>注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724091845816.png" alt="image-20200724091845816"></p><p>gets 读取字符串：</p><p>gets 函数只有一个参数。</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724092428789.png" alt="image-20200724092428789"></p><p>注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724092937389.png" alt="image-20200724092937389"></p><p>puts 和 gets 函数运行速度更快。</p><p>可以按照自己的需求编写读取函数。</p><p>访问字符串中的字符有两种方法：下标或指针。</p><h2 id="stringh-库"><a class="markdownIt-Anchor" href="#stringh-库"></a> string.h 库</h2><h3 id="strcpy-函数"><a class="markdownIt-Anchor" href="#strcpy-函数"></a> strcpy 函数</h3><p>函数原型：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724095454922.png" alt="image-20200724095454922"></p><p>strcpy 函数将 s2 复制到 s1。</p><p>注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724095719410.png" alt="image-20200724095719410"></p><h3 id="strcat-函数"><a class="markdownIt-Anchor" href="#strcat-函数"></a> strcat 函数</h3><p>函数原型：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724095841323.png" alt="image-20200724095841323"></p><p>strcat 函数将 s2 中的内容追加到 s1 的后面。</p><h3 id="strcmp-函数"><a class="markdownIt-Anchor" href="#strcmp-函数"></a> strcmp 函数</h3><p>函数原型：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724100004320.png" alt="image-20200724100004320"></p><p>strcmp 函数比较 s1 和 s2  的大小，比较方法如下：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724100422664.png" alt="image-20200724100422664"></p><h3 id="strlen-函数"><a class="markdownIt-Anchor" href="#strlen-函数"></a> strlen 函数</h3><p>strlen 函数求字符串的长度。</p><h2 id="字符串数组"><a class="markdownIt-Anchor" href="#字符串数组"></a> 字符串数组</h2><p>举个例子：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724104346637.png" alt="image-20200724104346637"></p><p>对应结构：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724104409491.png" alt="image-20200724104409491"></p><p>命令行参数</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724104433618.png" alt="image-20200724104433618"></p><p>两个参数：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724104507044.png" alt="image-20200724104507044"></p><h1 id="预处理器"><a class="markdownIt-Anchor" href="#预处理器"></a> 预处理器</h1><p>预处理器用来处理指令，它可以在运行前编辑 C 程序。</p><p>执行流程：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724134149386.png" alt="image-20200724134149386"></p><p>预处理指令包括三种：</p><ul><li>宏定义</li><li>文件包含</li><li>条件编译</li></ul><p>规则：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724134712476.png" alt="image-20200724134712476"></p><h2 id="宏定义"><a class="markdownIt-Anchor" href="#宏定义"></a> 宏定义</h2><h3 id="简单的宏"><a class="markdownIt-Anchor" href="#简单的宏"></a> 简单的宏</h3><p>格式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724135036333.png" alt="image-20200724135036333"></p><h3 id="带参数的宏"><a class="markdownIt-Anchor" href="#带参数的宏"></a> 带参数的宏</h3><p>格式：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724135233990.png" alt="image-20200724135233990"></p><p>例子：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724135335909.png" alt="image-20200724135335909"></p><p>使用宏会加快程序执行速度。</p><p>宏还可以给我们做代码模板。</p><h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> # 运算符</h3><p>“#” 运算符将一个宏参数转换为字符串字面量。如：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724154014735.png" alt="image-20200724154014735"></p><h3 id="运算符-2"><a class="markdownIt-Anchor" href="#运算符-2"></a> ## 运算符</h3><p>“##” 运算符</p><h2 id="宏的通用属性"><a class="markdownIt-Anchor" href="#宏的通用属性"></a> 宏的通用属性</h2><p>宏的替换列表可以包含对另一个宏的调用。</p><p>宏定义的作用范围一般到文件的结尾。</p><p>宏不能被定义两遍。</p><p>可以使用 #undef 指令取消定义。格式如下：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724155611112.png" alt="image-20200724155611112"></p><h2 id="预定义宏"><a class="markdownIt-Anchor" href="#预定义宏"></a> 预定义宏</h2><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724155707857.png" alt="image-20200724155707857"></p><h2 id="条件编译"><a class="markdownIt-Anchor" href="#条件编译"></a> 条件编译</h2><h3 id="if-和-endif"><a class="markdownIt-Anchor" href="#if-和-endif"></a> #if 和 #endif</h3><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724161649150.png" alt="image-20200724161649150"></p><p>注意：</p><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200724161903768.png" alt="image-20200724161903768"></p><h3 id="defined"><a class="markdownIt-Anchor" href="#defined"></a> #defined</h3><p>当 defined 用于标识符时，如果标识符是一个被定义过的宏，返回 1；否则返回 。</p><h3 id="elif-和-else"><a class="markdownIt-Anchor" href="#elif-和-else"></a> #elif  和 #else</h3><p><img src="../AppData/Roaming/Typora/typora-user-images/image-20200726215046416.png" alt="image-20200726215046416"></p><p>(未完待续…)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Since C is significant to my further learning, I decide to review C and write a little bit about it.&lt;/p&gt;
&lt;p&gt;C 语言是贝尔实验室在开发UNIX操作系统时的副产品，C+
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://buki-freak.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>De1ta-CTF-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/08/03/De1ta-CTF-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/08/03/De1ta-CTF-2020-Review/</id>
    <published>2020-08-03T03:40:01.862Z</published>
    <updated>2020-08-03T07:05:31.815Z</updated>
    
    <content type="html"><![CDATA[<p>Only review in Crypto.</p><h1 id="nlfsrunsolved"><a class="markdownIt-Anchor" href="#nlfsrunsolved"></a> nlfsr(unsolved)</h1><p>This challenge consists of 4 linear feedback shift registers (below I use LFSR instead), with accordingly 19 bits, 19 bits, 6 bits and 3 bits state length. Here is the given file:</p><p><strong><a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> a, b, c, d, flag</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">"De1CTF&#123;"</span> + <span class="string">''</span>.join([hex(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]) + <span class="string">"&#125;"</span></span><br><span class="line"><span class="keyword">assert</span> [len(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]] == [<span class="number">19</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">ma, mb, mc, md = <span class="number">0x505a1</span>, <span class="number">0x40f3f</span>, <span class="number">0x1f02</span>, <span class="number">0x31</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(r, m)</span>:</span> <span class="keyword">return</span> ((r &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span>) ^ (bin(r &amp; m).count(<span class="string">'1'</span>) % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, c, d</span><br><span class="line">    a = lfsr(a, ma)</span><br><span class="line">    b = lfsr(b, mb)</span><br><span class="line">    c = lfsr(c, mc)</span><br><span class="line">    d = lfsr(d, md)</span><br><span class="line">    [ao, bo, co, do] = [i &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]</span><br><span class="line">    <span class="keyword">return</span> (ao*bo) ^ (bo*co) ^ (bo*do) ^ co ^ do</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genkey</span><span class="params">(nb)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nb*<span class="number">8</span>):</span><br><span class="line">        s += str(combine())</span><br><span class="line">    open(<span class="string">"data"</span>, <span class="string">"w+"</span>).write(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">genkey(<span class="number">128</span>*<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p><strong>data</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> <span class="keyword">string</span> that comprises <span class="keyword">of</span> <span class="number">128</span>*<span class="number">1024</span>*<span class="number">8</span> bits(only <span class="literal">zero</span> <span class="keyword">or</span> <span class="literal">one</span>)</span><br></pre></td></tr></table></figure><h2 id="explanation"><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h2><p>There are four LFSR in <a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a> and each round, four LFSR simultaneously compute four according output. Then the combination function combines these four bits and output the combination result into file data.</p><h2 id="condition"><a class="markdownIt-Anchor" href="#condition"></a> Condition</h2><p>Since LFSR is the basic knowledge for us, there will more no more explanation on it. So let’s see what we have  got from the files.</p><blockquote><p>the initial state length of each LFSR</p><p>the taps of each LFSR</p><p>a combination function</p><p>many rounds combination results</p></blockquote><p>It seems to be a simple quiz because we have already known the taps of each LFSR. However, each output of four LFSR is combined as one bit, from which we can hardly retrieve the outputs of four LFSR. If we use pure brute-force attack method, the complexity would be:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>47</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{47})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>Such a large scale. We must relate one or some output of four LFSR to the combination result and solve the each state independently. We can use a strategies called <strong>correlation attack</strong> in stream cipher.</p><h2 id="details"><a class="markdownIt-Anchor" href="#details"></a> Details</h2><p>We first look into each possible situation of four LFSR and write down the result.</p><table><thead><tr><th>ao</th><th>bo</th><th>co</th><th>do</th><th>combine</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>In the table, ao represents the single output of LFSR-1 and so on. It is very obvious that ao has 75% correlation with the combination output, and we also know that if we have the correct initial state of LFSR-1,  three out of four output of LFSR-1 will be the same as the combination bits. As a result, we can independently search the initial state of LFSR-1, and the correct initial state should be the fittest one. Now the complexity comes down to:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>19</mn></msup><mo>+</mo><msup><mn>2</mn><mn>28</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>28</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{19}+2^{28})=O({2^{28}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>This is already considerable in brute-force attack method (I use approximately 3 hours with C++, half a day with python to solve). But sadly, outputs of other LFSR just has 50% correlation with the combination output (actually no correlation). We can look into the combination function:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ao*<span class="keyword">bo</span>) ^ (<span class="keyword">bo</span>*<span class="keyword">co</span>) ^ (<span class="keyword">bo</span>*<span class="keyword">do</span>) ^ <span class="keyword">co</span> ^ <span class="keyword">do</span></span><br></pre></td></tr></table></figure><p>And interestingly it can be transformed into:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ao*<span class="keyword">bo</span>) ^ ((<span class="keyword">bo</span>^<span class="number">1</span>) * (<span class="keyword">co</span>^<span class="keyword">do</span>))</span><br></pre></td></tr></table></figure><p>Calculating the XOR result of co and do by ourselves, we can surprisingly find that there is correlation between (co^do) and the combination result. Try to write down the table again.</p><table><thead><tr><th>ao</th><th>bo</th><th>co^do</th><th>combine</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>Again we can know from the table that (co^do) has 75% correlation with the combination output, which is the same as ao. There the complexity comes down again to:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>19</mn></msup><mo>+</mo><msup><mn>2</mn><mn>9</mn></msup><mo>+</mo><msup><mn>2</mn><mn>19</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>20</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{19}+2^{9}+2^{19})=O(2^{20})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>The complexity is very considerable now.</p><h2 id="realization"><a class="markdownIt-Anchor" href="#realization"></a> Realization</h2><p>Official realization</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ma, mb, mc, md = <span class="number">0x505a1</span>, <span class="number">0x40f3f</span>, <span class="number">0x1f02</span>, <span class="number">0x31</span></span><br><span class="line">key = open(<span class="string">"data"</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(r, m)</span>:</span> <span class="keyword">return</span> ((r &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span>) ^ (bin(r &amp; m).count(<span class="string">'1'</span>) % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcR</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(x) == len(y)</span><br><span class="line">    cnt = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(x, y):</span><br><span class="line">        cnt += (i == j)</span><br><span class="line">    <span class="keyword">return</span> cnt / len(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutea</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, reala = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">19</span>):</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        a = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            s += str(a &amp; <span class="number">1</span>)</span><br><span class="line">        r = calcR(s, key[:nb * <span class="number">8</span>])</span><br><span class="line">        <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">            relation, reala = r, i</span><br><span class="line">    print(reala, relation)</span><br><span class="line">    <span class="keyword">return</span> reala</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutecd</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, realc, reald = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">6</span>):</span><br><span class="line">        d = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">13</span>):</span><br><span class="line">            c = j</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">                c = lfsr(c, mc)</span><br><span class="line">                d = lfsr(d, md)</span><br><span class="line">                s += str((c &amp; <span class="number">1</span>) ^ (d &amp; <span class="number">1</span>))</span><br><span class="line">            r = calcR(s, key[:nb * <span class="number">8</span>])</span><br><span class="line">            <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">                relation, realc, reald = r, j, i</span><br><span class="line">    print(realc, reald, relation)</span><br><span class="line">    <span class="keyword">return</span> realc, reald</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteb</span><span class="params">(nb, a_, c_, d_)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">19</span>):</span><br><span class="line">        b = i</span><br><span class="line">        a, c, d = a_, c_, d_</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            b = lfsr(b, mb)</span><br><span class="line">            c = lfsr(c, mc)</span><br><span class="line">            d = lfsr(d, md)</span><br><span class="line">            [ao, bo, co, do] = [k &amp; <span class="number">1</span> <span class="keyword">for</span> k <span class="keyword">in</span> [a, b, c, d]]</span><br><span class="line">            s += str((ao * bo) ^ (bo * co) ^ (bo * do) ^ co ^ do)</span><br><span class="line">        <span class="keyword">if</span> s == key[:nb * <span class="number">8</span>]:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(start_time)</span><br><span class="line">    a = brutea(<span class="number">20</span>)</span><br><span class="line">    c, d = brutecd(<span class="number">20</span>)</span><br><span class="line">    b = bruteb(<span class="number">20</span>, a, c, d)</span><br><span class="line">    <span class="string">"De1CTF&#123;%s&#125;"</span> % (<span class="string">''</span>.join([hex(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Used time:"</span>, end_time - start_time)</span><br><span class="line"><span class="comment"># De1CTF&#123;58bb578d5611363f&#125;</span></span><br></pre></td></tr></table></figure><p>Other challenges still remain confused.</p><h1 id="what-i-have-done"><a class="markdownIt-Anchor" href="#what-i-have-done"></a> What I have done</h1><p>I spent half of my afternoon writing this article, and I still have a long way to go. Keep on learning IELTS and number theory.</p><h1 id="things-to-learn-and-improve"><a class="markdownIt-Anchor" href="#things-to-learn-and-improve"></a> Things to Learn and Improve</h1><ul><li>How to use sage</li><li>Do a review on wangdibei</li></ul><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h1><ul><li><a href="https://en.wikipedia.org/wiki/Correlation_attack" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Correlation_attack</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only review in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;nlfsrunsolved&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nlfsrunsolved&quot;&gt;&lt;/a&gt; nlfsr(unsolved)&lt;/h1&gt;
&lt;p&gt;This ch
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>天翼杯-2020-Writeup</title>
    <link href="https://buki-freak.github.io/2020/07/31/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2020-Writeup/"/>
    <id>https://buki-freak.github.io/2020/07/31/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2020-Writeup/</id>
    <published>2020-07-31T15:00:19.000Z</published>
    <updated>2020-08-03T03:24:09.259Z</updated>
    
    <content type="html"><![CDATA[<p>比赛排得很密，gkd 把 writeup 写了。</p><h1 id="easyrsa"><a class="markdownIt-Anchor" href="#easyrsa"></a> easyRSA</h1><p>签到题，对于每一次加密，明文空间小，于是直接遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = ...</span><br><span class="line">cipher = ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">e = <span class="number">11299</span></span><br><span class="line">plaintext = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> pow(ord(s),e,n) == cipher[i]:</span><br><span class="line">            plaintext += s</span><br><span class="line">            print(plaintext)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="hardrsa"><a class="markdownIt-Anchor" href="#hardrsa"></a> hardRSA</h1><p>已知 d 低 539 位，q 为 510 位，计算低位 q 的方法可以直接获得 q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_q</span><span class="params">(d0, kbits, e, n, p)</span>:</span></span><br><span class="line">    X = var(<span class="string">'X'</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*(p<span class="number">-1</span>)*X*(n//p-X+<span class="number">1</span>) + (p<span class="number">-1</span>)*k*(n//p) == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            q0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> n % q0 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> q0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">12723332779402711330767180202990021139894727917028981722242076998825097254419567024122271773380821224949951558669351311750240296591612098048129709925844660421849429715755474874708286508736369884566273719494870891070006251521469139401722700298201541140391493575314714966432624976434199682124684035067305114749262672684081617896579640435891181745346695293618235303178334371123418790204709073465264408888007492994820133128499094347122686903153588634296508454120927</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    p = <span class="number">3141886348112988339174865432179206412942588390228169645162293920470188882447855208783220899752887620221059861467348059334030873350571979462363834615231089</span></span><br><span class="line">    c = <span class="number">8696771272015513736887843395612361647314297287781507609196936354183211655364744684164300710583625473872942712063309507651496314800393009480421886926137403759228421858414833429980059903049311837014449093365911603108158352871851677457256058510822509157407703210866317472894586087554001158540951787167699161720491198674848526093644131709561995379565643716017359731201935855247285498574923656191121426618306186331615280461405913653781283860760013215603007314688132</span></span><br><span class="line">    d0 = <span class="number">0x414946b9c40728f9801e61e98ec6d17525cbe4163a5ffb8367b65c652ae4cc3abce62e70afbfb84fcf937b3119953b48922be19ef4312c4f3a88313368ca6c9b1d658b7</span></span><br><span class="line">    </span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    kbits = d0.nbits()</span><br><span class="line"></span><br><span class="line">    q = find_q(d0, kbits, e, n, p)</span><br><span class="line">    r = n // q // p</span><br><span class="line">    phi = (r - <span class="number">1</span>) * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    print(long_to_bytes(pow(c,d,n)))</span><br></pre></td></tr></table></figure><p><strong>ps：之后把推导过程补上</strong></p><h1 id="alicehomework"><a class="markdownIt-Anchor" href="#alicehomework"></a> AliceHomework</h1><p>LLL 没跑出来，疑惑.jpg</p><h1 id="polycrypto"><a class="markdownIt-Anchor" href="#polycrypto"></a> PolyCrypto</h1><p>没时间看题。。。tcl</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;比赛排得很密，gkd 把 writeup 写了。&lt;/p&gt;
&lt;h1 id=&quot;easyrsa&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#easyrsa&quot;&gt;&lt;/a&gt; easyRSA&lt;/h1&gt;
&lt;p&gt;签到题，对于每一次加密，明文空间小，于是直接遍历。
      
    
    </summary>
    
    
    
      <category term="Writeup" scheme="https://buki-freak.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>3kctf-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/07/27/3kctf-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/07/27/3kctf-2020-Review/</id>
    <published>2020-07-27T06:21:11.000Z</published>
    <updated>2020-08-03T03:26:54.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyzzle1"><a class="markdownIt-Anchor" href="#pyzzle1"></a> pyzzle1</h1><p>Given a cst tree code, use libcst package in python to transform it into source code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libcst <span class="keyword">import</span> *</span><br><span class="line">abc = Module(....</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'...'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str(abc.code))</span><br></pre></td></tr></table></figure><p>Here is the source code in python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">"REDACTED"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i]):</span><br><span class="line">            temp += <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp += <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinaryToDecimal</span><span class="params">(binary)</span>:</span></span><br><span class="line">    string = int(binary, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># encryption</span></span><br><span class="line">PT_Ascii = [ord(x) <span class="keyword">for</span> x <span class="keyword">in</span> plaintext]</span><br><span class="line"></span><br><span class="line">PT_Bin = [format(y, <span class="string">'08b'</span>) <span class="keyword">for</span> y <span class="keyword">in</span> PT_Ascii]</span><br><span class="line">PT_Bin = <span class="string">""</span>.join(PT_Bin)</span><br><span class="line"></span><br><span class="line">n = <span class="number">26936</span></span><br><span class="line">K1 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">K2 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line"></span><br><span class="line">L1 = PT_Bin[<span class="number">0</span>:n]</span><br><span class="line">R1 = PT_Bin[n::]</span><br><span class="line"></span><br><span class="line">f1 = exor(R1, K1)</span><br><span class="line">R2 = exor(f1, L1)</span><br><span class="line">L2 = R1</span><br><span class="line"></span><br><span class="line">f2 = exor(R2, K2)</span><br><span class="line">R3 = exor(f2, L2)</span><br><span class="line">L3 = R2</span><br><span class="line"></span><br><span class="line">R3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">L3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">cipher = L3+R3</span><br><span class="line"></span><br><span class="line"><span class="comment"># # decryption (redacted)</span></span><br><span class="line"><span class="comment"># plaintext = L6+R6</span></span><br><span class="line"><span class="comment"># plaintext = int(plaintext, 2)</span></span><br><span class="line"><span class="comment"># plaintext = binascii.unhexlify('%x' % plaintext)</span></span><br><span class="line"><span class="comment"># print(plaintext)</span></span><br></pre></td></tr></table></figure><p>This is a pretty easy structure, we can easily recover plaintext by:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i]):</span><br><span class="line">            temp += <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp += <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">26936</span></span><br><span class="line">K1 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">K2 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">R3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">L3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line"></span><br><span class="line">R2 = L3</span><br><span class="line">L2 = exor(exor(K2, R2), R3)</span><br><span class="line"></span><br><span class="line">R1 = L2</span><br><span class="line">L1 = exor(exor(K1, R1), R2)</span><br><span class="line"></span><br><span class="line">plaintext = L1+R1</span><br><span class="line">plaintext = int(plaintext, <span class="number">2</span>)</span><br><span class="line">plaintext = binascii.unhexlify(<span class="string">'%x'</span> % plaintext)</span><br><span class="line">plaintext = binascii.unhexlify(plaintext)</span><br><span class="line">print(plaintext)</span><br></pre></td></tr></table></figure><p>The flag is : 3k{almost_done_shizzle_up_my_nizzle}</p><h1 id="once_upon_a_time"><a class="markdownIt-Anchor" href="#once_upon_a_time"></a> Once_upon_a_time</h1><p>Given a program and encrypted flag:</p><blockquote><p>scss : program entrance</p><p>main.c</p><p>cipher.c</p><p>flag_encrypted</p><p>…</p></blockquote><p>Excellent realization of LFSR and block cipher encryption in C.</p><p>We notice that the initial vector is fixed, 0xa2 😃 Addtionally, the key is fixed too, which means we can always get the same key stream. Moreover, I find something wired in cipher.c:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">ECB:</span></span><br><span class="line">    temp_ciphertext = temp_keystream ^ temp_plaintext;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>We can create a file with only ‘\x00’ and encrypt it in ECB mode to get the keystream.</p><p>Since there are five modes, we can only try every situations.</p><p>Woooool, finally catch ya! OFB!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: plaintext = <span class="string">''</span>                                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">113</span>): </span><br><span class="line">    ...:     iv = iv ^ keystream[i] </span><br><span class="line">    ...:     temp = iv ^ cipher[i] </span><br><span class="line">    ...:     plaintext += chr(temp) </span><br><span class="line">    ...:                                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: plaintext                                                              </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'3k&#123;my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail&#125;'</span></span><br></pre></td></tr></table></figure><p>The flag is : 3k{my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail}</p><h1 id="you-shall-not-get-my-cookies"><a class="markdownIt-Anchor" href="#you-shall-not-get-my-cookies"></a> You shall not get my cookies</h1><p>Given an example cipher, and if the cipher can be correctly decrypted, it will send “Nop” back.</p><p>I follow the write up here: <a href="https://ctftime.org/writeup/22602" target="_blank" rel="noopener">https://ctftime.org/writeup/22602</a></p><p>Notice that there is an error in the write up above: if the length of a block is 16 bytes, it will be appended a block of sixteen ‘\x16’ according to PKCS#7 padding principle.</p><p>Here is my exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">'youshallnotgetmycookies.3k.ctf.to'</span></span><br><span class="line">port = <span class="number">13337</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">"6F6A6A2C6E780D070A19001707060C0D"</span></span><br><span class="line"></span><br><span class="line">suffix = <span class="string">''</span></span><br><span class="line">fake_iv = <span class="string">''</span></span><br><span class="line">dc = <span class="string">''</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        <span class="keyword">assert</span>(len(dc) == <span class="number">2</span>*(i<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">            guess = hex(j)[<span class="number">2</span>:].upper().zfill(<span class="number">2</span>)</span><br><span class="line">            fake_iv = <span class="string">'00'</span> * (<span class="number">16</span>-i) + guess + suffix</span><br><span class="line">            print(<span class="string">'[-]'</span> + fake_iv)</span><br><span class="line">            p = remote(target, port)</span><br><span class="line">            p.sendlineafter(<span class="string">'So... whats your cookie: '</span>, fake_iv + cipher)</span><br><span class="line">            res = p.recvall(timeout=<span class="number">4</span>)</span><br><span class="line">            p.close()</span><br><span class="line">            res = res.decode()</span><br><span class="line">            <span class="keyword">if</span>  len(res) == <span class="number">11</span>:</span><br><span class="line">                pad = bytes([i])</span><br><span class="line">                dc = hex(int(guess, <span class="number">16</span>) ^ bytes_to_long(pad))[<span class="number">2</span>:].upper().zfill(<span class="number">2</span>) + dc</span><br><span class="line">                suffix = hex(int(dc, <span class="number">16</span>) ^ bytes_to_long(bytes([(i+<span class="number">1</span>)]) * i))[<span class="number">2</span>:].upper().zfill(i*<span class="number">2</span>)</span><br><span class="line">                print(<span class="string">'[-]  D(C1) '</span>+ dc)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'[-]  D(C1) '</span>+ dc)</span><br><span class="line"><span class="keyword">except</span> pwnlib.exception.PwnlibException:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1C091F451A0B070D00130A1D0D0C0607  for the first block to be d(C2)</span></span><br><span class="line"><span class="comment"># B0A608DDC37A458EEC0B74D37E888E8A  for the second block</span></span><br><span class="line"><span class="comment"># ...3B143145885BB42C94 for the third block</span></span><br><span class="line"><span class="comment"># C2</span></span><br><span class="line"><span class="comment"># 90C560B2A01529EF986E54B016E1FEAA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C1</span></span><br><span class="line"><span class="comment"># 6F6A6A2C6E780D070A19001707060C0D</span></span><br><span class="line"><span class="comment"># Calculate d(C1)</span></span><br><span class="line"><span class="comment"># 218A7AEECEFB49CADF3D227AD84A21CF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate C0</span></span><br><span class="line"><span class="comment"># 6CEB0A82ABDB06ABAB50471BB46A63A6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The whole fake cipher:</span></span><br><span class="line"><span class="comment"># 6CEB0A82ABDB06ABAB50471BB46A63A66F6A6A2C6E780D070A19001707060C0D90C560B2A01529EF986E54B016E1FEAA</span></span><br></pre></td></tr></table></figure><p>It cost 2 hours running this script twice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pyzzle1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pyzzle1&quot;&gt;&lt;/a&gt; pyzzle1&lt;/h1&gt;
&lt;p&gt;Given a cst tree code, use libcst package in python to tr
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>2020-First-Half-Review</title>
    <link href="https://buki-freak.github.io/2020/06/30/2020-First-Half-Review/"/>
    <id>https://buki-freak.github.io/2020/06/30/2020-First-Half-Review/</id>
    <published>2020-06-30T15:23:46.000Z</published>
    <updated>2020-07-17T02:47:27.086Z</updated>
    
    <content type="html"><![CDATA[<p>2020 已经过半，新年的钟声仿佛仍然萦绕在耳边。时间过得太快，留下的太少。</p><h1 id="回顾"><a class="markdownIt-Anchor" href="#回顾"></a> 回顾</h1><p>今年真的很特别啊，二月份的时候还抱着回学校上课的想法，现在已经上了一学期的网课。对于网课和回学校上课，我是偏后者的。要知道，待在家里学习效率不到学校的十分之一：）不过还好，现在好像慢慢习惯下去了 hhhhh</p><p>本来是二月底开学的，不过学校说推迟开学（不带网课的那种）。好吧，等到三月份，盼了许久谁知改成网课（直接裂开&gt;_&lt;，网课==自学。不得不说，这半年处于真·白学阶段，白学能力提高了不少。</p><p>一月主要在学了 Matlab 编程和 Latex，从基本语法到画图，再到如何用 Latex 写出一篇 nice 的论文。学这个主要是为了准备数模，不过听说毕业论文要用 Latex 2333。因为寒假前有个朋友拉数模美赛，自己感觉想试试（说不定好好学能拿个奖。于是就报名去了，报名费也不便宜。后面去听了听那边的基础课，建模对数学要求还是挺高的，有点懵。后面朋友说让我学学 Matlab 编程。基础学下来其实也不用花很长时间，但是拖着拖着到二月份去了。不过回想那个时候，自己跟着网上教程走，还是不错的。</p><p>美赛在三月份，基础搞好了以后就开始放飞自我了（真就只搞了基础 wdt。其实主要是发现自己太久没搞学科了，于是又跑来这边学学。掏出一个《快乐的 Linux 命令行》，也忘了是谁发给我的了，系统地过一遍 Linux。从文件系统跳转到 vim 处理文本 再到软件包管理，最后 shell 编程，途中顺便捡回了正则表达式。看的时候其实真的有很大感触。看懂命令，提高主动性，这是我悟出的一点。最近选课突然发现下学期有一门叫《操作系统实践》的课，讲得就是 Linux 命令2333</p><p>美赛那三天每天只睡了6个小时，负责编程。另外两个大佬建模分析等等（这里的等等省略了许多… wtcl 代码都是队友帮我找的。当时其实挺自责的，到后两天我才开始发挥作用。最终还是两位大佬带着我一个菜鸡勉强拿了个奖。求下年别再拉我了。</p><p>到了三月底就开始上课了，通常第一个星期都是介绍课程，必须要听啊，种种原因。一开始的那几个星期还是很认真的听课的，后面就不忍直视了。school 特色原因，水课很多。这时候网课的优势就凸显出来了。话虽这么说，但是英语还是得好好学。</p><p>四月份开始准备学校的新生赛。Crypto 不会出题。于是直接用了上一年校赛的模板，一波三折，最后强行凑出三道题，难度还不小，直接丢到平台，没人做出来 555</p><p>大概四月中旬，家里人出事情了，心态有点崩，之后算是勉勉强强地在学习吧。</p><p>到了五月份，整个人勤快了，学得挺快。把 Crypto 的基础过了一遍，打下了几场比赛，看了不少paper，收获还是挺大的，可惜没有进到线下。一个队伍，三缺一，加上进线下的种种困难，离目标还是很远啊。</p><p>六月份主要在准备各科的考试，全力复习，毕竟还是想混个奖学金。现在想想，不知不觉，已经在家半年。。。希望快快开学。</p><h1 id="感想"><a class="markdownIt-Anchor" href="#感想"></a> 感想</h1><p>大学已经过去一半，庆幸自己这一年没有浪费，但也很可惜，没有达到自己预期的目标。怎么说呢，自己当初的目标其实已经改变了吧，现实中的变化的太快，而且自己当初的决心似乎也没有那么坚定。走一步看一步吧，毕竟不想浪费这几年宝贵的时间。</p><h1 id="展望"><a class="markdownIt-Anchor" href="#展望"></a> 展望</h1><p>用某人的话：“少说话，多做事。光说不练假把式，要勤奋，勇于实践。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020 已经过半，新年的钟声仿佛仍然萦绕在耳边。时间过得太快，留下的太少。&lt;/p&gt;
&lt;h1 id=&quot;回顾&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回顾&quot;&gt;&lt;/a&gt; 回顾&lt;/h1&gt;
&lt;p&gt;今年真的很特别啊，二月份的时候还抱着回学校上课的想法
      
    
    </summary>
    
    
    
      <category term="Personal Development" scheme="https://buki-freak.github.io/tags/Personal-Development/"/>
    
  </entry>
  
  <entry>
    <title>das-CTF&amp;GK-CTF-2020-Writeup</title>
    <link href="https://buki-freak.github.io/2020/05/24/das-CTF-GK-CTF-2020-Writeup/"/>
    <id>https://buki-freak.github.io/2020/05/24/das-CTF-GK-CTF-2020-Writeup/</id>
    <published>2020-05-24T01:30:24.000Z</published>
    <updated>2020-08-03T03:26:26.371Z</updated>
    
    <content type="html"><![CDATA[<p>Only writeup in Crypto.</p><h1 id="gkctf"><a class="markdownIt-Anchor" href="#gkctf"></a> GKCTF</h1><h2 id="小学生的密码学solved"><a class="markdownIt-Anchor" href="#小学生的密码学solved"></a> 小学生的密码学(Solved)</h2><p>Pretty easy affince cipher. Both keys are given.</p><h2 id="babycryptosolved"><a class="markdownIt-Anchor" href="#babycryptosolved"></a> babycrypto(Solved)</h2><p>Partial high bits of p is known.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use sage to run the script</span></span><br><span class="line"><span class="comment"># Reference: https://www.jianshu.com/p/1a0e876d5929</span></span><br><span class="line"><span class="keyword">from</span> sage.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># All variables are in hex</span></span><br><span class="line">n = <span class="number">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding zeros to p --&gt; p4</span></span><br><span class="line">p4 = <span class="number">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000</span></span><br><span class="line">cipher = <span class="number">1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">kbits = <span class="number">128</span>  <span class="comment"># kbits represent the loss bits</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))  <span class="comment"># Create a polynomial ring</span></span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">    p = p4 + int(roots[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">    q = n / int(p)</span><br><span class="line">    phin = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    d = inverse_mod(e2,phin)</span><br><span class="line">    flag = pow(cipher,d,n)</span><br><span class="line">    <span class="keyword">print</span> long_to_bytes(flag)</span><br></pre></td></tr></table></figure><h2 id="汉字的密码solved"><a class="markdownIt-Anchor" href="#汉字的密码solved"></a> 汉字的密码(Solved)</h2><p>当铺密码+Substitution Cipher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = [<span class="number">66</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">67</span>, <span class="number">118</span>, <span class="number">83</span>, <span class="number">72</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">71</span>, <span class="number">57</span>, <span class="number">82</span>, <span class="number">57</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">51</span>, <span class="number">107</span>]</span><br><span class="line">delta = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    print(chr(i+delta), end=<span class="string">""</span>)</span><br><span class="line">    delta += <span class="number">1</span></span><br><span class="line"><span class="comment"># FLAG&#123;YOU_ARE_GOOD&#125;</span></span><br></pre></td></tr></table></figure><h2 id="backdoorunsolved"><a class="markdownIt-Anchor" href="#backdoorunsolved"></a> Backdoor(Unsolved)</h2><p>Remain confused</p><h1 id="dasctf"><a class="markdownIt-Anchor" href="#dasctf"></a> DASCTF</h1><h2 id="bbcryptosolved"><a class="markdownIt-Anchor" href="#bbcryptosolved"></a> bbcrypto(Solved)</h2><p><strong><a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> A,SALT</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, a, si)</span>:</span></span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line">        c+=hex(((ord(m[i])) * a + ord(next(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    m = <span class="string">'flag&#123;********************************&#125;'</span></span><br><span class="line">    a = A</span><br><span class="line">    salt = SALT</span><br><span class="line">    <span class="keyword">assert</span>(len(salt)==<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">assert</span>(salt.isalpha())</span><br><span class="line">    si = cycle(salt.lower())</span><br><span class="line">    print(<span class="string">"明文内容为："</span>)</span><br><span class="line">    print(m)</span><br><span class="line">    print(<span class="string">"加密后的密文为："</span>)</span><br><span class="line">    c=encrypt(m, a, si)</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="comment">#加密后的密文为：</span></span><br><span class="line">    <span class="comment">#177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d</span></span><br></pre></td></tr></table></figure><p>The length of salt is 3 and we have already known that the plain starts with “flag{”. Solve linear congruent equations to get the salt.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">"177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d"</span></span><br><span class="line">li_c = [int(c[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(c), <span class="number">2</span>)]</span><br><span class="line"><span class="comment"># print(li_c)</span></span><br><span class="line">m = <span class="string">"flag&#123;"</span></span><br><span class="line">d_c = li_c[<span class="number">3</span>] - li_c[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(d_c)</span></span><br><span class="line">d_m = ord(m[<span class="number">3</span>]) - ord(m[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># print(d_m)  # a = 57 mod 128</span></span><br><span class="line">a = <span class="number">57</span></span><br><span class="line"><span class="comment"># print((li_c[0] - a * ord(m[0])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(97))  y1 = 'a'</span></span><br><span class="line"><span class="comment"># print((li_c[1] - a * ord(m[1])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(104)) y2 = 'h'</span></span><br><span class="line"><span class="comment"># print((li_c[2] - a * ord(m[2])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(104))  # y3 = 'h'</span></span><br><span class="line"><span class="comment"># print((li_c[3] - a * ord(m[3])) % 128)</span></span><br><span class="line">m = <span class="string">""</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">inv_a = invert(a, <span class="number">128</span>)</span><br><span class="line">key = itertools.cycle(<span class="string">"ahh"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_c:</span><br><span class="line">    m += chr(((i - ord(next(key))) * inv_a) % <span class="number">128</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h2 id="encrypt_imgsolved"><a class="markdownIt-Anchor" href="#encrypt_imgsolved"></a> encrypt_img(Solved)</h2><p><strong><a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Key</span><br><span class="line"></span><br><span class="line">Plaintext1 = <span class="string">"RC4IsInteresting"</span></span><br><span class="line">Plaintext2 = <span class="string">"ThisIsAEasyGame"</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RC4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, Key)</span>:</span></span><br><span class="line">        self.S = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]  <span class="comment"># 0 - 255</span></span><br><span class="line">        self.K = [ord(Key[i % len(Key)])*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]   <span class="comment"># KEY * 2(0-255)</span></span><br><span class="line">        self.I, self.J = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        self.KSA()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">KSA</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            j = (i+self.K[i]+self.S[i]) % <span class="number">256</span></span><br><span class="line">            self.S[i], self.S[j] = self.S[j], self.S[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.I = (self.I+<span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        self.J = (self.J+self.S[self.I]) % <span class="number">256</span></span><br><span class="line">        self.S[self.J], self.S[self.I] = self.S[self.I], self.S[self.J]</span><br><span class="line">        tmp = (self.S[self.J] + self.S[self.I]) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> self.S[tmp]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encrypt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plain)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> cnt</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        self.rc4 = RC4(Key)</span><br><span class="line">        self.testRC4(plain)</span><br><span class="line">        flag_file = Image.open(<span class="string">r"flag.png"</span>)</span><br><span class="line">        img = array(flag_file)</span><br><span class="line">        self.enc(img)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testRC4</span><span class="params">(self, plain)</span>:</span></span><br><span class="line">        ciphertext = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> plain:</span><br><span class="line">            ciphertext = (ciphertext &lt;&lt; <span class="number">8</span>)+ord(i) ^ self.rc4.next()</span><br><span class="line">        print(<span class="string">"ciphertext&#123;&#125; = &#123;&#125;"</span>.format(cnt, ciphertext))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(self, img)</span>:</span></span><br><span class="line">        a, b, _ = img.shape</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, a):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, b):</span><br><span class="line">                pixel = img[x, y]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                    pixel[i] = pixel[i] ^ self.rc4.next()</span><br><span class="line">                img[x][y] = pixel</span><br><span class="line">        enc = Image.fromarray(img)</span><br><span class="line">        enc.save(<span class="string">"enc&#123;&#125;.png"</span>.format(cnt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Encrypt(Plaintext1)</span><br><span class="line">Encrypt(Plaintext2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ciphertext1 = 12078640933356268898100798377710191641</span></span><br><span class="line"><span class="comment"># ciphertext2 = 79124196547094980420644350061749775</span></span><br></pre></td></tr></table></figure><p><strong>enc1.png</strong></p><p><strong>enc2.png</strong></p><p><strong>Stream Cipher Insertion Attack</strong></p><p>Such a pity that I didn’t figure it out at that time. From two groups of plaintexts and ciphertexts we can recover keystream at the start. However, the second keystream has one bit less than the first one, from which we easily can retrieve m0, then k1, after that m1 and so on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">plaintext1 = "RC4IsInteresting"</span></span><br><span class="line"><span class="string">plaintext2 = "ThisIsAEasyGame"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ciphertext1 = 12078640933356268898100798377710191641</span></span><br><span class="line"><span class="string">ciphertext2 = 79124196547094980420644350061749775</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key1 = []</span></span><br><span class="line"><span class="string">for i in range(len(plaintext1) - 1, -1, -1):</span></span><br><span class="line"><span class="string">     key1 = [ord(plaintext1[i]) ^ (ciphertext1 &amp; 0xff)] + key1</span></span><br><span class="line"><span class="string">     ciphertext1 &gt;&gt;= 8</span></span><br><span class="line"><span class="string">print(key1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key2 = []</span></span><br><span class="line"><span class="string">for i in range(len(plaintext2) - 1, -1, -1):</span></span><br><span class="line"><span class="string">     key2 = [ord(plaintext2[i]) ^ (ciphertext2 &amp; 0xff)] + key2</span></span><br><span class="line"><span class="string">     ciphertext2 &gt;&gt;= 8</span></span><br><span class="line"><span class="string">print(key2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [91, 85, 118, 176, 158, 228, 216, 21, 145, 123, 89, 181, 165, 203, 106, 126]</span></span><br><span class="line"><span class="string"># [91, 85, 118, 176, 158, 228, 216, 21, 145, 123, 89, 181, 165, 203, 106]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># Suppose the bit length of the flag.png is n bits, key1 and key2 can be written like:</span></span><br><span class="line"><span class="comment"># key1: k1, k2, ..., kn</span></span><br><span class="line"><span class="comment"># key2: k0, k1, ..., k(n-1)</span></span><br><span class="line"><span class="comment"># Above we have already known k0 is 126, which is the last key of plaintext2,</span></span><br><span class="line"><span class="comment"># we can retrieve m0, then k1, after that m1 and so on</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">img1 = array(Image.open(<span class="string">r"./enc1.png"</span>))</span><br><span class="line">img2 = array(Image.open(<span class="string">r"./enc2.png"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recovery_img</span><span class="params">(im1, im2, k)</span>:</span></span><br><span class="line">    x1, y1, z1 = im1.shape</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x1):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(y1):</span><br><span class="line">            pixel1 = im1[i, j]</span><br><span class="line">            pixel2 = im2[i, j]</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                pixel2[_] = pixel2[_] ^ k</span><br><span class="line">                k = pixel1[_] ^ pixel2[_]</span><br><span class="line">    im2 = Image.fromarray(im2)</span><br><span class="line">    im2.save(<span class="string">"dec.png"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">recovery_img(img1, img2, <span class="number">126</span>)</span><br></pre></td></tr></table></figure><h2 id="babylcgsolved"><a class="markdownIt-Anchor" href="#babylcgsolved"></a> babyLCG(Solved)</h2><p><strong><a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.b = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.seed = (self.a*self.seed+self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;"</span>.format(self.a, self.b, self.m))</span><br><span class="line">        print(<span class="string">"state1 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line">        print(<span class="string">"state2 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DH</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lcg = LCG()</span><br><span class="line">        self.lcg.output()</span><br><span class="line">        self.g = getRandomNBitInteger(<span class="number">128</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">256</span>)</span><br><span class="line">        self.A, self.a = self.gen_AB()</span><br><span class="line">        self.B, self.b = self.gen_AB()</span><br><span class="line">        self.key = pow(self.A, self.b, self.m)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_AB</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            x += <span class="string">'1'</span> <span class="keyword">if</span> self.lcg.next() % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> pow(self.g, int(x, <span class="number">2</span>), self.m), int(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DH = DH()</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">print(<span class="string">"g = &#123;&#125;\nA = &#123;&#125;\nB = &#123;&#125;\nM = &#123;&#125;"</span>.format(DH.g, DH.A, DH.B, DH.m))</span><br><span class="line">print(<span class="string">"Cipher = &#123;&#125;"</span>.format(flag ^ DH.key))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">state1 = 16269</span></span><br><span class="line"><span class="string">state2 = 4249</span></span><br><span class="line"><span class="string">g = 183096451267674849541594370111199688704</span></span><br><span class="line"><span class="string">A = 102248652770540219619953045171664636108622486775480799200725530949685509093530</span></span><br><span class="line"><span class="string">B = 74913924633988481450801262607456437193056607965094613549273335198280176291445</span></span><br><span class="line"><span class="string">M = 102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line"><span class="string">Cipher = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>LCG+Diffie Hellman Exchange Key</strong></p><p>The seed is too small ,as a result, we use brute-force attack to get the seed and recover the key. When we XOR the cipher with the key, the plain is figured out.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">3844066521</span></span><br><span class="line">        self.b = <span class="number">3316005024</span></span><br><span class="line">        self.m = <span class="number">2249804527</span></span><br><span class="line">        self.seed = <span class="number">714405490</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.seed = (self.a*self.seed+self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;"</span>.format(self.a, self.b, self.m))</span><br><span class="line">        print(<span class="string">"state1 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line">        print(<span class="string">"state2 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DH</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lcg = LCG()</span><br><span class="line">        self.lcg.output()</span><br><span class="line">        self.g = <span class="number">183096451267674849541594370111199688704</span></span><br><span class="line">        self.m = <span class="number">102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line">        self.A, self.a = self.gen_AB()  <span class="comment"># a private key</span></span><br><span class="line">        self.B, self.b = self.gen_AB()  <span class="comment"># b private key</span></span><br><span class="line">        self.key = pow(self.A, self.b, self.m)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_AB</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            x += <span class="string">'1'</span> <span class="keyword">if</span> self.lcg.next() % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> pow(self.g, int(x, <span class="number">2</span>), self.m), int(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def next(x):</span></span><br><span class="line"><span class="string">    return (x * a + b) % m</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def brute_force():</span></span><br><span class="line"><span class="string">    for i in range(1&lt;&lt;32):</span></span><br><span class="line"><span class="string">        if i % 10000000 == 0:</span></span><br><span class="line"><span class="string">            print("count:", i)</span></span><br><span class="line"><span class="string">        res = next(i)</span></span><br><span class="line"><span class="string">        if (res &gt;&gt; 16) == 16269 and (next(res) &gt;&gt; 16) == 4249:</span></span><br><span class="line"><span class="string">            print(i)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DH = DH()</span><br><span class="line">cipher = <span class="number">13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line">print(<span class="string">"g = &#123;&#125;\nA = &#123;&#125;\nB = &#123;&#125;\nM = &#123;&#125;"</span>.format(DH.g, DH.A, DH.B, DH.m))</span><br><span class="line">print(<span class="string">"flag = &#123;&#125;"</span>.format(cipher ^ DH.key))</span><br><span class="line"><span class="comment"># flag = 13040004482819966666226297285938773653367957972934959074317939536564198335643452104954492541</span></span><br><span class="line"><span class="comment"># flag&#123;4dfe14e0c6c21ffcf5a3b4f0ed1911f6&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">state1 = 16269</span></span><br><span class="line"><span class="string">state2 = 4249</span></span><br><span class="line"><span class="string">g = 183096451267674849541594370111199688704</span></span><br><span class="line"><span class="string">A = 102248652770540219619953045171664636108622486775480799200725530949685509093530</span></span><br><span class="line"><span class="string">B = 74913924633988481450801262607456437193056607965094613549273335198280176291445</span></span><br><span class="line"><span class="string">M = 102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line"><span class="string">Cipher = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="knapsacksolved"><a class="markdownIt-Anchor" href="#knapsacksolved"></a> Knapsack(Solved)</h2><p><strong><a href="http://quiz.py" target="_blank" rel="noopener">quiz.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genKey</span><span class="params">(length)</span>:</span></span><br><span class="line">    A, B = getPrime(<span class="number">64</span>), getPrime(<span class="number">1025</span>)</span><br><span class="line"></span><br><span class="line">    Rn = getPrime(<span class="number">1024</span>)</span><br><span class="line">    key1 = [Rn//<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length+<span class="number">1</span>)]</span><br><span class="line">    key2 = [i*A % B <span class="keyword">for</span> i <span class="keyword">in</span> key1]</span><br><span class="line">    <span class="keyword">return</span> key1,key2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text,key)</span>:</span></span><br><span class="line">    Sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):</span><br><span class="line">        Sum+=int(text[i])*key[i]</span><br><span class="line">    <span class="keyword">return</span> Sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(Ciper,Key)</span>:</span></span><br><span class="line">    f1=open(<span class="string">"pub.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(Key)):</span><br><span class="line">        f1.write(str(Key[i])+<span class="string">'\n'</span>)</span><br><span class="line">    f2=open(<span class="string">"cip.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    f2.write(hex(Ciper))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAG = bin(bytes_to_long(flag.encode()))[<span class="number">2</span>:]</span><br><span class="line">Key1,Key2 = genKey(len(FLAG))</span><br><span class="line">Ciper = encrypt(FLAG,Key1)</span><br><span class="line">save(Ciper,Key2)</span><br></pre></td></tr></table></figure><p><strong>cip.txt</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> <span class="keyword">long</span> hex <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p><strong>pub.txt</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1015 </span>public keys</span><br></pre></td></tr></table></figure><p>The last few key in pub.txt is too small, which actually is the original private key. We can use them to recover the original private key.</p><h2 id="backpackerunsolved"><a class="markdownIt-Anchor" href="#backpackerunsolved"></a> backpacker(Unsolved)</h2><p>Remain confused</p><h1 id="what-i-have-done"><a class="markdownIt-Anchor" href="#what-i-have-done"></a> <strong>What I have done</strong></h1><p>Finish learning symmetric cipher and the first chapter of Network Introduction.</p><h1 id="things-to-improve"><a class="markdownIt-Anchor" href="#things-to-improve"></a> Things to Improve</h1><ul><li>Don’t be panic when encountering a challenge that is never met</li><li>Be more concentrated on study</li><li>LLL algorithm</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only writeup in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;gkctf&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gkctf&quot;&gt;&lt;/a&gt; GKCTF&lt;/h1&gt;
&lt;h2 id=&quot;小学生的密码学solved&quot;&gt;&lt;a class=&quot;ma
      
    
    </summary>
    
    
    
      <category term="Writeup" scheme="https://buki-freak.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Npu-CTF-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/05/12/Npu-CTF-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/05/12/Npu-CTF-2020-Review/</id>
    <published>2020-05-12T13:20:15.000Z</published>
    <updated>2020-08-03T03:26:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>Only review in Crypto.</p><h1 id="what-does-the-tag-mean"><a class="markdownIt-Anchor" href="#what-does-the-tag-mean"></a> What does the tag mean</h1><table><thead><tr><th>Status</th><th>Description</th></tr></thead><tbody><tr><td>Solved</td><td>Solved in the competition</td></tr><tr><td>Unlved</td><td>Unsolved in the competition</td></tr></tbody></table><h1 id="mersenne-twisterunsolved"><a class="markdownIt-Anchor" href="#mersenne-twisterunsolved"></a> Mersenne Twister(unsolved)</h1><p>This challenge is related to Mersenne Twister Encryption. However, there are differences between them exactly. Here is the file:</p><p><strong>Mersenne <a href="http://Twiser.py" target="_blank" rel="noopener">Twiser.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify , unhexlify</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag ,seed</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(flag) == <span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">7</span>] == <span class="string">'npuctf&#123;'</span></span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">-1</span>] == <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line">XOR = <span class="keyword">lambda</span> s1 ,s2 : bytes([x1 ^ x2 <span class="keyword">for</span> x1 ,x2 <span class="keyword">in</span> zip(s1 , s2)])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mt73991</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self , seed)</span>:</span></span><br><span class="line">        self.state = [seed] + [<span class="number">0</span>] * <span class="number">232</span></span><br><span class="line">        self.flag = <span class="number">0</span></span><br><span class="line">        self.srand()</span><br><span class="line">        self.generate()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">srand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">232</span>):</span><br><span class="line">            self.state[i+<span class="number">1</span>] = <span class="number">1812433253</span> * (self.state[i] ^ (self.state[i] &gt;&gt; <span class="number">27</span>)) - i</span><br><span class="line">            self.state[i+<span class="number">1</span>] &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">            y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i+<span class="number">1</span>)%<span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">            temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">            temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">            <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">                temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">            self.state[i] = temp</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getramdanbits</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="number">233</span>:</span><br><span class="line">            self.generate()</span><br><span class="line">            self.flag = <span class="number">0</span></span><br><span class="line">        bits = self.Next(self.state[self.flag]).to_bytes(<span class="number">4</span> , <span class="string">'big'</span>)</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> bits</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Next</span><span class="params">(self , tmp)</span>:</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">11</span>)</span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9ddf4680</span></span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc65400</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x34adf670</span></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key , plain)</span>:</span></span><br><span class="line">    tmp = md5(plain).digest()</span><br><span class="line">    <span class="keyword">return</span> hexlify(XOR(tmp , key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    flag = flag.encode()</span><br><span class="line">    random = mt73991(seed)</span><br><span class="line">    f = open(<span class="string">'./cipher.txt'</span> , <span class="string">'wb'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        key = <span class="string">b''</span>.join([random.getramdanbits() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line">        cipher = encrypt(key , chr(i).encode())</span><br><span class="line">        f.write(cipher)</span><br></pre></td></tr></table></figure><p><strong>cipher.txt</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">an</span> <span class="number">832</span> <span class="keyword">bytes</span> <span class="keyword">long</span> hex <span class="keyword">string</span></span><br></pre></td></tr></table></figure><h2 id="explanation"><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h2><p>Mersenne Twister is a kind of PRNG, whose derives from the fact that its period length is chosen to be a Mersenne Prime. This Mersenne Twister challenge has a 32-bit length.</p><h2 id="condition"><a class="markdownIt-Anchor" href="#condition"></a> Condition</h2><p>Only a few conditions are given.</p><blockquote><p>the encryption result in cipher.txt</p><p>the period length</p><p>partial flag</p><p>the length of the flag</p><p>encryption function</p></blockquote><h2 id="details"><a class="markdownIt-Anchor" href="#details"></a> Details</h2><p>Given that the first part of the flag is “npuctf{”, which is a 7 bytes long string, we can retrieve the first 28 generated states with the according cipher in cipher.txt. Since we also know the last byte of the string(&quot;}&quot;) and the length of the string, we can easily retrieve the 100th~103th generated states.</p><p>Then we look into the generate function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">        y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i + <span class="number">1</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">        temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">        temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">        <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">            temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">        self.state[i] = temp</span><br></pre></td></tr></table></figure><p>Suppose that i equals to 103, we try to write down that situation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">        y = (self.state[<span class="number">103</span>] &amp; <span class="number">0x80000000</span>) | (self.state[(<span class="number">104</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">        temp = y &gt;&gt; <span class="number">1</span>  <span class="comment"># 1</span></span><br><span class="line">        temp ^= self.state[(<span class="number">0</span>) % <span class="number">233</span>]  <span class="comment"># 2</span></span><br><span class="line">        <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">            temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">        self.state[<span class="number">103</span>] = temp  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>In this situation, it is possible for us to retrieve the104th initial state, which means that we can get the seed through inversing. There are two possibilities in this situation(state[104] is odd or even). We try to draw a table.</p><table><thead><tr><th>possibilites</th><th>hb(1)</th><th>hb(2)</th><th>hb(3)</th></tr></thead><tbody><tr><td>even</td><td>0</td><td>0</td><td>0</td></tr><tr><td>odd</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>hb in the table above means the highest bit of the value in the line #n. Based on the fact that the true hb(3) is 0, which is the highest bit of the 103th generated state, it is impossible for the 104th initial state to be odd. Therefore, we can retrieve y and the low 31 bits of the 104 initial state. Since the highest bit is unknown, we can guess it (zero or one). Therefore, there are two possible seeds, which can be judged in the end. Because the seed is retrieved, we can decrypt the cipher easily.(Something just like Symmetric Cipher)</p><p>By the way, the md5 function in encrypt function seems to be useless because it only encrypts one character, for which we can correspondingly generate an md5 dictionary of all printable characters and print the corresponding characters.</p><h2 id="realization"><a class="markdownIt-Anchor" href="#realization"></a> Realization</h2><p>Here is my realization.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">XOR = <span class="keyword">lambda</span> s1, s2: bytes([x1 ^ x2 <span class="keyword">for</span> x1, x2 <span class="keyword">in</span> zip(s1, s2)])</span><br><span class="line">initial_state = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line">initial_state2 = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line">cipher = [<span class="string">'cef4876036ee8b55aa59bca043725bf3'</span>,</span><br><span class="line">          <span class="string">'50a5e491debdef7ef7d63e9609a288ca'</span>,</span><br><span class="line">          <span class="string">'1e2c82a7fe566bd8709e73c8d495ea50'</span>,</span><br><span class="line">          <span class="string">'4a486ed11189faf8e6fb35617e47d2d1'</span>,</span><br><span class="line">          <span class="string">'ad5e4783e96afeaae9f7104ec477fb39'</span>,</span><br><span class="line">          <span class="string">'fe4ec619bf58289709e15c4449f03fc5'</span>,</span><br><span class="line">          <span class="string">'1cba918cd0ebfdc12376b41e78154064'</span>,</span><br><span class="line">          <span class="string">'82733b3b200826b6c78d86563edaea94'</span>,</span><br><span class="line">          <span class="string">'dccf459a4291517a4b8367d7b4a53aee'</span>,</span><br><span class="line">          <span class="string">'cd7e0accf661bfc726f5ba62e1c0e041'</span>,</span><br><span class="line">          <span class="string">'00108ad32e7d5711f780185cba5cf31d'</span>,</span><br><span class="line">          <span class="string">'328bee84066be4ab9582cf9d4bfe3c6f'</span>,</span><br><span class="line">          <span class="string">'96a7732e1c37d800c90fd46277147f0a'</span>,</span><br><span class="line">          <span class="string">'26c149dcd5eeb0f2df0c075627bc220b'</span>,</span><br><span class="line">          <span class="string">'e5eefdd67186056ac28c21e155a7f247'</span>,</span><br><span class="line">          <span class="string">'664aaecdb498134de274df10114d1f06'</span>,</span><br><span class="line">          <span class="string">'f84dd21820f150d69c9439d909dec0f5'</span>,</span><br><span class="line">          <span class="string">'ccfeab61b62db2ea91d31bc8163ff16c'</span>,</span><br><span class="line">          <span class="string">'7f458006bd5ac4a5f5bfae2770b23ccf'</span>,</span><br><span class="line">          <span class="string">'b7195b76aa0a9aa146831667a7b9fe08'</span>,</span><br><span class="line">          <span class="string">'c19e691afadccb3ca5169ef3fabaa3da'</span>,</span><br><span class="line">          <span class="string">'d47d536e89ed4cee6f788bc969c3ad31'</span>,</span><br><span class="line">          <span class="string">'37850ebfc46a73af2b0c036c3da4b4a1'</span>,</span><br><span class="line">          <span class="string">'6506f499445c604dd73eeb846a52f881'</span>,</span><br><span class="line">          <span class="string">'515a3ad0ab448b4f9ed3e0ab1fffac60'</span>,</span><br><span class="line">          <span class="string">'b223dde6450ba6198e90e14de107aaf2'</span>]</span><br><span class="line"></span><br><span class="line">starts = <span class="string">"npuctf&#123;"</span></span><br><span class="line">ends = <span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mt73991</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self.state = [seed] + [<span class="number">0</span>] * <span class="number">232</span></span><br><span class="line">        self.flag = <span class="number">0</span></span><br><span class="line">        self.srand()</span><br><span class="line">        self.generate()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">srand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">232</span>):</span><br><span class="line">            self.state[i + <span class="number">1</span>] = <span class="number">1812433253</span> * (self.state[i] ^ (self.state[i] &gt;&gt; <span class="number">27</span>)) - i</span><br><span class="line">            self.state[i + <span class="number">1</span>] &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">            y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i + <span class="number">1</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">            temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">            temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">            <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">                temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">            self.state[i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getramdanbits</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="number">233</span>:</span><br><span class="line">            self.generate()</span><br><span class="line">            self.flag = <span class="number">0</span></span><br><span class="line">        bits = self.Next(self.state[self.flag]).to_bytes(<span class="number">4</span>, <span class="string">'big'</span>)</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> bits</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Next</span><span class="params">(self, tmp)</span>:</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">11</span>)</span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9ddf4680</span></span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc65400</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x34adf670</span></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USMR</span><span class="params">(x, shift, mask)</span>:</span></span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &gt;&gt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USML</span><span class="params">(x, shift, mask)</span>:</span></span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_Next</span><span class="params">(x)</span>:</span></span><br><span class="line">    x = USMR(x, <span class="number">18</span>, <span class="number">0x34adf670</span>)</span><br><span class="line">    x = USML(x, <span class="number">15</span>, <span class="number">0xefc65400</span>)</span><br><span class="line">    x = USML(x, <span class="number">7</span>, <span class="number">0x9ddf4680</span>)</span><br><span class="line">    x = USR(x, <span class="number">11</span>, <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_srand</span><span class="params">(value, index)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(index<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        value += i</span><br><span class="line">        value *= inverse(<span class="number">1812433253</span>, <span class="number">0x100000000</span>)</span><br><span class="line">        value = USR(value, <span class="number">27</span>, <span class="number">0xffffffff</span>)</span><br><span class="line">        value &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USR</span><span class="params">(value, shift, mask)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i * shift &lt; <span class="number">32</span>:</span><br><span class="line">        partMask = ((<span class="number">0xffffffff</span> &lt;&lt; (<span class="number">32</span> - shift)) &amp; <span class="number">0xffffffff</span>) &gt;&gt; (shift * i)</span><br><span class="line">        part = value &amp; partMask</span><br><span class="line">        value ^= (part &gt;&gt; shift) &amp; mask</span><br><span class="line">        res |= part</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash all known characters</span></span><br><span class="line">hash_starts = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starts:</span><br><span class="line">    hash_starts.append(hashlib.md5(i.encode()).digest())</span><br><span class="line"><span class="comment"># print(hash_starts)</span></span><br><span class="line">hash_ends = hashlib.md5(ends.encode()).digest()</span><br><span class="line"></span><br><span class="line">state = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># first 7 characters</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(starts)):</span><br><span class="line">    key = XOR(hash_starts[i], binascii.unhexlify(cipher[i]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        tmp = inv_Next(bytes_to_long(key[<span class="number">4</span>*j:<span class="number">4</span>*j+<span class="number">4</span>]))</span><br><span class="line">        state[<span class="number">4</span>*i+j] = tmp</span><br><span class="line"><span class="comment"># print(state[:28])  # check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key, cipher)</span>:</span></span><br><span class="line">    cipher = binascii.unhexlify(cipher)</span><br><span class="line">    temp = XOR(key, cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> md5_dic:</span><br><span class="line">        <span class="keyword">if</span> temp == i:</span><br><span class="line">            print(string.printable[md5_dic.index(i)], end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the last character</span></span><br><span class="line">key = XOR(hash_ends, binascii.unhexlify(cipher[<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    tmp = inv_Next(bytes_to_long(key[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]))</span><br><span class="line">    state[<span class="number">100</span>+i] = tmp</span><br><span class="line"><span class="comment"># print(state[100:104]) # check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since it can be simplified, there are only two situations of old_state[104]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># old_state[104] is even</span></span><br><span class="line">y = (state[<span class="number">0</span>] ^ state[<span class="number">103</span>]) &lt;&lt; <span class="number">1</span>  <span class="comment"># recover y</span></span><br><span class="line"><span class="comment"># print(y) # check pass</span></span><br><span class="line">poss_1 = y &amp; <span class="number">0x7fffffff</span></span><br><span class="line">poss_2 = (y &amp; <span class="number">0x7fffffff</span>) | <span class="number">0x80000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(poss_1)</span></span><br><span class="line"><span class="comment"># print(poss_2)</span></span><br><span class="line"><span class="comment"># check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get the seed of each situation</span></span><br><span class="line">poss_1 = inv_srand(poss_1, <span class="number">104</span>)</span><br><span class="line">poss_2 = inv_srand(poss_2, <span class="number">104</span>)</span><br><span class="line">print(poss_1)</span><br><span class="line">print(poss_2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate md5 dictionary</span></span><br><span class="line">md5_dic = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.printable:</span><br><span class="line">    md5_dic.append(hashlib.md5(i.encode()).digest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random_1 = mt73991(poss_1)</span><br><span class="line">random_2 = mt73991(poss_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># recover the flag from random_1</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    key = <span class="string">b''</span>.join([random_1.getramdanbits() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line">    decrypt(key, cipher[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since random_1 is the correct one, random_2 can be ignored.</span></span><br></pre></td></tr></table></figure><p>这题一开始出题人搞错了。。。自闭了一下午</p><h1 id="认清形势建立信心"><a class="markdownIt-Anchor" href="#认清形势建立信心"></a> 认清形势，建立信心</h1><p>After observing the <a href="http://task.py" target="_blank" rel="noopener">task.py</a>, we can find that this is a classical discrete logarithm problem. Let’s see the file.</p><p><strong><a href="http://task.py" target="_blank" rel="noopener">task.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">25</span>)</span><br><span class="line">e = <span class="comment"># Hidden</span></span><br><span class="line">q = getPrime(<span class="number">25</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(flag.strip(<span class="string">b"npuctf&#123;"</span>).strip(<span class="string">b"&#125;"</span>))</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line">print(c)</span><br><span class="line">print(pow(<span class="number">2</span>, e, n))</span><br><span class="line">print(pow(<span class="number">4</span>, e, n))</span><br><span class="line">print(pow(<span class="number">8</span>, e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">169169912654178</span></span><br><span class="line"><span class="string">128509160179202</span></span><br><span class="line"><span class="string">518818742414340</span></span><br><span class="line"><span class="string">358553002064450</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="explanation-2"><a class="markdownIt-Anchor" href="#explanation-2"></a> Explanation</h2><p>There are many methods to solve discrete logarithm problems, BSGS(Baby Steps Giant Steps), SPH method and so on.</p><h2 id="condition-2"><a class="markdownIt-Anchor" href="#condition-2"></a> Condition</h2><p>There are four equations in <a href="http://task.py" target="_blank" rel="noopener">task.py</a> and the remains of four equations are given. The flag is in the first equations. Here is what we have known.</p><blockquote><p>The length of q and p</p><p>remains of four equations</p></blockquote><p>My idea is that n is possible to be solved and after that we can use the second equation to calculate e, using  discrete logarithm calculation methods.</p><h2 id="details-2"><a class="markdownIt-Anchor" href="#details-2"></a> Details</h2><p>We can notice that:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mtext>  </mtext><mi mathvariant="normal">∣</mi><mtext>  </mtext><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>c</mi><msup><mn>1</mn><mn>3</mn></msup><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>c</mi><mn>3</mn><mo separator="true">,</mo><mtext>  </mtext><mi>c</mi><msup><mn>1</mn><mn>2</mn></msup><mtext>  </mtext><mo>−</mo><mtext>  </mtext><mi>c</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\;|\;gcd(c1^{3}\;-\;c3,\;c1^{2}\;-\;c2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>From this character and another character that n is the product of two big prime number, we can get n.</p><p>After that, it is really convenient that we can use discrete_log() function in Sage to calculate e. Luckily, e is coprime with n, so the inverse exists. The decryption is the similar with rsa.</p><h2 id="realization-2"><a class="markdownIt-Anchor" href="#realization-2"></a> Realization</h2><p>My realization.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">ture<span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">tureture<span class="keyword">return</span> a, <span class="number">0</span></span><br><span class="line">turea, b = gcd(b, a % b)</span><br><span class="line">ture<span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line">c = <span class="number">169169912654178</span></span><br><span class="line">c_1 = <span class="number">128509160179202</span></span><br><span class="line">c_2 = <span class="number">518818742414340</span></span><br><span class="line">c_3 = <span class="number">358553002064450</span></span><br><span class="line"></span><br><span class="line">dc_1 = c_1 ** <span class="number">2</span> - c_2</span><br><span class="line">dc_2 = c_1 ** <span class="number">3</span> - c_3</span><br><span class="line">n = gcd(dc_1, dc_2)[<span class="number">0</span>] / <span class="number">2</span></span><br><span class="line"><span class="comment"># print(n) # check pass</span></span><br><span class="line"></span><br><span class="line">n.factor()</span><br><span class="line">p = <span class="number">18195301</span></span><br><span class="line">q = <span class="number">28977097</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = discrete_log(Mod(c_1, n), Mod(<span class="number">2</span>, n))</span><br><span class="line"><span class="comment"># print(e)  # check pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(gcd(e, phi)[0])  # check pass</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><p><a href="https://en.wikipedia.org/wiki/Mersenne_Twister" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Mersenne_Twister</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only review in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;what-does-the-tag-mean&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-does-the-tag-mean&quot;&gt;&lt;/a&gt; What does the
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>2020-05-03</title>
    <link href="https://buki-freak.github.io/2020/05/03/2020-05-03/"/>
    <id>https://buki-freak.github.io/2020/05/03/2020-05-03/</id>
    <published>2020-05-03T14:44:24.000Z</published>
    <updated>2020-05-03T14:50:02.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-i-have-done"><a class="markdownIt-Anchor" href="#what-i-have-done"></a> What I Have Done</h1><p>Sadly, the quiz yesterday is still unsolved. It seems that z3-solver doesn’t work. As a result, I study <em><strong>Correlation Attack</strong></em>  which is a kind of brute-force attack method. The method seems to work now and I am trying to understanding the codes written by others. Daily IELTS exercises have been done. What a day!</p><h1 id="things-to-learn-and-improve"><a class="markdownIt-Anchor" href="#things-to-learn-and-improve"></a> Things to Learn and Improve</h1><ul><li>Stream Cipher - Correlation Attack Method</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what-i-have-done&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-i-have-done&quot;&gt;&lt;/a&gt; What I Have Done&lt;/h1&gt;
&lt;p&gt;Sadly, the quiz yesterday is s
      
    
    </summary>
    
    
    
      <category term="Daily Post" scheme="https://buki-freak.github.io/tags/Daily-Post/"/>
    
  </entry>
  
  <entry>
    <title>2020-05-02</title>
    <link href="https://buki-freak.github.io/2020/05/02/2020-05-02/"/>
    <id>https://buki-freak.github.io/2020/05/02/2020-05-02/</id>
    <published>2020-05-02T13:12:07.000Z</published>
    <updated>2020-05-02T13:22:44.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-i-have-done"><a class="markdownIt-Anchor" href="#what-i-have-done"></a> What I Have Done</h1><p>A competition is held in these days, exciting and also exhausting! I am confident on a quiz about LFSR, which I have lately learned. However, things always does go in the right way, isn’t it? After being trapped for over five hours, I went to sleep… While I did several IELTS reading exercises, oh of course, I have finished <em>The End of the fxxking world Season One</em> just for fun ha ha ha!</p><h1 id="things-to-learn-and-improve"><a class="markdownIt-Anchor" href="#things-to-learn-and-improve"></a> Things to Learn and Improve</h1><ul><li>z3-solver</li><li>English reading speed</li><li>Be easygoing</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what-i-have-done&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-i-have-done&quot;&gt;&lt;/a&gt; What I Have Done&lt;/h1&gt;
&lt;p&gt;A competition is held in these
      
    
    </summary>
    
    
    
      <category term="Daily Post" scheme="https://buki-freak.github.io/tags/Daily-Post/"/>
    
  </entry>
  
  <entry>
    <title>Greeting</title>
    <link href="https://buki-freak.github.io/2020/05/01/Greeting/"/>
    <id>https://buki-freak.github.io/2020/05/01/Greeting/</id>
    <published>2020-05-01T12:33:15.000Z</published>
    <updated>2020-05-01T12:57:56.341Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I have deleted all blogs deployed before. My greeting is below.</p><h1 id="the-past"><a class="markdownIt-Anchor" href="#the-past"></a> The Past</h1><p>​For a so-called loser, it is always mournful to talk about his or her past. Actually, I am one of them, after failing the college entrance examination. What’s more, things go wrong in these university days. It seems that I have have been trapped for such a long time, or have had a nightmare. Families, friends, mates, the environment, …, everything goes in a wrong way. However, Mama usually tells  me to be positive, which merely works at some time I think. Well, as is told, if you don’t like this world, you can just try to leave it and choose your life. It will be alright, since seldom people can live for 100 years. I mean I should do what I really want to do in limited time. Therefore, stop to complain about the past, leave that fxxking world and alter a world that you want.</p><h1 id="present-days"><a class="markdownIt-Anchor" href="#present-days"></a> Present Days</h1><p>​Well, all roads lead to Rome. There are many ways to achieve your ambition and I choose that one that I have lately planned. Once the goal is settled, you only need to:</p><ul><li>Focus</li><li>Focus</li><li>Focus</li></ul><h1 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h1><p>Future is unpredictable, but we should be hopeful. Look at the sky, and you will find how lovely it is to see the past of others. They are shining for you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today, I have deleted all blogs deployed before. My greeting is below.&lt;/p&gt;
&lt;h1 id=&quot;the-past&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#the-past
      
    
    </summary>
    
    
    
      <category term="Personal Development" scheme="https://buki-freak.github.io/tags/Personal-Development/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://buki-freak.github.io/2020/05/01/hello-world/"/>
    <id>https://buki-freak.github.io/2020/05/01/hello-world/</id>
    <published>2020-05-01T12:30:10.251Z</published>
    <updated>2019-08-27T01:03:22.557Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
