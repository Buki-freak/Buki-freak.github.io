<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>buk1</title>
  
  <subtitle>Every day is my last day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://buki-freak.github.io/"/>
  <updated>2020-10-11T07:07:51.639Z</updated>
  <id>https://buki-freak.github.io/</id>
  
  <author>
    <name>buki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SageMath-Learning-I</title>
    <link href="https://buki-freak.github.io/2020/09/25/SageMath-Learning-I/"/>
    <id>https://buki-freak.github.io/2020/09/25/SageMath-Learning-I/</id>
    <published>2020-09-25T01:16:54.000Z</published>
    <updated>2020-10-11T07:07:51.639Z</updated>
    
    <content type="html"><![CDATA[<p>​                 </p><p>学习完抽象代数部分，感觉不光要搞懂理论，还得搞好实践和运用，所以学习一下 <strong>Sage</strong> 的抽象代数部分。</p><p>​                </p><p>​                   </p><h1 id="Group-Theory-and-Sage"><a href="#Group-Theory-and-Sage" class="headerlink" title="Group Theory and Sage"></a>Group Theory and Sage</h1><p>​                       </p><h2 id="Basic-properties-of-the-integers"><a href="#Basic-properties-of-the-integers" class="headerlink" title="Basic properties of the integers"></a>Basic properties of the integers</h2><p>​                      </p><p>扩展欧几里得函数 <strong>xgcd</strong> ：</p><p>​                </p><p><img src="https://i.loli.net/2020/09/25/dtzXZ4Uk5FP8Mnv.png" alt="image-20200925093644636"></p><p>​                    </p><p>返回是一个三元组，第一个元素为 $a$ 和 $b$ 的 gcd ，第二个和第三个元素是 $r$ 和 $s$ 满足 $ra\;+\;sb\;=\;gcd(a,\;b)$ 。</p><p>​                  </p><p>分解（decomposition）函数 <strong>factor</strong> ：</p><p>​                  </p><p><img src="https://i.loli.net/2020/09/25/psveLSFqImNVEBu.png" alt="image-20200925094526138"></p><p>​                 </p><p>factor 函数返回的是一个二元组的数组，但显示的时候会自动转换为数学公式形式。</p><p>​                  </p><p><img src="https://i.loli.net/2020/09/25/mwacsq1B9ZzPvDK.png" alt="image-20200925094934557"></p><p>​                    </p><p><strong>factor 函数还可以用于分解多项式。</strong></p><p>​                 </p><p>如果只想要提取某个数的因子，可以用 <strong>prime_divisors</strong> 函数。</p><p>​                </p><p><img src="https://i.loli.net/2020/09/25/cbRHuv6grqSEzZt.png" alt="image-20200925095153716"></p><p>​                     </p><p>求逆元用 <strong>inverse_mod</strong> 函数，模幂运算用 <strong>power_mod</strong> 函数，</p><p>欧拉函数（Euler $\phi$ function）用 <strong>euler_phi</strong> 函数。</p><p>​                       </p><p>​                    </p><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>​                      </p><p>好像没啥可看的，先留个坑。</p><p>​                    </p><p>​                         </p><h1 id="Basic-Rings"><a href="#Basic-Rings" class="headerlink" title="Basic Rings"></a>Basic Rings</h1><p>​                   </p><p>再来学习一下环。先搞清楚四种类型环的表示，偷个图：</p><p>​                   </p><p><img src="https://i.loli.net/2020/09/25/McT18YnqtmeyDdp.png" alt="image-20200925112218207"></p><p>​              </p><p>整数环为 $ZZ$ ，有理数环为 $QQ$ ，实数环为 $RR$ ，复数环为 $CC$ 。</p><p>​                </p><h2 id="Rings-of-integers-module-n"><a href="#Rings-of-integers-module-n" class="headerlink" title="Rings of integers module n"></a>Rings of integers module n</h2><p>​             </p><p>同余类，又称 ring of integers of modulo n ，记作 $\Z/n\Z$ 。</p><p>​           </p><p>定义同余类的方法，有三种：</p><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: Zmod(<span class="number">4</span>) == Integers(<span class="number">4</span>)</span><br><span class="line">sage: Zmod(<span class="number">4</span>) == IntegerModRing(<span class="number">4</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>​               </p><p>​                 </p><h2 id="Polynomial-Rings"><a href="#Polynomial-Rings" class="headerlink" title="Polynomial Rings"></a>Polynomial Rings</h2><p>​                 </p><p>Reference 里面大部分是多项式环的定义，并且分两种：<strong>单变量</strong> 和 <strong>多变量</strong> 。</p><p>​                  </p><p>​                    </p><p>定义整数上的多项式环：</p><p>​                </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sage: retpoly.&lt;z&gt; = PolynomialRing(RR)</span><br></pre></td></tr></table></figure><p>​                 </p><p>一般情况下的定义：</p><p>​              </p><p><img src="https://i.loli.net/2020/09/25/VwYLZ8AUciREk4J.png" alt="image-20200925151944191"></p><p>​                  </p><p>再举几个例子：</p><p>​                 </p><p>有理数上的多项式环：</p><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R.&lt;x&gt; = PolynomialRing(QQ)</span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> x over Rational Field</span><br></pre></td></tr></table></figure><p>​                  </p><p>欧几里得环：</p><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R.&lt;x&gt; = PolynomialRing(GF(<span class="number">3</span>))</span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> x over Finite Field of size <span class="number">3</span></span><br></pre></td></tr></table></figure><p>​               </p><p>在剩余类中的多项式：</p><p>​              </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R = Zmod(<span class="number">123</span>)[<span class="string">'x'</span>]</span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> x over Ring of integers modulo <span class="number">123</span></span><br></pre></td></tr></table></figure><p>​             </p><p>Sage 中还有多项式其他的书写定义方式：</p><p>​              </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sage: R.&lt;z&gt; = QQ[] <span class="comment"># 方括号书写 1</span></span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> z over Rational Field</span><br><span class="line">sage: R = QQ[<span class="string">'z'</span>]  <span class="comment"># 方括号书写 2</span></span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> z over Rational Field</span><br></pre></td></tr></table></figure><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R = PolynomialRing(QQ,<span class="string">'z,y,c'</span>) <span class="comment"># 常规书写方式</span></span><br><span class="line">sage: R</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> z, y, c over Rational Field</span><br></pre></td></tr></table></figure><p>​             </p><p>带上第三个参数。</p><p>​                 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R = PolynomialRing(QQ,<span class="string">'z'</span>,<span class="number">10</span>)</span><br><span class="line">sage: R</span><br><span class="line">Multivariate Polynomial Ring <span class="keyword">in</span> z0, z1, z2, z3, z4, z5, z6, z7, z8, z9 over Rational Field</span><br></pre></td></tr></table></figure><p>​              </p><p>更骚一点。</p><p>​           </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sage: R = PolynomialRing(ZZ,[<span class="string">'x%s'</span>%p <span class="keyword">for</span> p <span class="keyword">in</span> primes(<span class="number">10</span>)])</span><br><span class="line">sage: R</span><br><span class="line">Multivariate Polynomial Ring <span class="keyword">in</span> x2, x3, x5, x7 over Integer Ring</span><br></pre></td></tr></table></figure><p>​                   </p><p>PolynomialRing.inject_variables() 方法可以查看当前已经定义的变量。</p><p>​              </p><p>​                 </p><p>在不同数集的环，相同的计算会产生不同的结果。如：</p><p>​             </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sage: ratpoly.&lt;t&gt; = PolynomialRing(QQ)</span><br><span class="line">sage: factor(t^<span class="number">2</span> - <span class="number">2</span>)</span><br><span class="line">t^<span class="number">2</span> - <span class="number">2</span></span><br><span class="line">sage: retpoly.&lt;z&gt; = PolynomialRing(RR)</span><br><span class="line">sage: factor(z^<span class="number">2</span> - <span class="number">2</span>)</span><br><span class="line">(z - <span class="number">1.41421356237310</span>) * (z + <span class="number">1.41421356237310</span>)</span><br></pre></td></tr></table></figure><p>​                 </p><p>上面提到过 <strong>factor</strong> 可以分解多项式，上面的例子是一个很好的运用。</p><p>​               </p><p>发现 Sage 中有一个查找变量类型的方法，<strong>parent</strong> 函数：</p><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sage: ratplot.&lt;t&gt; = PolynomialRing(CC)</span><br><span class="line">sage: t</span><br><span class="line">t</span><br><span class="line">sage: </span><br><span class="line">sage: parent(t)</span><br><span class="line">Univariate Polynomial Ring <span class="keyword">in</span> t over Complex Field <span class="keyword">with</span> <span class="number">53</span> bits of precision</span><br></pre></td></tr></table></figure><p>​                </p><p>求欧几里得环中的首一不可约多项式，使用 irreducible_element 函数，</p><p>第一个参数指定 degree 。</p><p>​               </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sage: R = GF(<span class="number">47</span>)[<span class="string">'x'</span>]</span><br><span class="line">sage: R.irreducible_element(<span class="number">1</span>)</span><br><span class="line">x + <span class="number">46</span></span><br><span class="line">sage: R.irreducible_element(<span class="number">2</span>)</span><br><span class="line">x^<span class="number">2</span> + <span class="number">45</span>*x + <span class="number">5</span></span><br><span class="line">sage: R.irreducible_element(<span class="number">4</span>)</span><br><span class="line">x^<span class="number">4</span> + <span class="number">8</span>*x^<span class="number">2</span> + <span class="number">40</span>*x + <span class="number">5</span></span><br></pre></td></tr></table></figure><p>​                                 </p><p>​                              </p><h1 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h1><p>​                  </p><p>定义有理域：</p><p>​                   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sage: RationalField()</span><br><span class="line">Rational Field</span><br></pre></td></tr></table></figure><p>​                  </p><p>定义整数有限域 $GF(p),\;where\;p\;is\;a\;prime$ :</p><p>​                </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sage: R = GF(<span class="number">149</span>);R</span><br><span class="line">Finite Field of size <span class="number">149</span></span><br></pre></td></tr></table></figure><p>​               </p><p>定义有限域 $GF(p^e),\;where\;p\;is\;a\;prime$ ，也就是欧几里得环下商环产生的域：</p><p>​             </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sage: R = GF(<span class="number">2</span>^<span class="number">10</span>,name=<span class="string">'x'</span>,modulus=x^<span class="number">10</span> + x^<span class="number">6</span> + x^<span class="number">5</span> + x^<span class="number">3</span> + x^<span class="number">2</span> + x + <span class="number">1</span>);R</span><br><span class="line">Finite Field <span class="keyword">in</span> x of size <span class="number">2</span>^<span class="number">10</span></span><br></pre></td></tr></table></figure><p>​              </p><p>由于是多项式，所以需要给出变量名，这里是 $x$ ，并且给出产生商环的</p><p>不可约多项式 $m$ ，这里是 $x^{10}\;+\;x^6\;+\;x^5\;+\;x^3\;+\;x^2\;+\;x +\;1$ 。</p><p>​                 </p><p>SageMath 会检测传入的 irreducible polynomial 是否为不可约。如果没有</p><p>指定不可约多项式和变量名，那么 Sage 会自动产生一个变量名和一个不可</p><p>约多项式。</p><p>​               </p><p>​                 </p><p>​                     </p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>​                       </p><p><a href="https://doc.sagemath.org/html/en/thematic_tutorials/group_theory.html" target="_blank" rel="noopener">https://doc.sagemath.org/html/en/thematic_tutorials/group_theory.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​                 &lt;/p&gt;
&lt;p&gt;学习完抽象代数部分，感觉不光要搞懂理论，还得搞好实践和运用，所以学习一下 &lt;strong&gt;Sage&lt;/strong&gt; 的抽象代数部分。&lt;/p&gt;
&lt;p&gt;​                &lt;/p&gt;
&lt;p&gt;​          
      
    
    </summary>
    
    
    
      <category term="Sage" scheme="https://buki-freak.github.io/tags/Sage/"/>
    
  </entry>
  
  <entry>
    <title>An-Introduction-to-Mathematical-Cryptography-I</title>
    <link href="https://buki-freak.github.io/2020/09/14/An-Introduction-to-Mathematical-Cryptography-I/"/>
    <id>https://buki-freak.github.io/2020/09/14/An-Introduction-to-Mathematical-Cryptography-I/</id>
    <published>2020-09-14T08:19:33.000Z</published>
    <updated>2020-09-22T13:05:28.634Z</updated>
    
    <content type="html"><![CDATA[<p>​                        </p><p><em>An Introduction to Mathematical Cryptography</em> 读书笔记。由于之前看过 <em>Introduction to Cryptography</em>，</p><p>所以打算选择性阅读（陌生以及忘却的知识。</p><p>​       </p><p>​       </p><h1 id="Chapter-Two"><a href="#Chapter-Two" class="headerlink" title="Chapter Two"></a>Chapter Two</h1><h2 id="An-overview-of-the-theory-of-groups"><a href="#An-overview-of-the-theory-of-groups" class="headerlink" title="An overview of the theory of groups"></a>An overview of the theory of groups</h2><p>先学习交换群（commutative group），或者叫阿贝尔群（abelian group）。</p><p>​      </p><p>交换群的属性，以乘法（multiplication）群 $F^{*}_{p}$ 为例：</p><p>​       </p><p><img src="https://i.loli.net/2020/09/14/bOzVLqoiX4hdEk5.png" alt="image-20200914165331191"></p><p>​            </p><p>满足四个条件：</p><ul><li>存在一个单位元 1</li><li>对于 group 内每一个元素，存在一个唯一的逆元<strong>（群内每一个元素都与 $p$ 互质）</strong></li><li>结合律</li><li>交换律</li></ul><p>​       </p><p>如果是加法（addition）群 $F_p$，则有以下性质：</p><p>​        </p><p><img src="https://i.loli.net/2020/09/14/9ZUvGs6i5Jj2oqy.png" alt="image-20200914165736217"></p><p>​                    </p><p>也满足四个条件：</p><ul><li>存在一个单位元 0</li><li>对于 group 内每一个元素，存在一个唯一的逆元</li><li>结合律</li><li>交换律</li></ul><p>​      </p><p>​       </p><p>上面两个属于特殊的群，不失一般性，给出一般群的定义：</p><p>​      </p><p><img src="https://i.loli.net/2020/09/14/tjdRAo7fZSheJDu.png" alt="image-20200914185654189"></p><p>​          </p><p>​          </p><p>同时满足四个条件：</p><ul><li>对于 group 内每一个元素，存在一个单位元 $e$ 满足 $e\;*\;a\;=\;a$ 。</li><li>对于 group 内每一个元素，对应存在一个<strong>唯一</strong>的逆元 $a^{-1}$ 满足 $a\;*\;a^{-1}\;=\;1$ 。</li><li>结合律，即 $for\;all\;a,b,c\;\in\;G,\;satisfying\;a·(b·c)\;=\;(a·b)·c$ 。</li><li>交换律，即 $for\;all\;a,b\;\in\;G,\;satisfying\;a·b\;=\;b·a$</li></ul><p>​       </p><p><strong>若交换群 $G$ 的元素数量有限，则这个群又称为有限群（finite group）, 群内的元素数量记作 $|G|$或 $#G$ </strong>。</p><p>​        </p><p>再记两个特殊的交换群，存个图：</p><p>​      </p><p><img src="https://i.loli.net/2020/09/14/kG6eAYKod4vHp59.png" alt="image-20200914193313769"></p><p>​       </p><p>(b) 中 $Z/NZ$ ，group 中元素个数为 $N$，所以同时也是有限群，举例： $G\;=\;\{-3,-2,-1,0,1,2,3\}$ 。</p><p>(c) 中 $Z$，group 中元素个数无限（所有整数）。</p><p>​       </p><p>元素的 order ：</p><p>​        </p><p><img src="https://i.loli.net/2020/09/14/72bjZO6GEi9AgCy.png" alt="image-20200914195039496"></p><p>​       </p><p>​       </p><p>对于元素的 order 有 Lagrange’s Theorem： </p><p>​       </p><p><img src="https://i.loli.net/2020/09/14/pzuvyT1FGQNLtdf.png" alt="image-20200914200231059"></p><p>​        </p><p>​         </p><h2 id="Solving-congruence-with-composite-moduli"><a href="#Solving-congruence-with-composite-moduli" class="headerlink" title="Solving congruence with composite moduli"></a>Solving congruence with composite moduli</h2><p>计算 $F_p^{*}$ 下的二次根：</p><p>​       </p><p><img src="https://i.loli.net/2020/09/14/vwoG1t8lz3QBnPH.png" alt="image-20200914201510060"></p><p>​             </p><p>​       </p><p>如果模数 $p$ 为合数，则先分解 $p$ ，然后分别化简不同因子下的同余方程，然后使用<strong>中国剩余定理</strong>计算不同因子</p><p>下的同余方程组。</p><p>​        </p><p>​        </p><h2 id="The-Pohlig-Hellman-Algorithm"><a href="#The-Pohlig-Hellman-Algorithm" class="headerlink" title="The Pohlig-Hellman Algorithm"></a>The Pohlig-Hellman Algorithm</h2><p>​           </p><p>Pohlig-Hellman 解决 DLP 的方法使用了中国剩余定理。对于 $F_{p}^{*}$ 下的 DLP 问题，通过分解 $p\;-\;1$ 来解</p><p>决，所以其算法复杂度是由分解难度决定的。</p><p>​      </p><p><img src="https://i.loli.net/2020/09/14/9vHBOQ8aV3Ndsqm.png" alt="image-20200914203750508"></p><p>​        </p><p>对于 $|G|\;=\;N\;=\;q_1^{e_1}·q_2^{e_2}···q_t^{e_t}$ ，Pohlig-Hellman 方法的计算时间复杂度为：</p><p>​         </p><p><img src="https://i.loli.net/2020/09/14/LcZgB83aXzjTw67.png" alt="image-20200914215003414"></p><p>​            </p><p>对于所有 $q_i$ 都特别小的情况，计算时间会明显缩短。</p><p>​         </p><p>在相同情况下，对比下两种算法的时间复杂度：</p><p>​      </p><p><img src="https://i.loli.net/2020/09/16/q1lUIuyNbvzn6Ro.png" alt="image-20200916091733008"></p><p>​          </p><p>​          </p><p>再贴一下 <strong>Shank’s Babystep-Giantstep Algorithm</strong> 的，</p><p>​         </p><p><img src="https://i.loli.net/2020/09/16/rHMYyxhZ1lavBij.png" alt="image-20200916091955371"></p><p>​          </p><p>对于同一 $order\;q^{e},\;e\;\geq\;1$ ，PH 的时间复杂度大约为： $O(e\sqrt{q}）$ ，而 BSGS 的时间复杂度大约为： $O(\sqrt{q^{e}})$，</p><p>当 $e\;\geq\;2$ 的时候，PH 的计算时间要小得多。</p><p>​         </p><p>证明过程大概就是计算的过程，下面进行详细学习：</p><p>​                 </p><p>对于单个素数或者其幂的情况：</p><p>​          </p><script type="math/tex; mode=display">g^{x}\;=\;h,\;where\;the\;order\;of\;g\;is\;q^{e}\;with\;e\;\geq\;1</script><p>​      </p><p>先将 $x$ ，写成 $x\;=\;x_{0}\;+\;x_{1}q\;+\;x_2q^{2}\;+\;···\;+x_{e-1}q^{e-1}\;\;with\;0\;\leq\;x_i\;&lt;\;q$ ，</p><p>然后计算 $x_0,\;x_1,\;x_2,\;….\;x_{e-1}$ 的确切值。这里需要用到 $g’\;=\;g^{q^{e-1}}$ 的 order 为 $q$ 的性质，直接截个图：</p><p>​       </p><p><img src="https://i.loli.net/2020/09/16/Pz9QTAqu3dVmvi1.png" alt="image-20200916211818646"></p><p>​        </p><p>​         </p><p>由于 $0\;\leq\;x_0\;&lt;\;q$ ，所以这里就转换为另一个 order 为 $q$ 的 DLP 问题。认真的读还是会发现，</p><p>这里还是需要使用 BSGS 算法，所以时间复杂度为： $O(\sqrt{q})$ 。再利用相似的方法计算 $x_1$ ：</p><p>​        </p><p><img src="https://i.loli.net/2020/09/16/OwsVHNRKxaYmIAX.png" alt="image-20200916213141154"></p><p>​         </p><p>同样地，得到：</p><p>​        </p><script type="math/tex; mode=display">(g^{q^{e-1}})^{x_1}\;=\;(h\;·\;g^{-x_0})^{q^{e-2}}</script><p>​      </p><p>由于 $x_0$ 已知，这里又转化为另一个 DLP 问题，使用 BSGS 算法可以计算出 $x_1$ ，时间复杂度为 $O(\sqrt{q})$ 。</p><p>​       </p><p>从上面两条式子我们找出一般性：</p><p>​      </p><script type="math/tex; mode=display">(g^{q^{e-1}})^{x_i}\;=\;(h\;·\;g^{-x_0-x_1-···-x_{i-1}q^{i-1}})^{q^{e-i-1}}\;\;in\;\;G.</script><p>​       </p><p>由于每一个解 $x_i$ 的时间复杂度为 $O(\sqrt{q})$ ，所以计算 $x$ 的总时间复杂度为：$O(eS_q)\;=\;O(e\sqrt{q})$ 。</p><p>​       </p><p>证明完成。剩下的就是将计算结果交给中国剩余定理，其时间复杂度为： $O(log_{2}N)$ ，其中 $N$ 为$|G|$ 。</p><p>​      </p><p>计算步骤：</p><p>​         <img src="https://i.loli.net/2020/09/14/OKSWIci287PYLjs.png" alt="image-20200914215224859"></p><p>​        </p><p>注意这里的 $N$ 为 $|G|$ 。计算 $g_i\;=\;g^{N/q_{i}^{e_i}}$ 是为了得到 $g_i\;with\;order\;q_i^{e_i}$ 。           </p><p>​         </p><p>再贴一次 PH 算法的时间复杂度：</p><p>​      </p><p><img src="https://i.loli.net/2020/09/14/LcZgB83aXzjTw67.png" alt="image-20200914215003414"></p><p>​                                   </p><p>​                          </p><p>顺便提一下， sageMath 中的 discrete_log 函数使用的就是 Pohlig-Hellman Algorithm </p><p>和 Baby Step Giant Step Algorithm 的结合。</p><p>​            </p><p><img src="https://i.loli.net/2020/09/21/FlyxSpYb8EnOWQ3.png" alt="image-20200921190217192"></p><p>​          </p><p>​                             </p><h2 id="Rings-quotient-rings-polynomial-rings-and-finite-fields"><a href="#Rings-quotient-rings-polynomial-rings-and-finite-fields" class="headerlink" title="Rings, quotient rings, polynomial rings, and finite fields"></a>Rings, quotient rings, polynomial rings, and finite fields</h2><p>​         </p><h3 id="Rings"><a href="#Rings" class="headerlink" title="Rings"></a>Rings</h3><p>​              </p><p>对总结一下这一章的知识和之后密码体系的关联：</p><p>​         </p><div class="table-container"><table><thead><tr><th>Cryptosystem</th><th>Knowledge</th></tr></thead><tbody><tr><td>Elliptic Curve Cryptography</td><td>Finite Fields</td></tr><tr><td>Lattice-based NTRU Cryptosystem</td><td>Quetients of polynomial rings</td></tr></tbody></table></div><p>​       </p><p>​            </p><p>普通的环（Ring）：</p><p>​                           </p><p><img src="https://i.loli.net/2020/09/22/xVsmKYhz39N5MSD.png" alt="image-20200917143450066"></p><p>​                              </p><p>同时满足下面条件：</p><p>​              </p><p>对于 “+” operation：</p><p>​              </p><ul><li>存在一个单位元，对于所有元素，满足 $0\;+\;a\;=\;a\;+\;0\;=\;a$ 。</li><li>对于所有元素 $a$，存在对应的逆元 $b$ ，满足 $a\;+\;b\;=\;b\;+\;a\;=\;0$ 。</li><li>对于所有元素，满足结合律。</li><li>对于所有元素，满足交换律。</li></ul><p>​            </p><p>Ring 上的元素加上 “+” operation 可以看成是一个交换群。</p><p>​           </p><p>对于 “*” operation，这里由于显示问题，我将其写成 “·”：</p><p>​             </p><ul><li>存在一个单位元，对于所有元素满足 $1\;·\;a\;=\;a\;·\;1\;=\;a$ 。</li><li>对于所有元素，满足结合律。</li><li>对于所有元素，满足交换律。</li></ul><p>​             </p><p>RIng 上的元素加上 “*” operation 可以看成是一个幺半群。</p><p>​              </p><p>对于两个 operation：</p><p>​           </p><p>满足分配律， $a\;·\;(b\;+\;c)\;=\;a\;·\;b\;+\;a\;·\;c$ 。</p><p>​             </p><p>上面这个环实际上属于交换环，但是由于我们经常会碰到这个类型的环，所以我们简称之为环。</p><p>​            </p><p>下面记一个环的例子：</p><p>​                    </p><p><img src="https://i.loli.net/2020/09/21/SVQ7ZwBpDnK1jmU.png" alt="image-20200921185329993"></p><p>​                 </p><p>​                     </p><p>如果对环再加上要求，可能就是域了，看看 field 和 ring 之间的关系：</p><p>​              </p><p><img src="https://i.loli.net/2020/09/21/EMcOhLNpiuRJzdQ.png" alt="image-20200921170104147"></p><p>​                  </p><p>仔细一下其实也就多了一个乘法的逆元。</p><p>​                           </p><p>​                       </p><h3 id="Divisibility-and-Quotients-Rings"><a href="#Divisibility-and-Quotients-Rings" class="headerlink" title="Divisibility and Quotients Rings"></a>Divisibility and Quotients Rings</h3><p>​             </p><p>先看一下什么是 <em>Divisibility</em>：</p><p>​                </p><p><img src="https://i.loli.net/2020/09/17/bycAeVIJodlaQGx.png" alt="image-20200917191057513"></p><p>​                   </p><p>环上的 Divisibility 和整数的整除性基本相同。</p><p>​           </p><p>回忆一下，如果一个数除了 $-1$ 和 $1$ 因子以外，没有其他多余的（trivial）因子，那么这个数为质数。</p><p>原因是 $1$ 和 $-1$ 都存在乘法逆元（本身）。所以在环的定义上，如果一个元素存在乘法逆元，那么这个元素称为 unit。</p><p>​                </p><p>再看一下 unit 的定义：</p><p>​             </p><p><img src="https://i.loli.net/2020/09/17/TM45yPA92Cpa37d.png" alt="image-20200917194238648"></p><p>​            </p><p>如果 $u\;\in\;R$ ，且 $u$ 有乘法上的逆元，则 $u$ 被称为 unit，这里 unit 就相当于前面提到的 $1$ 和 $-1$ 。</p><p>如果 $u$ 不是 unit 并且它的二元分解中有一个是 unit，它就是不可约的。这里不可约的相当于前面提到的质数。</p><p>​                 </p><p>看一下环上的同余定义：</p><p>​             </p><p><img src="https://i.loli.net/2020/09/17/2bZPHWYRUzIo7Dy.png" alt="image-20200917200333674"></p><p>​                   </p><p>对于同一模数的两个环，两个环上的同余式可以进行加法，减法和乘法。</p><p>​                 </p><p>下面学习下商环，简单地看下定义：</p><p>​             </p><p><img src="https://i.loli.net/2020/09/17/6moL1Z4C9tK8rAJ.png" alt="image-20200917202708520"></p><p>​                </p><p>商环又称为剩余类环，它也满足加法，减法和乘法的性质。                                         </p><p>​                  </p><p>​                        </p><p>利用上面的方法我们可以生成一个新的环。</p><p>​           </p><h3 id="Polynomial-rings-and-the-Euclidean-algorithm"><a href="#Polynomial-rings-and-the-Euclidean-algorithm" class="headerlink" title="Polynomial rings and the Euclidean algorithm"></a>Polynomial rings and the Euclidean algorithm</h3><p>​                      </p><p>看一下多项式环简单的定义：</p><p>​                   </p><p><img src="https://i.loli.net/2020/09/21/DLCoTXdHBqVUvW1.png" alt="image-20200921190416583"></p><p>​            </p><p><strong>coefficients</strong> 也可以从 $Q,\;R,\;C$ 或者是有限域 $F_p$ 中取。密码学中 $F_p$ 中出现的情况比较多，这种</p><p>类型的环我们称之为 <strong>Euclidean Ring</strong> （欧几里得环）。</p><p>​                </p><p>再认识几个关于多项式的概念：</p><p>​              </p><p><img src="https://i.loli.net/2020/09/21/igndWbJVG7PBMqZ.png" alt="image-20200921172946644"></p><p>​                </p><p>对于一个非零的多项式，最高次项的幂被称为 <strong>degree</strong> 。对于多项式 $a(x)$ ，其 <strong>degree</strong> 可以记为 $deg(a)$ 。</p><p>最高次项的系数被称为 <strong>leading coefficient</strong> 。如果 <strong>leading coefficient</strong> 为 $1$ ，我们称这个多项式</p><p>为 <strong>monic polynomial</strong> 。</p><p>​                        </p><p>再看一下 $F_p$ 下的环，也就是 <strong>Euclidean Ring</strong> 的定义：</p><p>​              </p><p><img src="https://i.loli.net/2020/09/21/4VxCWykFJSzIXhG.png" alt="image-20200921192756409"></p><p>​                    </p><p>其中，$k$ 被称为商，$r$ 被称为剩余。</p><p>​                </p><p><strong>Euclidean Ring</strong> 下最大公因数的定义：</p><p>​               </p><p><img src="https://i.loli.net/2020/09/21/GwLTj2brJHioAnI.png" alt="image-20200921194306375"></p><p>​                    </p><p>定义很容易理解，因为在有限域内，通常我们将取 <strong>monic</strong> 的那个 gcd。</p><p>​                   </p><p>再学习一下 <strong>Euclidean Ring</strong> 下的扩展欧几里得定理：</p><p>​                      </p><p> 感觉这是一个扩展欧几里得定理的变体，这个定理有两个用途：</p><p>​                 </p><ul><li>计算同一 Euclidean Ring 下两个多项式的 gcd</li><li>因式分解 Euclidean RIng 下的多项式</li></ul><p>​                     </p><p>先看计算 gcd 的方法：</p><p>​                  </p><p>大前提：</p><p>​                  </p><p><img src="https://i.loli.net/2020/09/21/T6mUqVXlOQg2eSA.png" alt="image-20200921194722385"></p><p>​                  </p><p>计算方法：</p><p>​                </p><p><img src="https://i.loli.net/2020/09/21/ARbTcVgylD8zWLC.png" alt="image-20200921201644490"></p><p>​                                  </p><p>步骤看懂了，可是原理看得不太懂？反正一直计算到 $r_{t+1}$ 就 ok 。</p><p>​                </p><p>​                 </p><p>再看分解的方法：</p><p>​               </p><p>大前提：</p><p>​                      </p><p><img src="https://i.loli.net/2020/09/21/hTwY6GvtXfZpoJe.png" alt="image-20200921203049424"></p><p>​                       </p><p>Euclidean Ring 下的任何一个非零多项式，都可以唯一地被分解成不同的首一不可约多项式和常量的乘积。</p><p>​                 </p><h3 id="Quotients-of-polynomial-rings"><a href="#Quotients-of-polynomial-rings" class="headerlink" title="Quotients of polynomial rings"></a>Quotients of polynomial rings</h3><p>​                </p><p>有点拗口，前面学得剩余类环（<strong>Quotients Rings</strong>），现在又整一个 <strong>Quotients of polynomial rings</strong> ，</p><p>说白了就是 <strong>Polynomial Rings</strong> 产生的剩余类环。整一个定义：</p><p>​                  </p><p><img src="https://i.loli.net/2020/09/21/JwbDKflyLVqMjAe.png" alt="image-20200921204104982">               </p><p>​                   </p><p><strong>重点学习 Euclidean RIng 的剩余类环。</strong></p><p>​                       </p><p>Euclidean Rings 产生的剩余类环依然满足剩余类环的某些性质，即加法、减法和乘法。</p><p>​                       </p><p>Euclidean Rings 产生的剩余类环的 unit 有如下性质：</p><p>​             </p><p><img src="https://i.loli.net/2020/09/21/dVBOwPCpeqFaZG5.png" alt="image-20200921210530877"></p><p>​              </p><p>​                  </p><p>Euclidean RIngs 产生的剩余类环同时是域， 需要满足的条件：</p><p>​                    </p><p><img src="https://i.loli.net/2020/09/22/HRUjuh8ZMSDnCsl.png" alt="image-20200922195708815"></p><p>​                  </p><p>对于产生的剩余类环 $F[x]/(m)$ ，如果 $m$ 是不可约多项式，因为：</p><p>​                  </p><script type="math/tex; mode=display">for\;every\;a\in F[x]/(m),\;gcd(a,m)\;=\;1</script><p>​                            </p><p>那么剩余类环中每个元素都存在一个乘法逆元，这时候 $F[x]/(m)$ 就是一个域。</p><p>​                    </p><p>这个产生的 $F[x]/(m)$ 域有如下性质：</p><p>​              </p><p><img src="https://i.loli.net/2020/09/21/3EI5KujmwkVHDRL.png" alt="image-20200921215219801"></p><p>​                        </p><p>很容易理解，就是有 $d$ 个项（$a_0\;\sim\;a_{d-1}$），因为每个项有 $p$ 个可能取值，并且这些所有可能的</p><p>取值都在这个域中，所以这个域中有 $p^d$ 个元素。这个域就是有名的 Galois Fields，可记为 $GF(p^d)$  ，</p><p>或者记为 $F_{p^d}$ ，说明这个域有 $p^d$ 个元素。</p><p>​                      </p><p>这个跟整数的有限域 $GF(p)$ 有几分神似：</p><p>​                     </p><p>比如：</p><p>​               </p><p><img src="https://i.loli.net/2020/09/22/Vnb8ZciLxoMpHgI.png" alt="image-20200922205258377">  </p><p>​            </p><p>还有：</p><p>​                </p><p><img src="https://i.loli.net/2020/09/22/4ojMxstKgWzfu3d.png" alt="image-20200922205320466"></p><p>​                    </p><p>​                      </p><p>​                        </p><p>最后补充一些性质：</p><p>​                       </p><p><img src="https://i.loli.net/2020/09/21/jn1ophuDUPKtJGQ.png" alt="image-20200921220849839"></p><p>​                     </p><p>最后一点提到，如果两个有限域的元素个数相同，那么就称这两个有限域同构。</p><p>​                </p><p>对于两个域 $F_{p^e}$ 和 $F_{p^d}$ ，如果有 $e\;|\;d$ ，那么称 $F_{p^e}$ 为 $F_{p^d}$ 的子域。</p><p>​                         </p><p>​                           </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ul><li><em>An Introduction to Mathematical Cryptography</em></li></ul><p>​                        </p><p>​                         </p><p>坚持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​                        &lt;/p&gt;
&lt;p&gt;&lt;em&gt;An Introduction to Mathematical Cryptography&lt;/em&gt; 读书笔记。由于之前看过 &lt;em&gt;Introduction to Cryptography&lt;/em&gt;，
      
    
    </summary>
    
    
    
      <category term="Textbook" scheme="https://buki-freak.github.io/tags/Textbook/"/>
    
  </entry>
  
  <entry>
    <title>SM4-Algorithm-Learning</title>
    <link href="https://buki-freak.github.io/2020/09/12/SM4-Algorithm-Learning/"/>
    <id>https://buki-freak.github.io/2020/09/12/SM4-Algorithm-Learning/</id>
    <published>2020-09-12T01:06:44.000Z</published>
    <updated>2020-09-14T08:07:35.925Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看差分分析，碰到了 SM4 算法，学习一下。</p><p>​     </p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>先看一下 SM4 的特点：</p><p>​      </p><div class="table-container"><table><thead><tr><th>subjects</th><th>length</th></tr></thead><tbody><tr><td>key length</td><td>128 bits</td></tr><tr><td>block length</td><td>128 bits</td></tr><tr><td>rounds</td><td>32</td></tr></tbody></table></div><p>​        </p><p>对于 SM4 算法，定义以下符号：</p><p>$\oplus$  为 32 bits 异或，$&lt;&lt;&lt; i$ 为 32 bits 循环左移 i 位。</p><p>​        </p><h1 id="Encryption-amp-Decryption"><a href="#Encryption-amp-Decryption" class="headerlink" title="Encryption&amp;Decryption"></a>Encryption&amp;Decryption</h1><p>贴个图。</p><p>​    </p><p><img src="https://media.springernature.com/original/springer-static/image/chp%3A10.1007%2F978-3-030-22263-5_23/MediaObjects/475074_1_En_23_Fig1_HTML.png" alt="Improved SM4 Encryption Algorithm Based on Mixed Congruence Method |  SpringerLink"></p><p>​     </p><p>​     </p><p>加密算法由 <strong>32 次迭代运算</strong> 和一次 <strong>反序变换</strong> 构成，其中：</p><p>​      </p><p>32  次迭代运算：  $X_{i+4}\;=\;F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i),\;i=0,1,…,31$</p><p>反序变换：$(Y_0,Y_1,Y_2,Y_3)\;=\;R(X_{32},X_{33},X_{34},X_{35})\;=\;(X_{35},X_{34},X_{33},X_{32})$</p><p>​    </p><p><strong>解密算法和加密算法的结构相同，不同的是解密使用倒序的子秘钥序。</strong></p><p>​    </p><p>先看一下 F 函数。</p><p>​      </p><h2 id="F-Function"><a href="#F-Function" class="headerlink" title="F Function"></a>F Function</h2><p>​     </p><p>轮函数的结构跟 DES、AES 的区别还是挺大的。</p><p>​      </p><p><strong>输入 : </strong></p><p>密文分组 $(X_0,X_1,X_2,X_3)\;\in\;(Z_{2}^{32})^4$，轮秘钥 $rk\;\in\;Z_{2}^{32}$</p><p><strong>输出 :</strong></p><p>$F(X_0,X_1,X_2,X_3)\;=\;X_0\oplus T(X_1\oplus X_2\oplus X_3\oplus rk)$</p><p>​       </p><p>其中 T 函数为<strong>合成置换</strong>，合成置换可逆，它由非线性变换 $\tau$ 和 线性变换 $L$ 复合而成。</p><p>​    </p><h3 id="非线性变换-tau"><a href="#非线性变换-tau" class="headerlink" title="非线性变换 $\tau$"></a>非线性变换 $\tau$</h3><p>$\tau$ 由四个 parallel 的 S-box 组成，简单易懂。</p><p>​        </p><p><strong>输入：</strong></p><p>$A\;=\;(a_0,a_1,a_2,a_3)\;\in\;(Z_{2}^{8})^4$</p><p><strong>输出：</strong></p><p>$B\;=\;(b_0,b_1,b_2,b_3)\;=\;\tau(A)\;=\;(Sbox(a_0),Sbox(a_1),Sbox(a_2),Sbox(a_3))\;\in\;(Z_{2}^{8})^4$</p><p>​      </p><p><strong>S-box：</strong></p><p>​       </p><p><img src="https://i.loli.net/2020/09/12/uqSexDaMpWmPQ8L.png" alt="image-20200912100840820"></p><p>​      </p><h3 id="线性变换-L"><a href="#线性变换-L" class="headerlink" title="线性变换 $L$"></a>线性变换 $L$</h3><p>​      </p><p>线性变换需要用到上面定义的逻辑位移运算。</p><p>​      </p><p><strong>输入：</strong></p><p>$B\;\in\;Z_{2}^{32}$</p><p><strong>输出：</strong></p><p>$C\;=\;L(B)\;=\;B\oplus(B&lt;&lt;&lt;2)\oplus(B&lt;&lt;&lt;10)\oplus(B&lt;&lt;&lt;18)\oplus(B&lt;&lt;&lt;24)\;\in\;Z_{2}^{32}$</p><p>​    </p><p>​     </p><h1 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h1><p>​     </p><p>SM4 的秘钥扩展算法和 encryption 的过程大致相同。</p><p>​       </p><p>设 $MK$ 为加密秘钥。</p><p>​     </p><p><strong>输入：</strong></p><p>$MK\;=\;(MK_0,MK_1,MK_2,MK_3)\;\in\;(Z_{2}^{32})^4$</p><p><strong>输出：</strong></p><p>$rk_i\;=\;K_{i+4}\;=\;K_i\oplus T’(K_{i+1}\oplus K_{i+2}\oplus K_{i+3}\oplus CK_i),\;i=0,1,…,31$</p><p>​     </p><p>其中，</p><ul><li><p>$K_0,K_1,K_2,K_3\;=\;(MK_0\oplus FK_0,MK_1\oplus FK_1,MK_2\oplus FK_2,MK_3\oplus FK_3)$</p><p>  ​      </p></li><li><p>$T’$ 是将合成置换 $T$ 的线性变换 $L$ 替换为 $L’$ :    $L’(B)\;=\;B\oplus(B&lt;&lt;&lt;13)\oplus(B&lt;&lt;&lt;23)$</p><p>  ​     </p></li><li><p>系统参数 $FK$ 的取值为：</p><p>​     </p></li></ul><div class="table-container"><table><thead><tr><th>$FK_i$</th><th>Value</th></tr></thead><tbody><tr><td>0</td><td>0xA3B1BAC6</td></tr><tr><td>1</td><td>0x56AA3350</td></tr><tr><td>2</td><td>0x677D9197</td></tr><tr><td>3</td><td>0xB27022DC</td></tr></tbody></table></div><p>​     </p><ul><li><p>固定参数 $CK_i$ 的取值方法为：</p><p>  ​          </p></li></ul><p><img src="https://i.loli.net/2020/09/12/HiBCFzMwlugmbaj.png" alt="image-20200912111038850"></p><p>​     </p><p>​       </p><h1 id="Realisation"><a href="#Realisation" class="headerlink" title="Realisation"></a>Realisation</h1><p>​    </p><p>自己实现一波，发现还是挺简单的。</p><p>​     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Module request: Util(self)</span></span><br><span class="line"><span class="comment"># Author: w366er</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Descrition:</span></span><br><span class="line"><span class="string">1. Implement of normal SM4 algorithm</span></span><br><span class="line"><span class="string">2. Reference: https://raw.githubusercontent.com/fengkx/sm4/master/SM4.pdf </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">new</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        self.key_box = []</span><br><span class="line">        self.SBOX = [</span><br><span class="line">        <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>, <span class="number">0x05</span>,</span><br><span class="line">        <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">        <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>, <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>,</span><br><span class="line">        <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>,</span><br><span class="line">        <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>,</span><br><span class="line">        <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>, <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">        <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>,</span><br><span class="line">        <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>,</span><br><span class="line">        <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>, <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>,</span><br><span class="line">        <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>,</span><br><span class="line">        <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>,</span><br><span class="line">        <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>, <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>,</span><br><span class="line">        <span class="number">0x0a</span>, <span class="number">0xc1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">        ]</span><br><span class="line">        self.CK = [</span><br><span class="line">        <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">        <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">        <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">        <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">        <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">        <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">        <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">        <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">        ]</span><br><span class="line">        self.FK = [<span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span>]</span><br><span class="line">        self.BLOCK_SIZE = <span class="number">32</span></span><br><span class="line">        self.gen_key(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">non_linear_transpose</span><span class="params">(self,A)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        B = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            A_ = A &amp; <span class="number">0xff</span></span><br><span class="line">            B += (self.SBOX[((A_&amp;<span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) * <span class="number">16</span> + (A_&amp;<span class="number">0x0f</span>)] &lt;&lt; (i * <span class="number">8</span>))</span><br><span class="line">            A &gt;&gt;= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> B</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lls</span><span class="params">(self,x,sign)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        hb = x &gt;&gt; (self.BLOCK_SIZE - sign)</span><br><span class="line">        <span class="keyword">return</span> (x &lt;&lt; sign) &amp; <span class="number">0xffffffff</span> | hb</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_transpose</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> B ^ self.lls(B,<span class="number">2</span>) ^ self.lls(B,<span class="number">10</span>) ^ self.lls(B,<span class="number">18</span>) ^ self.lls(B,<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_transpose_key</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> B ^ self.lls(B,<span class="number">13</span>) ^ self.lls(B,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Block2Int</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> sum([B[i] &lt;&lt; ((<span class="number">3</span> - i) * self.BLOCK_SIZE) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Int2Block</span><span class="params">(self,I)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> [I &gt;&gt; (self.BLOCK_SIZE*<span class="number">3</span>), (I &amp; <span class="number">0xffffffff0000000000000000</span>) &gt;&gt; (self.BLOCK_SIZE*<span class="number">2</span>), (I &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; self.BLOCK_SIZE, I &amp; <span class="number">0xffffffff</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_key</span><span class="params">(self,key)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        MK = self.Int2Block(key)</span><br><span class="line">        K = [MK[i] ^ self.FK[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            next_K = K[<span class="number">1</span>] ^ K[<span class="number">2</span>] ^ K[<span class="number">3</span>] ^ self.CK[i]</span><br><span class="line">            next_K = K[<span class="number">0</span>] ^ self.linear_transpose_key(self.non_linear_transpose(next_K))</span><br><span class="line">            self.key_box.append(next_K)</span><br><span class="line">            K = [K[<span class="number">1</span>], K[<span class="number">2</span>], K[<span class="number">3</span>], next_K]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(self,X_0,X_1,X_2,X_3,rk)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> X_0 ^ self.linear_transpose(self.non_linear_transpose(X_1^X_2^X_3^rk))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self,plaintext)</span>:</span> <span class="comment"># check pass</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Encryption for SM4</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param plaintext: plaintext  --&gt; int</span></span><br><span class="line"><span class="string">        :return cipher: cipher --&gt; int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        X = self.Int2Block(plaintext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            next_X = self.F(X[<span class="number">0</span>],X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],self.key_box[i])</span><br><span class="line">            X = [X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],next_X]</span><br><span class="line">        X = X[::<span class="number">-1</span>]  <span class="comment"># reverse transpose</span></span><br><span class="line">        <span class="keyword">return</span> self.Block2Int(X)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self,cipher)</span>:</span> <span class="comment"># check pass</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Decryption for SM4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :cipher: cipher text --&gt; int</span></span><br><span class="line"><span class="string">        :return: plaintext --&gt; int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        X = self.Int2Block(cipher)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            next_X = self.F(X[<span class="number">0</span>],X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],self.key_box[i])</span><br><span class="line">            X = [X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],next_X]</span><br><span class="line">        X = X[::<span class="number">-1</span>]  <span class="comment"># reverse transpose</span></span><br><span class="line">        <span class="keyword">return</span> self.Block2Int(X)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="comment"># plaintext: 0x0123456789ABCDEFFEDCBA9876543210</span></span><br><span class="line"><span class="comment"># cipher:    0x681edf34d206965e86b3e94f536e4246</span></span><br></pre></td></tr></table></figure><p>​      </p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>​           </p><p><strong>证明加密与解密的对称性。</strong>先从<strong>特殊性</strong>开始：</p><p>​         </p><p>令 $i\;=\;35$，加密过程中有：</p><p>​        </p><p>$X_{35}\;=\;F(X_{31},X_{32},X_{33},X_{34},rk_{31})\;=X_{31}\oplus T(X_{32}\oplus X_{33}\oplus X_{34}\oplus rk_{31})$，</p><p>进一步写成 $X_{35}\;=\;X_{31}\oplus D_{35}$。</p><p>​       </p><p>解密过程中，由于密文在最后一轮进行的 reverse，所以有：</p><p>​       </p><p>$X_{31}\;=\;F(X_{35},X_{34},X_{33},X_{32},rk_{31})\;=\;X_{35}\oplus T(X_{34}\oplus X_{33}\oplus X_{32}\oplus rk_{31})$</p><p>​      </p><p>这里后面的 $T(X_{34}\oplus X_{33}\oplus X_{32}\oplus rk_{31})$ 和 $D_{35}$ 相同，特殊性证明完成。</p><p>​     </p><p>再从<strong>一般性</strong>出发。</p><p>​     </p><p>对于加密，有：</p><p>​      </p><p>​        $X_{i+4}\;=\;F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_{i})\;=\;X_{i}\oplus T(X_{i+1},X_{i+2},X_{i+3},rk_{i})$，同样地，</p><p>写成： $X_i \oplus D_{i+4}$，其中 $i\;=\;0,1,2,…,31$</p><p>​      </p><p>对于解密，有：</p><p>​         </p><p>$X_{i-4}\;=\;F(X_i,X_{i-1},X_{i-2},X_{i-3},rk_i)\;=\;X_i\oplus T(X_{i-1},X_{i-2},X_{i-3},rk_{i-4})$，</p><p>其中 $i\;=\;35,34,…,4$。再写成： $X_{i}\oplus D_{i}$ </p><p>​      </p><p>一般性证明完成。</p><p>​       </p><p>​      </p><p>再证明<strong>子秘钥的安全性</strong>。</p><p>​      </p><p>生成秘钥扩展算法中，有：</p><p>​        </p><p>$rk_i\;=\;K_{i+4}\;=\;K_i\oplus T’(K_{i+1}\oplus K_{i+2}\oplus K_{i+3}\oplus CK_i)$，$i\;=\;0,1,…,31$</p><p>需要留意的是， $(K_0,K_1,K_2,K_3)\;=\;(MK_0\oplus FK_0,MK_1\oplus FK_1,MK_2\oplus FK_2,MK_3\oplus FK_3)$</p><p>​      </p><p>和加密解密原理相同地，改写成 $K_{i-4}\;=\;K_{i}\oplus T’(K_{i-1},K_{i-2},K_{i-3},CK_{i-4})$，</p><p>其中 $i\;=\;35,34,…,4$。如果泄露了四个子秘钥，我们完全可以恢复出加密秘钥以及全部子密钥。</p><p>相比于 DES，子密钥的安全性高许多。下面尝试一下四个子秘钥恢复出加密密钥：</p><p>​       </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Module request: </span></span><br><span class="line"><span class="comment"># Author: w366er</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Descrition:</span></span><br><span class="line"><span class="string">1. Implement of normal SM4 algorithm</span></span><br><span class="line"><span class="string">2. References: https://raw.githubusercontent.com/fengkx/sm4/master/SM4.pdf </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">new</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        self.key_box = []</span><br><span class="line">        self.SBOX = [</span><br><span class="line">        <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>, <span class="number">0x05</span>,</span><br><span class="line">        <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">        <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>, <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>,</span><br><span class="line">        <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>,</span><br><span class="line">        <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>,</span><br><span class="line">        <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>, <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">        <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>,</span><br><span class="line">        <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>,</span><br><span class="line">        <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>, <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>,</span><br><span class="line">        <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>,</span><br><span class="line">        <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>,</span><br><span class="line">        <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>, <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>,</span><br><span class="line">        <span class="number">0x0a</span>, <span class="number">0xc1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">        ]</span><br><span class="line">        self.CK = [</span><br><span class="line">        <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">        <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">        <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">        <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">        <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">        <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">        <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">        <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">        ]</span><br><span class="line">        self.FK = [<span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span>]</span><br><span class="line">        self.BLOCK_SIZE = <span class="number">32</span></span><br><span class="line">        self.gen_key(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">non_linear_transpose</span><span class="params">(self,A)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        B = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            A_ = A &amp; <span class="number">0xff</span></span><br><span class="line">            B += (self.SBOX[((A_&amp;<span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) * <span class="number">16</span> + (A_&amp;<span class="number">0x0f</span>)] &lt;&lt; (i * <span class="number">8</span>))</span><br><span class="line">            A &gt;&gt;= <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> B</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lls</span><span class="params">(self,x,sign)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        hb = x &gt;&gt; (self.BLOCK_SIZE - sign)</span><br><span class="line">        <span class="keyword">return</span> (x &lt;&lt; sign) &amp; <span class="number">0xffffffff</span> | hb</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_transpose</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> B ^ self.lls(B,<span class="number">2</span>) ^ self.lls(B,<span class="number">10</span>) ^ self.lls(B,<span class="number">18</span>) ^ self.lls(B,<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_transpose_key</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> B ^ self.lls(B,<span class="number">13</span>) ^ self.lls(B,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Block2Int</span><span class="params">(self,B)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> sum([B[i] &lt;&lt; ((<span class="number">3</span> - i) * self.BLOCK_SIZE) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Int2Block</span><span class="params">(self,I)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> [I &gt;&gt; (self.BLOCK_SIZE*<span class="number">3</span>), (I &amp; <span class="number">0xffffffff0000000000000000</span>) &gt;&gt; (self.BLOCK_SIZE*<span class="number">2</span>), (I &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; self.BLOCK_SIZE, I &amp; <span class="number">0xffffffff</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_key</span><span class="params">(self,key)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        MK = self.Int2Block(key)</span><br><span class="line">        K = [MK[i] ^ self.FK[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            next_K = K[<span class="number">1</span>] ^ K[<span class="number">2</span>] ^ K[<span class="number">3</span>] ^ self.CK[i]</span><br><span class="line">            next_K = K[<span class="number">0</span>] ^ self.linear_transpose_key(self.non_linear_transpose(next_K))</span><br><span class="line">            self.key_box.append(next_K)</span><br><span class="line">            K = [K[<span class="number">1</span>], K[<span class="number">2</span>], K[<span class="number">3</span>], next_K]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(self,X_0,X_1,X_2,X_3,rk)</span>:</span>  <span class="comment"># check pass</span></span><br><span class="line">        <span class="keyword">return</span> X_0 ^ self.linear_transpose(self.non_linear_transpose(X_1^X_2^X_3^rk))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self,plaintext)</span>:</span> <span class="comment"># check pass</span></span><br><span class="line">        X = self.Int2Block(plaintext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            next_X = self.F(X[<span class="number">0</span>],X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],self.key_box[i])</span><br><span class="line">            X = [X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],next_X]</span><br><span class="line">        X = X[::<span class="number">-1</span>]  <span class="comment"># reverse transpose</span></span><br><span class="line">        <span class="keyword">return</span> self.Block2Int(X)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self,cipher)</span>:</span> <span class="comment"># check pass</span></span><br><span class="line">        X = self.Int2Block(cipher)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            next_X = self.F(X[<span class="number">0</span>],X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],self.key_box[i])</span><br><span class="line">            X = [X[<span class="number">1</span>],X[<span class="number">2</span>],X[<span class="number">3</span>],next_X]</span><br><span class="line">        X = X[::<span class="number">-1</span>]  <span class="comment"># reverse transpose</span></span><br><span class="line">        <span class="keyword">return</span> self.Block2Int(X)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"---------- Expected result ----------"</span>)</span><br><span class="line">    print(<span class="number">0x0123456789ABCDEFFEDCBA9876543210</span>)</span><br><span class="line">    </span><br><span class="line">    sm4 = new(<span class="number">0x0123456789ABCDEFFEDCBA9876543210</span>)</span><br><span class="line">    key = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,sm4.key_box[<span class="number">0</span>],sm4.key_box[<span class="number">1</span>],sm4.key_box[<span class="number">2</span>],sm4.key_box[<span class="number">3</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>,<span class="number">3</span>,<span class="number">-1</span>):</span><br><span class="line">        t = key[i<span class="number">-1</span>] ^ key[i<span class="number">-2</span>] ^ key[i<span class="number">-3</span>] ^ sm4.CK[i<span class="number">-4</span>]</span><br><span class="line">        key[i<span class="number">-4</span>] = key[i] ^ sm4.linear_transpose_key(sm4.non_linear_transpose(t))</span><br><span class="line">    print(<span class="string">"----------    My result   ----------"</span>)</span><br><span class="line">    key = key[:<span class="number">4</span>]</span><br><span class="line">    key = [key[i] ^ sm4.FK[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    key = sm4.Block2Int(key)</span><br><span class="line">    print(key)</span><br><span class="line"><span class="comment">#---------- Expected result ----------</span></span><br><span class="line"><span class="comment"># 1512366075204170947332355369683137040</span></span><br><span class="line"><span class="comment">#----------    My result   ----------</span></span><br><span class="line"><span class="comment"># 1512366075204170947332355369683137040</span></span><br></pre></td></tr></table></figure><p>​       </p><p>​        </p><p>子密钥的长度为 32 bits，在知道三个子密钥的情况下，爆破方法在多项式时间也是完全可以恢复出子密钥</p><p>的，时间复杂度为： $O(2^{32})$ 。</p><p>​       </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://raw.githubusercontent.com/fengkx/sm4/master/SM4.pdf" target="_blank" rel="noopener">SM4 block cipher algorithm</a></p><p>​        </p><p>​         </p><p>坚持！</p><p>​      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看差分分析，碰到了 SM4 算法，学习一下。&lt;/p&gt;
&lt;p&gt;​     &lt;/p&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Int
      
    
    </summary>
    
    
    
      <category term="Paper" scheme="https://buki-freak.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>differential attack learning</title>
    <link href="https://buki-freak.github.io/2020/09/10/differential-attack-learning/"/>
    <id>https://buki-freak.github.io/2020/09/10/differential-attack-learning/</id>
    <published>2020-09-10T12:48:14.000Z</published>
    <updated>2020-09-11T14:23:56.199Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下<a href="https://en.wikipedia.org/wiki/Differential_cryptanalysis" target="_blank" rel="noopener">差分攻击</a>，最近比赛出现得有点多。</p><p>​       </p><h1 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h1><p>先花个 30 分钟看个<a href="https://www.youtube.com/watch?v=ONhPfIABxFs" target="_blank" rel="noopener">视频</a>，看一下差分攻击到底是个啥。英语有点撇脚，勉强听一下。</p><p>顺便记录一下 <strong>non-generic attack</strong> 的分类：    </p><p>​       </p><blockquote><p>linear attack</p><p>differential attack</p><p>slide-channel attack</p><p>  related key attack</p></blockquote><p>&nbsp;        </p><p><img src="https://i.loli.net/2020/09/11/xak3Kw1hM4WZYD7.png" alt="屏幕截图(17)"><br>&nbsp;</p><p>借个图，虽然有点糊。差分攻击基于<a href="https://en.wikipedia.org/wiki/Chosen-plaintext_attack" target="_blank" rel="noopener">选择明文攻击</a>，并且前提是  $\alpha\;-\;\beta$  具有 <strong>high-probability</strong>。解释一下，$\alpha$ 是一对</p><p>明文，或者进入 <strong>F function</strong> 前中间值的异或值（差值），$\beta$ 是经过 $r-1$ <strong>round F Function</strong> 之后的对应的密文对的异或</p><p>值。<br>​<br>​       </p><p>对于 $\alpha$，</p><script type="math/tex; mode=display">\alpha\;=\;x_1\;\oplus\;x_2</script><p>​       </p><p>对于 $\beta$，</p><script type="math/tex; mode=display">y_1\;=\;F_{r}^{-1}(K_r^{i},\;C_1)\\y_2\;=\;F_{r}^{-1}(K_r^{i},\;C_2)\\\beta\;=\;y_1\;\;\oplus\;y_2</script><p>​       </p><p>​       </p><p>那么 $\alpha$，$\beta$ 怎么用呢？我们先假设 $\alpha$ 和 $\beta$ 是确定的并具有 <strong>high-probability</strong>，那么对于一个 n bits 的 key，对于所有可能</p><p>的值，我们建立一个表：</p><p>​       </p><div class="table-container"><table><thead><tr><th>Potential r-th round Key</th><th>K0</th><th>K1</th><th>…</th><th>Ki</th><th>Kn-2</th><th>Kn-1</th><th>Kn</th></tr></thead><tbody><tr><td>Count</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table></div><p>​       </p><p>​    </p><p>对于所有差值为 $\alpha$ 的明文对，我们用 $K_i$ 计算对应的 $\beta’$。对于每一个 $K_i$ ，如果产生的差值为 $\beta$ ，那么 count 自增。最</p><p>后 count 为 maximum 的 <strong>potential r-th round key</strong> 很可能为 <strong>real key</strong>。</p><p>​       </p><p>那么如何找出最佳的 $\alpha$，$\beta$ 呢？这里先抛开 <strong>potential r-th key</strong>，对于每一个可能的 $\alpha$，$\beta$，建立一个表格（假设这里取值范围为 0x04）:</p><p>​       </p><div class="table-container"><table><thead><tr><th>B/A</th><th>0x01</th><th>0x02</th><th>0x03</th><th>0x04</th></tr></thead><tbody><tr><td>0x01</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0x02</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0x03</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0x04</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table></div><p>​      </p><p>设 $\alpha$ 的值为 $\alpha_i$，对应表格上的每一列，对所有差值为 $\alpha_i$ 的明文对，计算其 $\beta$ 值并且在表格上记录出现频率，频率最高的 $\alpha-\beta$ 为最佳 <strong>characteristic</strong>。</p><p>​       </p><p>​       看懂原理之后，跟着 <a href="https://blog.soreatu.com/posts/case-study-differetial-cryptanalysis-attack" target="_blank" rel="noopener">soreatu</a> 大佬复现一波题目。</p><p>​      </p><p>​      </p><h1 id="WMCTF-idiot-box"><a href="#WMCTF-idiot-box" class="headerlink" title="WMCTF- idiot box"></a>WMCTF- idiot box</h1><p>​     </p><p>​    题目给出的远程文件。</p><p>​     </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">import</span> Crypto.Random.random <span class="keyword">as</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">banner = <span class="string">'''</span></span><br><span class="line"><span class="string">__        __   _                            _         __        ____  __  ____ _____ _____</span></span><br><span class="line"><span class="string">\ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___   \ \      / /  \/  |/ ___|_   _|  ___|</span></span><br><span class="line"><span class="string"> \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \   \ \ /\ / /| |\/| | |     | | | |</span></span><br><span class="line"><span class="string">  \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |   \ V  V / | |  | | |___  | | |  _|</span></span><br><span class="line"><span class="string">   \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/     \_/\_/  |_|  |_|\____| |_| |_|</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">sbox = [[<span class="number">11</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">14</span>], [<span class="number">0</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>], [<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>], [</span><br><span class="line">    <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">11</span>], [<span class="number">13</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">5</span>]]</span><br><span class="line">pbox = [<span class="number">19</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">30</span>,</span><br><span class="line">        <span class="number">29</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">28</span>]</span><br><span class="line">keys = []</span><br><span class="line">pc_key = [<span class="number">2</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">44</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">35</span>, <span class="number">5</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">20</span>,</span><br><span class="line">          <span class="number">17</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">24</span>, <span class="number">9</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> keys</span><br><span class="line">    key = getRandomNBitInteger(<span class="number">49</span>) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">48</span>) - <span class="number">1</span>)</span><br><span class="line">    key_bin = bin(key)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        key_bin = <span class="string">''</span>.join([key_bin[pc_key[j]] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">48</span>)])</span><br><span class="line">        sub_key = int(key_bin, <span class="number">2</span>)</span><br><span class="line">        keys.append(sub_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span><span class="params">(x, i)</span>:</span></span><br><span class="line">    row = ((x &amp; <span class="number">0b100000</span>) &gt;&gt; <span class="number">4</span>) + (x &amp; <span class="number">1</span>)</span><br><span class="line">    col = (x &amp; <span class="number">0b011110</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sbox[i][(row &lt;&lt; <span class="number">4</span>) + col]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">(x)</span>:</span></span><br><span class="line">    x_bin = [int(_) <span class="keyword">for</span> _ <span class="keyword">in</span> bin(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">'0'</span>)]</span><br><span class="line">    y_bin = [x_bin[pbox[i]] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    y = int(<span class="string">''</span>.join([str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> y_bin]), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e</span><span class="params">(x)</span>:</span></span><br><span class="line">    x_bin = bin(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_bin = <span class="string">''</span></span><br><span class="line">    idx = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, idx + <span class="number">6</span>):</span><br><span class="line">            y_bin += x_bin[j % <span class="number">32</span>]</span><br><span class="line">        idx += <span class="number">4</span></span><br><span class="line">    print(y_bin)</span><br><span class="line">    <span class="keyword">return</span> int(y_bin, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(x, k)</span>:</span></span><br><span class="line">    x_in = bin(e(x) ^ k)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_out = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">48</span>, <span class="number">6</span>):</span><br><span class="line">        x_in_i = int(x_in[i:i+<span class="number">6</span>], <span class="number">2</span>)</span><br><span class="line">        y_out += bin(s(x_in_i, i // <span class="number">6</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_out = int(y_out, <span class="number">2</span>)</span><br><span class="line">    y = p(y_out)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc_block</span><span class="params">(x)</span>:</span></span><br><span class="line">    x_bin = bin(x)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">'0'</span>)</span><br><span class="line">    l, r = int(x_bin[:<span class="number">32</span>], <span class="number">2</span>), int(x_bin[<span class="number">32</span>:], <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        l, r = r, l ^ F(r, keys[i])</span><br><span class="line">    y = (l + (r &lt;&lt; <span class="number">32</span>)) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(pt)</span>:</span></span><br><span class="line">    pad_len = (<span class="number">8</span> - len(pt) % <span class="number">8</span>) % <span class="number">8</span></span><br><span class="line">    pt = pt.encode()</span><br><span class="line">    pt += <span class="string">b'\x00'</span> * pad_len</span><br><span class="line">    ct = <span class="string">b''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(pt), <span class="number">8</span>):</span><br><span class="line">        ct_block = long_to_bytes(enc_block(bytes_to_long(pt[i:i+<span class="number">8</span>]))).rjust(<span class="number">8</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">        ct += ct_block</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(banner)</span><br><span class="line">    gen_key()</span><br><span class="line">    print(keys)</span><br><span class="line">    cipher = hexlify(enc(flag)).decode(<span class="string">'utf8'</span>)</span><br><span class="line">    print(<span class="string">'[++++++++++++++++] FLAG [++++++++++++++++]'</span>)</span><br><span class="line">    print(cipher)</span><br><span class="line">    print(<span class="string">'[+] You have up to 65537 chances to obtain the ct corresponding to the pt your input(&lt;= 64 bits and hex required).'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65537</span>):</span><br><span class="line">        pt = input()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pt = unhexlify(pt)</span><br><span class="line">            <span class="keyword">assert</span>(len(pt) &lt;= <span class="number">8</span>)</span><br><span class="line">            ct = enc(pt)</span><br><span class="line">            print(hexlify(ct).decode(<span class="string">'utf8'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[*] Read the above carefully!'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>​           </p><p>​        </p><p>分析源码，题目给出了是一个自己实现的 <strong>DES</strong>，测试一下 <strong>F Function</strong> 的 <strong>characteristic</strong>：</p><p>​       </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getRandomNBitInteger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sbox = [[<span class="number">11</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">14</span>], [<span class="number">0</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>], [<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>], [\</span><br><span class="line">    <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">11</span>], [<span class="number">13</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">5</span>]]</span><br><span class="line">pbox = [<span class="number">19</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">30</span>,\</span><br><span class="line">        <span class="number">29</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">11</span>, <span class="number">28</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e</span><span class="params">(x)</span>:</span></span><br><span class="line">    x_bin = bin(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_bin = <span class="string">''</span></span><br><span class="line">    idx = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, idx + <span class="number">6</span>):</span><br><span class="line">            y_bin += x_bin[j % <span class="number">32</span>]</span><br><span class="line">        idx += <span class="number">4</span></span><br><span class="line">    <span class="comment"># print(y_bin)</span></span><br><span class="line">    <span class="keyword">return</span> int(y_bin, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span><span class="params">(x, i)</span>:</span></span><br><span class="line">    row = ((x &amp; <span class="number">0b100000</span>) &gt;&gt; <span class="number">4</span>) + (x &amp; <span class="number">1</span>)</span><br><span class="line">    col = (x &amp; <span class="number">0b011110</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sbox[i][(row &lt;&lt; <span class="number">4</span>) + col]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">(x)</span>:</span></span><br><span class="line">    x_bin = [int(_) <span class="keyword">for</span> _ <span class="keyword">in</span> bin(x)[<span class="number">2</span>:].rjust(<span class="number">32</span>, <span class="string">'0'</span>)]</span><br><span class="line">    y_bin = [x_bin[pbox[i]] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    y = int(<span class="string">''</span>.join([str(_) <span class="keyword">for</span> _ <span class="keyword">in</span> y_bin]), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(x, k)</span>:</span></span><br><span class="line">    x_in = bin(e(x) ^ k)[<span class="number">2</span>:].rjust(<span class="number">48</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_out = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">48</span>, <span class="number">6</span>):</span><br><span class="line">        x_in_i = int(x_in[i:i+<span class="number">6</span>], <span class="number">2</span>)</span><br><span class="line">        y_out += bin(s(x_in_i, i // <span class="number">6</span>))[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">'0'</span>)</span><br><span class="line">    y_out = int(y_out, <span class="number">2</span>)</span><br><span class="line">    y = p(y_out)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_diff_output</span><span class="params">(diff)</span>:</span></span><br><span class="line">    p1 = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">    p2 = p1 ^ diff</span><br><span class="line">    key = getRandomNBitInteger(<span class="number">48</span>)</span><br><span class="line">    c1, c2 = F(p1, key), F(p2, key)</span><br><span class="line">    <span class="keyword">return</span> c1^c2, (p1,p2,c1,c2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = Counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    P_ = <span class="number">0x00002002</span>  <span class="comment"># \alpha</span></span><br><span class="line">    X_, _ = gen_diff_output(P_)</span><br><span class="line">    counter[X_] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">X_, freq = counter.most_common(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">print(hex(X_)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">'0'</span>), freq / <span class="number">10000.0</span>)  <span class="comment"># \beta, probability</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0x00000000 0x00000000 1.0] # 0 is assure to be output 0</span></span><br><span class="line"><span class="comment"># [0x00000002 0x00030005 0.2163]</span></span><br><span class="line"><span class="comment"># [0x00000040 0x00000000 0.2554]  # seems to be the best</span></span><br><span class="line"><span class="comment"># [0x00002000 0x00000000 0.2492]</span></span><br><span class="line"><span class="comment"># [0x00002002 0x00030005 0.052]</span></span><br></pre></td></tr></table></figure><p>​        </p><p>​        </p><p>$\alpha\;=\;0x00000040$，$\beta\;=\;0x00000000$ 的 <strong>high-probability</strong> 比较明显，取一下数据。借了下<a href="https://blog.soreatu.com/" target="_blank" rel="noopener">师傅</a>的代码，Counter 包真好用 😳。</p><p>​      </p><p><img src="https://i.loli.net/2020/09/11/aZljpGgMociEeVC.png" alt="hlUWDaoC2xBY6VN"></p><p>​            </p><p>​                 </p><p>再抄一幅图，嘿嘿~</p><p>这里我刚开始进入了一个误区，如果遍历所有 <strong>potential key</strong> 的话，复杂度必大于 $O(2^{48})$，但是如果将 48-bits 的 </p><p><strong>potential key</strong> 分成 8 个 6-bits  的 S-boxes，复杂度可以降到 $10000*O(2^{6+3})$，大概是 $O(2^{22})$，完全没有毛病。</p><p>​           </p><p>再贴一个 <strong>F Function</strong> 的 <strong>schedule</strong>：</p><p>​       </p><p><img src="https://i.loli.net/2020/09/11/aWZ3e2ljkKfrg5G.png" alt="image-20200911210447077"></p><p>​        </p><p>​       </p><p><strong>DES</strong> 的 <strong>F Function</strong> 流程如下：</p><p>​      </p><blockquote><p>Expansion D-box : E( ) function</p><p>XOR - key</p><p>S-boxes : S( ) function</p><p>Straight D-box : D( ) function</p></blockquote><p>​      </p><p>大概就是一个两边从中间靠的过程，写出来就是 : </p><p>​      </p><script type="math/tex; mode=display">S(E(T\_R{'})\;\oplus\;K_i)\;=\;D^{-1}(F')\;=\;D^{-1}(T\_L'\;\oplus\;0x00000040)</script><p>​      </p><p>自己写的 exp 就不贴出来了，仔细看了一下大佬的，tql！ </p><p>​      </p><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><p><a href="https://medium.com/lotus-fruit/breaking-des-using-differential-cryptanalysis-958e8118ff41" target="_blank" rel="noopener">Breaking DES using Differential Cryptanalysis</a></p><p><a href="https://blog.soreatu.com/posts/case-study-differetial-cryptanalysis-attack/#wmctf-idiot-box" target="_blank" rel="noopener">Case Study: Differetial Cryptanalysis Attack</a></p><p><a href="https://www.youtube.com/watch?v=ONhPfIABxFs" target="_blank" rel="noopener">Differential Cryptanalysis</a></p><p>​     </p><p>特别致谢：</p><p><a href="https://blog.soreatu.com/posts/case-study-differetial-cryptanalysis-attack/" target="_blank" rel="noopener">soreatu 大佬</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习一下&lt;a href=&quot;https://en.wikipedia.org/wiki/Differential_cryptanalysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;差分攻击&lt;/a&gt;，最近比赛出现得有点多。&lt;/p&gt;
&lt;p&gt;​      
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>强网杯-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/09/09/%E5%BC%BA%E7%BD%91%E6%9D%AF-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/09/09/%E5%BC%BA%E7%BD%91%E6%9D%AF-2020-Review/</id>
    <published>2020-09-09T00:52:19.000Z</published>
    <updated>2020-09-09T01:34:48.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baby-crt"><a href="#baby-crt" class="headerlink" title="baby_crt"></a>baby_crt</h1><p>&nbsp;<br>Infective CRT-RSA，看一下大概的加密流程：<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/09/09/w1SBjg.jpg" alt="w1SBjg.jpg"><br>&nbsp;<br>&nbsp;<br>在看一下部分参数的设置要求：<br>&nbsp;<br>$N, p, q, e, d$ 常规 RSA 生成。<br>&nbsp;<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/09/09/w1pXon.jpg" alt="w1pXon.jpg"><br>&nbsp;<br>&nbsp;<br>选择两个足够大的素数 $t1, t2$，bit_length 在 $60~80$。题目给出的 $t1, t2$ 过小，存在问题。<br>&nbsp;<br>有几个参数上面没写，补充：</p><script type="math/tex; mode=display">d_p\equiv\;d\mod\;\varphi(p\;·\;t_1)\\d_q\equiv\;d\mod\;\varphi(q\;·\;t_2)\\d\;·\;e_{t_1}\mod\;\varphi(t_1)\\d\;·\;e_{t_2}\mod\;\varphi(t_2)</script><p>&nbsp;<br>&nbsp;<br>继续往下看，看到一点东西了:<br>&nbsp;<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/09/09/w19x7d.jpg" alt="w19x7d.jpg"><br>&nbsp;<br>&nbsp;<br>这里 $c1$ 范围为:</p><script type="math/tex; mode=display">1~2^{16}</script><p>&nbsp;<br>就这，就这？<br>&nbsp;<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">26318358382258215770827770763384603359524444566146134039272065206657135513496897321983920652242182112479484135343436206815722605756557098241887233837248519031879444740922789351356138322947108346833956405647578838873425658405513192437479359531790697924285889505666769580176431360506227506064132034621123828090480606055877425480739950809109048177976884825589023444901953529913585288143291544181183810227553891973915960951526154469344587083295640034876874318610991153058462811369615555470571469517472865469502025030548451296909857667669963720366290084062470583318590585472209798523021029182199921435625983186101089395997</span></span><br><span class="line">m = <span class="number">26275493320706026144196966398886196833815170413807705805287763413013100962831703774640332765503838087434904835657988276064660304427802961609185997964665440867416900711128517859267504657627160598700248689738045243142111489179673375819308779535247214660694211698799461044354352200950309392321861021920968200334344131893259850468214901266208090469265809729514249143938043521579678234754670097056281556861805568096657415974805578299196440362791907408888958917063668867208257370099324084840742435785960681801625180611324948953657666742195051492610613830629731633827861546693629268844700581558851830936504144170791124745540</span></span><br><span class="line">p,q = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">sig = <span class="number">20152941369122888414130075002845764046912727471716839854671280255845798928738103824595339885345405419943354215456598381228519131902698373225795339649300359363119754605698321052334731477127433796964107633109608706030111197156701607379086766944096066649323367976786383015106681896479446835419143225832320978530554399851074180762308322092339721839566642144908864530466017614731679525392259796511789624080228587080621454084957169193343724515867468178242402356741884890739873250658960438450287159439457730127074563991513030091456771906853781028159857466498315359846665211412644316716082898396009119848634426989676119219246</span></span><br><span class="line">sig_e = pow(sig,e,n)</span><br><span class="line"><span class="comment"># print(sig_e,n) check pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65537</span>):</span><br><span class="line">    <span class="comment"># print(i)  # check pass</span></span><br><span class="line">    p = gmpy2.gcd(pow(m,i,n) - sig_e,n)</span><br><span class="line">    <span class="keyword">if</span> p != <span class="number">1</span>:</span><br><span class="line">        print(p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line">print(q)</span><br><span class="line"><span class="comment"># flag&#123;601cb6f6d990ed5b89cf0de60508a95c07543793&#125;</span></span><br></pre></td></tr></table></figure><h1 id="modestudy"><a href="#modestudy" class="headerlink" title="modestudy"></a>modestudy</h1><p>&nbsp;<br>给的 file 啥玩意儿，环境关了555，以后一定不鸽比赛！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;baby-crt&quot;&gt;&lt;a href=&quot;#baby-crt&quot; class=&quot;headerlink&quot; title=&quot;baby_crt&quot;&gt;&lt;/a&gt;baby_crt&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;br&gt;Infective CRT-RSA，看一下大概的加密流程：&lt;br&gt;&amp;nb
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>gactf-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/09/06/gactf-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/09/06/gactf-2020-Review/</id>
    <published>2020-09-06T12:09:10.000Z</published>
    <updated>2020-09-08T08:24:54.505Z</updated>
    
    <content type="html"><![CDATA[<p>比赛期间打工，所以没怎么看题，回顾一下。&nbsp;</p><h1 id="da-vinci-after-rsa"><a href="#da-vinci-after-rsa" class="headerlink" title="da vinci after rsa"></a>da vinci after rsa</h1><p>yafu 分解 n 可以得到三个质数，计算 $\varphi$ 发现 $e | \varphi$，于是化简：<br>&nbsp;<br>$ e’\;\;=\;\;e\;//\;gcd(e,\varphi(n))\;=\;5\;,\;d’\;=\;invert(e’,\varphi(n)) $，得到：$c^{d’}\;\equiv\;m^5\mod\;n$ 。<br>&nbsp;<br>看大佬的博客可以用 AMM，自己实现了一遍发现只能求一个根，直接上 sage。<br>&nbsp;<br>&nbsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">c = <span class="number">421363015174981309103786520626603807427915973516427836319727073378790974986429057810159449046489151</span></span><br><span class="line">pa = <span class="number">9749</span></span><br><span class="line">pb = <span class="number">11237753507624591</span></span><br><span class="line">pc = <span class="number">9127680453986244150392840833873266696712898279308227257525736684312919750469261</span></span><br><span class="line"><span class="comment"># factor with yafu</span></span><br><span class="line"></span><br><span class="line">mas = GF(pa)(c).nth_root(<span class="number">5</span>, all=<span class="literal">True</span>) <span class="comment"># find 5-th root in modulus pa, so do below</span></span><br><span class="line">mbs = GF(pb)(c).nth_root(<span class="number">5</span>, all=<span class="literal">True</span>)</span><br><span class="line">mcs = GF(pc)(c).nth_root(<span class="number">5</span>, all=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># algl = True, which means find all roots, otherwise...</span></span><br><span class="line"><span class="comment"># all = False is default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find all possible m</span></span><br><span class="line">ms = [] </span><br><span class="line"><span class="keyword">for</span> ma, mb, mc <span class="keyword">in</span> itertools.product(mas, mbs, mcs): </span><br><span class="line">    m = ZZ(crt(list(map(ZZ,[ma,mb,mc])), [pa,pb,pc]))</span><br><span class="line">    mi = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">if</span> mi[:<span class="number">4</span>] == <span class="string">b'flag'</span>:</span><br><span class="line">        flag = mi[<span class="number">5</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># b'weadfa9987_adwd23123_454f'</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;<br>&nbsp;<br>后面是一个斐波那契数列，秘钥是一段乱序的斐波那契数列，加密解密的过程是秘钥和原斐波那契数列的映射关系。这里是把 flag 按照 encryption 中的 key 再加密一遍。<br>&nbsp;<br>&nbsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decrypt da vinci encryption</span></span><br><span class="line">fb = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">LEN = len(flag)</span><br><span class="line"><span class="keyword">while</span> len(fb) &lt; LEN:</span><br><span class="line">    fb.append(fb[<span class="number">-1</span>] + fb[<span class="number">-2</span>])</span><br><span class="line">fb[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">enc = [<span class="number">0</span>,<span class="number">28657</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">17711</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">46368</span>,<span class="number">75025</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">610</span>,<span class="number">377</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">1597</span>,<span class="number">2584</span>,<span class="number">4181</span>,<span class="number">6765</span>,<span class="number">10946</span>,<span class="number">987</span>]</span><br><span class="line">r_flag = [flag[fb.index(enc[i])] <span class="keyword">for</span> i <span class="keyword">in</span> range(LEN)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r_flag:</span><br><span class="line">    print(chr(i),end=<span class="string">''</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># w5aed4fa994f87_dwad3123_2</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h1 id="what-r-the-noise"><a href="#what-r-the-noise" class="headerlink" title="what_r_the_noise"></a>what_r_the_noise</h1><p>&nbsp;<br>求平均值。。。<br>&nbsp;</p><h1 id="elgamal-rsa"><a href="#elgamal-rsa" class="headerlink" title="elgamal_rsa"></a>elgamal_rsa</h1><p>&nbsp;<br>&nbsp;<br>yafu 分解 secret，得到一堆数。。。最高幂的素数为：$653551912583^{15}$ 。<br>&nbsp;<br>ws 分析一波，flag 的长度：$2^{36*8} $ 比最高幂的素数要小，舒服，跟上题一样，走 AMM，但还是要求多个根，学一手。<br>&nbsp;<br>取最高幂的素数为 $n$，$e’\;=\;e\;//\;gcd(e,\;\varphi(n))\;=\;2379$ ，$d’\;=\;invert(e’,\;\varphi(n))$ ，$c’\;\equiv\;c^{d’}\;\equiv\;m^{gcd(e,\;\varphi(n))}\mod\;n$<br>&nbsp;<br>借了一部分 <a href="https://0xdktb.top/2020/08/30/WriteUp-GACTF2020-Crypto/" target="_blank" rel="noopener">tb师傅的exp</a><br>&nbsp;<br>师傅 tql！<br>&nbsp;<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x1296</span></span><br><span class="line">c = <span class="number">255310806360822158306697936064463902328816816156848194779397173946813224291656351345682266227949792774097276485816149202739762582969208376195999403112665514848825884325279574067341653685838880693150001066940379902609411551128810484902428845412055387955258568610350610226605230048821754213270699317153844590496606931431733319116866235538921198147193538906156906954406577796507390570080177313707462469835954564824944706687157852157673146976402325057144745208116022973614795377968986322754779469798013426261911408914756488145211933799442123449261969392169406969410065018032795960230701484816708147958190769470879211953704222809883281592308316942052671516609231501663363123562942</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># factor through yafu</span></span><br><span class="line">fac = [(<span class="number">42044128297</span>, <span class="number">6</span>), (<span class="number">232087313537</span>, <span class="number">5</span>), (<span class="number">653551912583</span>, <span class="number">15</span>),</span><br><span class="line">       (<span class="number">802576647765917</span>, <span class="number">7</span>), (<span class="number">28079229001363</span>, <span class="number">14</span>), (<span class="number">104280142799213</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AMM</span><span class="params">(q, r, delta, k=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Adleman-Manders-Miller r-th Root Extraction Algorithm in F_q</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    * Attention:</span></span><br><span class="line"><span class="string">        - r and q satisfy r | q - 1</span></span><br><span class="line"><span class="string">    :param q: modulus q --&gt; int</span></span><br><span class="line"><span class="string">    :param r: exponent r --&gt; int</span></span><br><span class="line"><span class="string">    :param delta: remain --&gt; int</span></span><br><span class="line"><span class="string">    :param k: the exponent of k, default is 1 --&gt; int</span></span><br><span class="line"><span class="string">    :return: a r-th root of delta</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    phi = pow(q, k<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    mod = pow(q, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># step1 &amp; step2</span></span><br><span class="line">        rho = random.getrandbits(mod.nbits()) % mod</span><br><span class="line">        <span class="keyword">if</span> pow(rho, phi//r, mod) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 3</span></span><br><span class="line">    s = phi</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        s //= r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span>(gcd(s, r) == <span class="number">1</span>)  <span class="comment"># check if s is coprimed with r</span></span><br><span class="line">    <span class="keyword">assert</span>(pow(r, t) * s == phi)</span><br><span class="line"></span><br><span class="line">    alpha = invert(r, s)</span><br><span class="line">    a, b, c, h = pow(rho, phi//r, mod), pow(delta, r *</span><br><span class="line">                                            alpha<span class="number">-1</span>, mod), pow(rho, s, mod), <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 4</span></span><br><span class="line">    j, k = <span class="number">0</span>, phi // (r * s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, t):</span><br><span class="line">        k //= r</span><br><span class="line">        d = pow(b, k, mod)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = - discrete_log(phi, d, a)</span><br><span class="line">            b, h, c = b*(pow(c, r*j, mod)) % mod, h * \</span><br><span class="line">                pow(c, j, mod) % mod, pow(c, r, mod)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 5</span></span><br><span class="line">    <span class="keyword">return</span> pow(delta, alpha, mod) * h % mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allroot</span><span class="params">(root, r, q, k = <span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># find all roots</span></span><br><span class="line">    </span><br><span class="line">    phi = (q - <span class="number">1</span>) * q**(k - <span class="number">1</span>)</span><br><span class="line">    mod = q ** k</span><br><span class="line">    all_root = set()</span><br><span class="line">    all_root.add(root)</span><br><span class="line">    <span class="keyword">while</span> len(all_root) &lt; r:</span><br><span class="line">        new_root = root</span><br><span class="line">        unity = pow(getRandomRange(<span class="number">2</span>, mod), phi // r, mod)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(r - <span class="number">1</span>):</span><br><span class="line">            new_root = (new_root * unity) % mod</span><br><span class="line">            all_root.add(new_root)</span><br><span class="line">    <span class="keyword">return</span> all_root</span><br><span class="line"></span><br><span class="line"><span class="comment"># since 653551912583**15 &gt; 2**(36*8)</span></span><br><span class="line">n0 = <span class="number">653551912583</span></span><br><span class="line">n = pow(<span class="number">653551912583</span>, <span class="number">15</span>)</span><br><span class="line">phi = n * (<span class="number">653551912583</span> - <span class="number">1</span>) // <span class="number">653551912583</span></span><br><span class="line">e_p = e // gcd(e, phi)</span><br><span class="line">d = invert(e_p, phi)</span><br><span class="line">c_p = pow(c, d, n)</span><br><span class="line">ar = allroot(AMM(n0,<span class="number">2</span>,c_p,<span class="number">15</span>),<span class="number">2</span>,n0,<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ar:</span><br><span class="line">    print(long_to_bytes(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b'you_4re_good_at_b0th_el94mal_and_rs4'</span></span><br></pre></td></tr></table></figure><p>&nbsp;<br>不用 AMM 的话，直接上 sage 也可。<br>&nbsp;<br>&nbsp;</p><h1 id="square"><a href="#square" class="headerlink" title="square"></a>square</h1><p>&nbsp;<br>平方数求和公式化简成：$6x^{2}\;=\;(y\;+\;1)(2y\;+\;1)$，然后再转换成 pell 方程: $(4y\;+\;3)^2\; -\; 48x^{2} \;=\; 1$。<br>&nbsp;<br>&nbsp;<br>再令 $t\;=\;4y\;+\;3$，有：$t^2\;-\;48x^{2}\;=\;1$。爆破走出前四位：$1,\;7,\;97,\;1351$，然后在 <a href="https://oeis.org/search?q=1%2C7%2C97%2C1351&amp;language=english&amp;go=Search" target="_blank" rel="noopener">oeis</a> 找到递归式:</p><script type="math/tex; mode=display">a(m) = 14a(m-1) - a(m-2)</script><p>&nbsp;<br>找到所有满足 $t,\;y$ 的pell 方程的解，然后再根据 $t,\;x$ 的关系求出 $x,\;y$，oeis 是个好东西。<br>&nbsp;<br>exp 如下：<br>&nbsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># We can get something like pell equation: (4*y+3)^2 - 48*x^2 == 1</span></span><br><span class="line"><span class="comment"># Write it into t^2 - 48*x^2 == 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">for i in range(10000):</span></span><br><span class="line"><span class="string">    for j in range(10000):</span></span><br><span class="line"><span class="string">        if i ** 2 - 48 * j ** 2 == 1:</span></span><br><span class="line"><span class="string">            print(i,j)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">1 0</span></span><br><span class="line"><span class="string">7 1</span></span><br><span class="line"><span class="string">97 14</span></span><br><span class="line"><span class="string">1351 195</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Formula: </span></span><br><span class="line"><span class="string">a(m) = 14a(m-1) - a(m-2)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">97</span>,<span class="number">1351</span>]</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">97</span>,<span class="number">1351</span>]</span><br><span class="line">y = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">195</span>]</span><br><span class="line"><span class="keyword">while</span> len(x) &lt;  <span class="number">120</span>:</span><br><span class="line">    ta = <span class="number">14</span> * a[<span class="number">-1</span>] - a[<span class="number">-2</span>]</span><br><span class="line">    a.append(ta)</span><br><span class="line">    <span class="keyword">if</span> ta % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">        x.append(ta)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,len(x)):</span><br><span class="line">    y.append(gmpy2.iroot((x[i]**<span class="number">2</span><span class="number">-1</span>) // <span class="number">48</span>,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">120</span>):</span><br><span class="line">    x[i] = (x[i] - <span class="number">3</span>) // <span class="number">4</span></span><br><span class="line">x = x[<span class="number">4</span>:]</span><br><span class="line">y = y[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y):</span><br><span class="line">    print(i,j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># check pass</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y):</span><br><span class="line">    <span class="keyword">assert</span>((<span class="number">4</span>*i+<span class="number">3</span>)**<span class="number">2</span> - <span class="number">48</span>*j**<span class="number">2</span> == <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>&nbsp;<br>坚持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;比赛期间打工，所以没怎么看题，回顾一下。&amp;nbsp;&lt;/p&gt;
&lt;h1 id=&quot;da-vinci-after-rsa&quot;&gt;&lt;a href=&quot;#da-vinci-after-rsa&quot; class=&quot;headerlink&quot; title=&quot;da vinci after rsa&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2020-初赛-Writeup</title>
    <link href="https://buki-freak.github.io/2020/08/24/CISCN2020-%E5%88%9D%E8%B5%9B-Writeup/"/>
    <id>https://buki-freak.github.io/2020/08/24/CISCN2020-%E5%88%9D%E8%B5%9B-Writeup/</id>
    <published>2020-08-24T07:00:22.000Z</published>
    <updated>2020-09-08T12:57:19.202Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛难度算是中等，神仙题和简单题参半。。。<br>&nbsp;<br>&nbsp;</p><h1 id="bd"><a href="#bd" class="headerlink" title="bd"></a>bd</h1><p>签到题，老 wiener 了，计算 d 的上界大概为 256 bits，题目给的 d 为 200 bits，直接上脚本：<br>&nbsp;<br>&nbsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuedfra</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF += [x / y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify</span><span class="params">(ctnf)</span>:</span></span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::<span class="number">-1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculatefrac</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    cF = continuedfra(x, y)</span><br><span class="line">    cF = map(simplify, (cF[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(cF))))</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_pq</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    par = isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) / (<span class="number">2</span> * a), (-b - par) / (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerattack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> calculatefrac(e, n):</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) / k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> abs(int(p)), abs(int(q))</span><br><span class="line">    print(<span class="string">'not find!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">86966590627372918010571457840724456774194080910694231109811773050866217415975647358784246153710824794652840306389428729923771431340699346354646708396564203957270393882105042714920060055401541794748437242707186192941546185666953574082803056612193004258064074902605834799171191314001030749992715155125694272289</span></span><br><span class="line">e = <span class="number">46867417013414476511855705167486515292101865210840925173161828985833867821644239088991107524584028941183216735115986313719966458608881689802377181633111389920813814350964315420422257050287517851213109465823444767895817372377616723406116946259672358254060231210263961445286931270444042869857616609048537240249</span></span><br><span class="line">c = <span class="number">37625098109081701774571613785279343908814425141123915351527903477451570893536663171806089364574293449414561630485312247061686191366669404389142347972565020570877175992098033759403318443705791866939363061966538210758611679849037990315161035649389943256526167843576617469134413191950908582922902210791377220066</span></span><br><span class="line">p, q = wienerattack(e, n)</span><br><span class="line">d = invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;d3752538-90d0-c373-cfef-9247d3e16848&#125;</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h1 id="lfsr"><a href="#lfsr" class="headerlink" title="lfsr"></a>lfsr</h1><p>&nbsp;<br>&nbsp;<br>state 以及 keystream 给出 10000 bits，flag 为 mask。<br>&nbsp;<br>尝试分析不同 cipher 和 output bits 的关系，构建关于 mask GF(2) 下的方程，未果。<br>&nbsp;<br>在网上找到一个类似的题目，是 SJTU-CTF-2019的一道: <a href="https://blog.gpx.moe/2020/02/17/SJTU-CTF-2019-WriteUp-Crypto/#Berlekamp-Massey-Algorithm" target="_blank" rel="noopener">题目</a> :<br>&nbsp;<br>这题只是原题的其中一步。有一个 Berlekamp-Massey Algorithm 算法，用于构造一个最短的 LFSR 以满足给定的二进制输出序列。于是使用给出的 10000 bits中的前 200 bits。Berlekamp-Massey Algorithm ，这玩意儿有现成的在线<a href="http://bma.bozhu.me/" target="_blank" rel="noopener">工具</a> 。 算出最短的 mask，然后去掉首一，转为十进制，正是 flag。<br>&nbsp;<br>&nbsp;<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: s= s[<span class="number">1</span>:]                                                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: s                                                                                            </span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">[<span class="string">'99'</span>,</span><br><span class="line"> <span class="string">'97'</span>,</span><br><span class="line"> <span class="string">'95'</span>,</span><br><span class="line"> <span class="string">'94'</span>,</span><br><span class="line"> <span class="string">'91'</span>,</span><br><span class="line"> <span class="string">'90'</span>,</span><br><span class="line"> <span class="string">'89'</span>,</span><br><span class="line"> <span class="string">'86'</span>,</span><br><span class="line"> <span class="string">'84'</span>,</span><br><span class="line"> <span class="string">'82'</span>,</span><br><span class="line"> <span class="string">'76'</span>,</span><br><span class="line"> <span class="string">'75'</span>,</span><br><span class="line"> <span class="string">'74'</span>,</span><br><span class="line"> <span class="string">'73'</span>,</span><br><span class="line"> <span class="string">'66'</span>,</span><br><span class="line"> <span class="string">'64'</span>,</span><br><span class="line"> <span class="string">'62'</span>,</span><br><span class="line"> <span class="string">'61'</span>,</span><br><span class="line"> <span class="string">'60'</span>,</span><br><span class="line"> <span class="string">'59'</span>,</span><br><span class="line"> <span class="string">'58'</span>,</span><br><span class="line"> <span class="string">'57'</span>,</span><br><span class="line"> <span class="string">'56'</span>,</span><br><span class="line"> <span class="string">'55'</span>,</span><br><span class="line"> <span class="string">'52'</span>,</span><br><span class="line"> <span class="string">'51'</span>,</span><br><span class="line"> <span class="string">'46'</span>,</span><br><span class="line"> <span class="string">'44'</span>,</span><br><span class="line"> <span class="string">'43'</span>,</span><br><span class="line"> <span class="string">'40'</span>,</span><br><span class="line"> <span class="string">'38'</span>,</span><br><span class="line"> <span class="string">'36'</span>,</span><br><span class="line"> <span class="string">'32'</span>,</span><br><span class="line"> <span class="string">'30'</span>,</span><br><span class="line"> <span class="string">'29'</span>,</span><br><span class="line"> <span class="string">'27'</span>,</span><br><span class="line"> <span class="string">'26'</span>,</span><br><span class="line"> <span class="string">'23'</span>,</span><br><span class="line"> <span class="string">'22'</span>,</span><br><span class="line"> <span class="string">'19'</span>,</span><br><span class="line"> <span class="string">'18'</span>,</span><br><span class="line"> <span class="string">'17'</span>,</span><br><span class="line"> <span class="string">'15'</span>,</span><br><span class="line"> <span class="string">'14'</span>,</span><br><span class="line"> <span class="string">'13'</span>,</span><br><span class="line"> <span class="string">'11'</span>,</span><br><span class="line"> <span class="string">'5'</span>,</span><br><span class="line"> <span class="string">'4'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: res                                                                                          </span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'1010110011100101010000011110000001010111111110011000010110010101000101101100110011101110100000110000'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: int(res,<span class="number">2</span>)                                                                                   </span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">856137228707110492246853478448</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;856137228707110492246853478448&#125;</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;<br>由于当时急急忙忙先把题目做出来了。。现在学习一下原理。<br>&nbsp;<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/08/24/dDvuE4.jpg" alt="dDvuE4.jpg"><br>&nbsp;<br>Berlekamp-Massy Algorithm 可以根据给出的 keystream， 找出能生成这个keystream 的最短 LFSR/Tap。理论上给出的 keystream 远大于 tap 的长度时，准确度极高。<br>&nbsp;<br>这个算法也可以在任意的 field 中找到线性递归序列的最小多项式。<br>&nbsp;<br>&nbsp;<br>看一下 wiki 的描述：<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/08/25/d2P3lT.jpg" alt="d2P3lT.jpg"><br>&nbsp;<br>&nbsp;<br>$S_n$ 在这里是 LFSR 的 keystream，$C_n$ 则是 LFSR 的 tap。整条式子的意思是，假设 tap 的长度为 $L$，那么第 $L+1$ 个值与前 $L$ 位产生的 output 的异或值为0。而算法的目的是找到这个长度为 $L$ 的 $C_n$。<br>&nbsp;<br>&nbsp;<br>我们着重看一下 binary field/GF(2) 的基本运算。<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/08/24/dDz80O.jpg" alt="dDz80O.jpg"><br>&nbsp;<br>&nbsp;<br>先回顾一下二进制运算。GF(2) 中</p><div class="table-container"><table><thead><tr><th>运算</th><th>操作</th></tr></thead><tbody><tr><td>加法/减法</td><td>异或</td></tr><tr><td>乘法</td><td>逻辑与</td></tr><tr><td>除法</td><td>单位元运算/定义为’x/1=x’</td></tr></tbody></table></div><p>&nbsp;<br>&nbsp;<br>详细看一下算法步骤：<br>&nbsp;<br><img src="https://s1.ax1x.com/2020/08/24/drS0PJ.jpg" alt="drS0PJ.jpg"><br>&nbsp;<br>有点懵逼啊。。。先留个坑<br>&nbsp;</p><h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><p>&nbsp;<br>神仙题，听说 32 核几秒 factor success？？？自己尝试了一下发现不太行。。。tcl 等一手 wp<br>&nbsp;<br>&nbsp;</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>&nbsp;</p><ul><li><a href="https://en.wikipedia.org/wiki/Berlekamp%E2%80%93Massey_algorithm" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Berlekamp%E2%80%93Massey_algorithm</a><br>&nbsp;<br>&nbsp;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次比赛难度算是中等，神仙题和简单题参半。。。&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1 id=&quot;bd&quot;&gt;&lt;a href=&quot;#bd&quot; class=&quot;headerlink&quot; title=&quot;bd&quot;&gt;&lt;/a&gt;bd&lt;/h1&gt;&lt;p&gt;签到题，老 wiener 了，计算 d
      
    
    </summary>
    
    
    
      <category term="Writeup" scheme="https://buki-freak.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>RSA-Learning</title>
    <link href="https://buki-freak.github.io/2020/08/03/RSA-Learning/"/>
    <id>https://buki-freak.github.io/2020/08/03/RSA-Learning/</id>
    <published>2020-08-03T13:22:37.000Z</published>
    <updated>2020-08-07T09:18:40.543Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了一篇 RSA 的paper，总结的不错，简单地做下笔记。</p><p>RSA 是基于 Factoring Large Integers Problem 的公钥密码体制。</p><h1 id="Elementary-Attacks"><a href="#Elementary-Attacks" class="headerlink" title="Elementary Attacks"></a>Elementary Attacks</h1><h2 id="Common-Modulus"><a href="#Common-Modulus" class="headerlink" title="Common Modulus"></a>Common Modulus</h2><p>….</p><h2 id="Blinding"><a href="#Blinding" class="headerlink" title="Blinding"></a>Blinding</h2><p>出现在不经 padding 和 check 的 RSA signiture 中，如果签名方不仔细审查明文，攻击者可以伪造某人对于任何内容的签名。</p><p>cheat 大致过程如下：</p><p><img src="https://s1.ax1x.com/2020/08/06/agFLoF.jpg" alt="agFLoF.jpg"></p><p>整个过程称为 blinding，是因为 Bob 没能得知他要签名的内容。签名方在签名前检查内容能够防止这个问题。</p><h1 id="Low-Private-Exponent"><a href="#Low-Private-Exponent" class="headerlink" title="Low Private Exponent"></a>Low Private Exponent</h1><p>低解密指数攻击。</p><p>d 的大小会影响解密的时长。为了速度上的要求，有人会将 d 设置的更小。M.Wiener 提出的攻击方法对很小的 d 的 RSA 系统带来威胁。</p><h2 id="Theorem-2-M-Wiener"><a href="#Theorem-2-M-Wiener" class="headerlink" title="Theorem 2(M. Wiener):"></a>Theorem 2(M. Wiener):</h2><p><img src="https://s1.ax1x.com/2020/08/06/agF7LV.jpg" alt="agF7LV.jpg"></p><h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof:"></a>Proof:</h2><p>证明过程利用连分数。<br>因为 $ed\;\equiv\;1\mod\;\varphi(N)$，所以存在一个 k 满足:  $ed\;-\;k\varphi(N)\;=\;1$，</p><p>因此有：</p><script type="math/tex; mode=display">\left|\frac{e}{\varphi(N)}\;-\;\frac{k}{d}\right|\;=\;\frac{1}{d\varphi(N)}</script><p>所以可以把 $\frac{k}{d}$ 看成是 $\frac{e}{\varphi(N)}$ 的大概值。<br>然后因为 $\varphi(N)\;=\;N\;-\;p\;-\;q\;+\;1$ 以及 $p\;+\;q\;-\;1\;&lt;\;3\sqrt{N}$ 所以有：</p><p><img src="https://s1.ax1x.com/2020/08/06/agFbZT.jpg" alt="agFbZT.jpg"></p><p>计算 $\frac{e}{N}$ 的连分数，其中有一个解等于 $\frac{k}{d}$，由于 $ed\;-\;k\varphi(N)\;=\;1$，所以 $gcd(k, d)\;=\;1$ ，即 $\frac{k}{d}$ 为真分数。线性时间可以解得 d。</p><h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><h3 id="Large-e"><a href="#Large-e" class="headerlink" title="Large e:"></a>Large e:</h3><p>对解密指数进行改进，令 $e’\;=\;e\;+\;t\varphi(N), t\;is\;large\;enough$，$e’$ 作为新的加密指数:</p><p><img src="https://s1.ax1x.com/2020/08/06/agFqdU.jpg" alt="agFqdU.jpg"></p><h3 id="Using-CRT"><a href="#Using-CRT" class="headerlink" title="Using CRT"></a>Using CRT</h3><p>保证 d 的 bit size 的同时，使用 CRT 对解密来提升解密速度。<br>计算：</p><script type="math/tex; mode=display">d_p\;\equiv\;d\;\mod(p\;-\;1)\\d_q\;\equiv\;d\;\mod(q\;-\;1)</script><p>并且 $d_q$ 和 $d_p$ 足够小(128 bits each)。<br>然后计算：</p><script type="math/tex; mode=display">M_p\;\equiv\;C^{d_p}\mod\;p\\M_q\;\equiv\;C^{d_q}\mod\;q</script><p>最后 CRT：</p><script type="math/tex; mode=display">\begin{cases}M\;\equiv\;C^{d_p}\mod\;p \\\\M\;\equiv\;C^{d_q}\mod\;q\end{cases}</script><p>$d_p$ 和 $d_q$ 过小会导致 N 容易分解。</p><p>Boneh and Durfee 方法可以将上界提到 $d &lt; N^{0.292}$</p><h1 id="Low-Public-Exponent"><a href="#Low-Public-Exponent" class="headerlink" title="Low Public Exponent"></a>Low Public Exponent</h1><p>数字签名中，e 的大小会影响验证的计算时长。e 过小会导致低加密指数攻击。</p><h2 id="Coppersmith’s-Theorem"><a href="#Coppersmith’s-Theorem" class="headerlink" title="Coppersmith’s Theorem"></a>Coppersmith’s Theorem</h2><h3 id="Theorem-3-Coppersmith"><a href="#Theorem-3-Coppersmith" class="headerlink" title="Theorem 3(Coppersmith)"></a>Theorem 3(Coppersmith)</h3><p><img src="https://s1.ax1x.com/2020/08/06/agFoMq.jpg" alt="agFoMq.jpg"></p><p>Coppersmith 提供了一个快速寻找 $f(x_0)\;\equiv\;0\;\mod\;N$ 根的方法。</p><h3 id="Lemma-4"><a href="#Lemma-4" class="headerlink" title="Lemma 4"></a>Lemma 4</h3><p><img src="https://s1.ax1x.com/2020/08/06/agFTs0.jpg" alt="agFTs0.jpg"></p><h3 id="Proof-1"><a href="#Proof-1" class="headerlink" title="Proof"></a>Proof</h3><p>由 Schwarz inequality 可得：</p><script type="math/tex; mode=display">\left|h(x_0)\right|\;=\;\left|\sum{a_i}x_{0}^{i}\right|\;=\;\left|\sum{a_i}X^{i}(\frac{x_0}{X})^{i}\right|\;\leq\;\sum\left|a_{i}X^{i}(\frac{x_0}{X})^i\right|\\\leq\;\sum\left|a_{i}X^{i}\right|\;\leq\;\sqrt{d}||h(xX)||\;\leq\;N</script><p>由于 $h(x_0)\;\equiv\;0\;\mod\;N$，所以有 $h(x_0)\;=\;0$ 。前提是 h 的范数足够小。</p><p>因此，我们需要找到另外一个范数更小的多项式。满足上面的条件。</p><p>Coppersmith 提供了一个方法：</p><p><img src="https://s1.ax1x.com/2020/08/06/agFXi4.jpg" alt="agFXi4.jpg"></p><p>m 是未知的常量。我们从 $g_{u,v}(x)\;\equiv\;0\;\mod\;N^m$ 中找到符合  $norm(h(xX))\;&lt;\;N^m$ 的多项式。m 足够大的时候有多个解。</p><p>找到这个合适的多项式需要构造格：</p><p><img src="https://s1.ax1x.com/2020/08/06/agFxzR.jpg" alt="agFxzR.jpg"></p><p>Hermite’s bound 说明 $m$ 足够大的时候，可以找到  $ norn(v) &lt; N^m$ 的向量。</p><h3 id="Fact-5-LLL"><a href="#Fact-5-LLL" class="headerlink" title="Fact 5(LLL)"></a>Fact 5(LLL)</h3><p><img src="https://s1.ax1x.com/2020/08/06/agFjJJ.jpg" alt="agFjJJ.jpg"></p><p>LLL 满足 Lemma 4 的条件：</p><script type="math/tex; mode=display">2^{\frac{w}{4}}det(L)^{\frac{1}{w}}\;<\;\frac{N^m}{\sqrt{w}},\;where\;w\;=\;d(m+1)\;is\;the\;dimension\;of\;L</script><h2 id="Hastad’s-Broadcast-Attack"><a href="#Hastad’s-Broadcast-Attack" class="headerlink" title="Hastad’s Broadcast Attack"></a>Hastad’s Broadcast Attack</h2><p>Hastad 第一次运用了 Coppersmith’s theorem。</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p><img src="https://s1.ax1x.com/2020/08/06/agFvW9.jpg" alt="agFvW9.jpg"></p><p>如果 $k\;\geq\;3$，Marvin 可以恢复明文，假设我们有 $e_i\;=\;1,2,3….$，</p><script type="math/tex; mode=display">C_1\;\equiv\;M^3\;\mod\;N_1,\\C_2\;\equiv\;M^3\;\mod\;N_2,\\C_3\;\equiv\;M^3\;\mod\;N_3</script><p>如果对于所有  $N, i\;\neq\;j $，有  $gcd(N_i,\;N_j)\;=\;1$，那么使用 CRT 可以解出 $M^3$ 在整数上的值，开三次方根可以求出 M。</p><h3 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h3><p>所有的加密指数需要相同，并且需要满足 $k\;\geq\;e$。</p><p>Hastad 对于 pad 改进了攻击方法。</p><h3 id="Theorem-6-Hastad"><a href="#Theorem-6-Hastad" class="headerlink" title="Theorem 6(Hastad)"></a>Theorem 6(Hastad)</h3><p><img src="https://s1.ax1x.com/2020/08/06/agkSQ1.jpg" alt="agkSQ1.jpg"></p><h3 id="Proof-2"><a href="#Proof-2" class="headerlink" title="Proof"></a>Proof</h3><p>设 $\bar{N}\;=\;N1\;\cdots\;N_k$，其中 N_i 互质。如果 $g_i$ 中的高次项系数在 $Z^{*<br>}_{N_i}$ 不可逆，则 $N_i$ 的可以被容易分解。构造多项式：</p><p><img src="https://s1.ax1x.com/2020/08/06/agkpsx.jpg" alt="agkpsx.jpg"></p><p>$T_{i}$ 作为 Chinese Remainder Coefficients。$g(x)$ 是一元多项式，度为 d，并且 $g(M)\;\equiv\;0\;\mod\bar{N}$。</p><p>Theorem 6 符合 Theorem 3。</p><p>设 $g_i\;\equiv\;f_{i}^{e_i}\;-\;C_{i}\;\mod\;N_{i}$，我们可以恢复出明文。</p><p>前提：parties 的数量  k  需要大于 $max(e_{i}deg(f_i)), i\;=\;1,\cdots\;,k$。</p><p>特殊情况：所有加密指数相同，并且 pad 的 f 为线性函数（ $deg(f_i)\;=\;1$ ）时，满足 $ k\;&gt;\;e$ 即可。</p><h2 id="Franklin-Reiter-Related-Message-Attack"><a href="#Franklin-Reiter-Related-Message-Attack" class="headerlink" title="Franklin-Reiter Related Message Attack"></a>Franklin-Reiter Related Message Attack</h2><p>Franklin-Reiter 找到了一种相关明文的攻击方式。</p><h3 id="Background-1"><a href="#Background-1" class="headerlink" title="Background"></a>Background</h3><p><img src="https://s1.ax1x.com/2020/08/06/a2XSqH.jpg" alt="a2XSqH.jpg"></p><h3 id="Lemma-7-Frankin-Reiter"><a href="#Lemma-7-Frankin-Reiter" class="headerlink" title="Lemma 7(Frankin-Reiter)"></a>Lemma 7(Frankin-Reiter)</h3><p><img src="https://s1.ax1x.com/2020/08/06/a2XyQO.jpg" alt="a2XyQO.jpg"></p><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><p>f 关系为线性关系并且复杂度为 $O(e^2)$，只适用于低加密指数的情况。</p><h3 id="Proof-3"><a href="#Proof-3" class="headerlink" title="Proof"></a>Proof</h3><p>由 Lemma 7 可知：$M_1\;\neq\;M_2\;\in\;Z_{N}^{*}$ ，并且满足  $M_1\;\equiv\;f(M_{2})\;\mod\;N$ ，f 是 $Z_{N}[x]$ 下的线性关系。</p><p>因为 $C_1\;\equiv\;M_{1}^{e}\;\mod\;N$，所以 $M_2$ 是方程 $g_1(x)\;\equiv\;f(x)^{e}\;-\;C_1\;\in\;Z_{N}[x]$ 的一个解。</p><p>同理，我们可以得到 $M_2$ 也是另一条方程 $g_{2}(x)\;\equiv\;x^{e}\;-\;C_{2}\;\in\;Z_{N}[x]$ 。</p><p>$x\;-\;M_2$ 是两条多项式的 gcd。（不懂？</p><p>计算 $gcd(g_1, g_2)$，如果 gcd 是线性的，我们可以出 $M_2$。</p><p>由于 $f$ 关系是公开的，所以可以计算出 $M_1$ 。</p><p>对于 $e\;=\;3$ ，gcd 一定是线性的。而对于 $e\;&gt;\;3$，gcd 不总是线性的。</p><h2 id="Coppersmith’s-Short-Pad-Attack"><a href="#Coppersmith’s-Short-Pad-Attack" class="headerlink" title="Coppersmith’s Short Pad Attack"></a>Coppersmith’s Short Pad Attack</h2><h3 id="Background-2"><a href="#Background-2" class="headerlink" title="Background"></a>Background</h3><p><img src="https://s1.ax1x.com/2020/08/06/aRZfKJ.jpg" alt="aRZfKJ.jpg"></p><h3 id="Theorem-8"><a href="#Theorem-8" class="headerlink" title="Theorem 8"></a>Theorem 8</h3><p><img src="https://s1.ax1x.com/2020/08/06/aReSat.jpg" alt="aReSat.jpg"></p><h3 id="Limits-2"><a href="#Limits-2" class="headerlink" title="Limits"></a>Limits</h3><p>pad 的 bit 长度小于 m。</p><h3 id="Proof-4"><a href="#Proof-4" class="headerlink" title="Proof"></a>Proof</h3><p>设：</p><script type="math/tex; mode=display">g_1(x,y)\;\equiv\;x^{e}\;-\;C_1\\g_2(x,y)\;\equiv\;(x+y)^{e}\;-\;C_2\\y\;=\;r_1\;-\;r_2\;=\;\Delta</script><p>所以有 $h(y)\;=\;res_{x}(g_1,g_2)\;\in\;Z_s{N}[y]$。</p><p>因为 $\left|\Delta\right|\;&lt;\;2^{m}\;&lt;\;N^{\frac{1}{e^{2}}}$，所以 $\Delta$ 是 h 在 N 上的 samll root，使用 Coppersmith 的方法可以算出 $\Delta$。然后问题可以转化为 Franklin-Reiter Attack。</p><h2 id="Partial-Key-Exposure-Attack"><a href="#Partial-Key-Exposure-Attack" class="headerlink" title="Partial Key Exposure Attack"></a>Partial Key Exposure Attack</h2><h3 id="Theorem-9-BDF"><a href="#Theorem-9-BDF" class="headerlink" title="Theorem 9 (BDF)"></a>Theorem 9 (BDF)</h3><p><img src="https://s1.ax1x.com/2020/08/06/aR8M7D.jpg" alt="aR8M7D.jpg"></p><h3 id="Theorem-10-Coppersmith"><a href="#Theorem-10-Coppersmith" class="headerlink" title="Theorem 10 (Coppersmith)"></a>Theorem 10 (Coppersmith)</h3><p><img src="https://s1.ax1x.com/2020/08/06/aRGSCd.jpg" alt="aRGSCd.jpg"></p><h3 id="Proof-5"><a href="#Proof-5" class="headerlink" title="Proof"></a>Proof</h3><p>首先有：$ed\;-\;k\;(N\;-\;p\;-\;q\;+\;1)\;=\;1$ ，由于 $d\;&lt;\;\varphi(N)$ ，所以 $0\;&lt;\;k\;\leq\;e$ 。</p><p>然后改写下模数，并且将 $q\;=\;\frac{N}{p}$ 代入，可得：</p><script type="math/tex; mode=display">(e*d)*p\;-\;k*p(N\;-\;p\;+\;1)\;+\;k*N\;\equiv\;p\mod\;(2^{\frac{n}{4}})</script><p>由于已知 $d\mod\;2^{\frac{n}{4}}$ ，所以得到一个关于 $k,\;p$ 的方程。遍历所有 $k$ 的值，我们可以得到一组候选的 $p\;\mod\;2^{\frac{n}{4}}$</p><p>然后转为 Theorem 10 的方法分解 $N$ 。</p><h3 id="Limits-3"><a href="#Limits-3" class="headerlink" title="Limits"></a>Limits</h3><p>$e$ 需要满足 $e\;&lt;\;\sqrt{N}$ 。</p><p>由于候选 $p$ 的数量最多为 $e\;log_{2}e$ ，所以 $e$ 的不能太大。</p><h1 id="Implementation-Attacks"><a href="#Implementation-Attacks" class="headerlink" title="Implementation Attacks"></a>Implementation Attacks</h1><h2 id="Timing-Attack"><a href="#Timing-Attack" class="headerlink" title="Timing Attack"></a>Timing Attack</h2><p>时序攻击，是一种侧信道攻击。</p><p>Kocher 提出：通过分析许多不同组随机生成（感觉还是有人为设置）数据的解密/签名时间，可以找到私钥 $d$ 。这个人还提出了一个能耗分析的方法。</p><p>先复习一下 modular multipications:</p><p><img src="https://s1.ax1x.com/2020/08/07/aWpLVO.jpg" alt="aWpLVO.jpg"></p><p>这种方法简单的说，是利用 modular multiplications 中二进制 $d$ 的 0/1 计算时间差异来爆破出 $d$ 。</p><p>对于 $e$ 比较小的情况，可以先爆破出低 $\frac{n}{4}$ 位，然后使用 partial key exposure attack。</p><p>防御这种攻击有两种方法：</p><p>第一种是增加适当的延迟，消除计算时间差异，不过计算时间开销会增加。</p><p>第二种是 Rivest 提出的 blinding 方法，在每次计算前混入随机数。</p><h2 id="Random-Faults"><a href="#Random-Faults" class="headerlink" title="Random Faults"></a>Random Faults</h2><p>先留个坑。。</p><h2 id="Bleichenbacher’s-Attack-on-PKCS-1"><a href="#Bleichenbacher’s-Attack-on-PKCS-1" class="headerlink" title="Bleichenbacher’s Attack on PKCS 1"></a>Bleichenbacher’s Attack on PKCS 1</h2><p>首先学习一下 PKCS 1 的 padding 方式：</p><p><img src="https://s1.ax1x.com/2020/08/07/aWDmyF.jpg" alt="aWDmyF.jpg"></p><p>padding 的开头为 ‘\x00\x02’（十六个字节，下面同），结尾是 ‘\x00\x00’，中间为 padding 的内容，大于等于八字节。padding 之后的长度要求和模数 $N$ 的长度相同。</p><p>再了解一下收发机制：</p><p>发送方 padding 加密之后发送密文，接收方先将密文解密，如果解密出来的结果不以 ‘\x00\x02’ 开头，则会向发送方返回错误；否则不放回任何信息。攻击者可以截取传输密文并且向接收方发送密文。</p><p>再留个坑哈哈。。。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf" target="_blank" rel="noopener">https://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看了一篇 RSA 的paper，总结的不错，简单地做下笔记。&lt;/p&gt;
&lt;p&gt;RSA 是基于 Factoring Large Integers Problem 的公钥密码体制。&lt;/p&gt;
&lt;h1 id=&quot;Elementary-Attacks&quot;&gt;&lt;a href=&quot;#Eleme
      
    
    </summary>
    
    
    
      <category term="Paper" scheme="https://buki-freak.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>De1ta-CTF-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/08/03/De1ta-CTF-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/08/03/De1ta-CTF-2020-Review/</id>
    <published>2020-08-03T03:40:01.862Z</published>
    <updated>2020-08-03T07:05:31.815Z</updated>
    
    <content type="html"><![CDATA[<p>Only review in Crypto.</p><h1 id="nlfsr-unsolved"><a href="#nlfsr-unsolved" class="headerlink" title="nlfsr(unsolved)"></a>nlfsr(unsolved)</h1><p>This challenge consists of 4 linear feedback shift registers (below I use LFSR instead), with accordingly 19 bits, 19 bits, 6 bits and 3 bits state length. Here is the given file:</p><p><strong>quiz.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> a, b, c, d, flag</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">"De1CTF&#123;"</span> + <span class="string">''</span>.join([hex(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]) + <span class="string">"&#125;"</span></span><br><span class="line"><span class="keyword">assert</span> [len(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]] == [<span class="number">19</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">ma, mb, mc, md = <span class="number">0x505a1</span>, <span class="number">0x40f3f</span>, <span class="number">0x1f02</span>, <span class="number">0x31</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(r, m)</span>:</span> <span class="keyword">return</span> ((r &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span>) ^ (bin(r &amp; m).count(<span class="string">'1'</span>) % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, c, d</span><br><span class="line">    a = lfsr(a, ma)</span><br><span class="line">    b = lfsr(b, mb)</span><br><span class="line">    c = lfsr(c, mc)</span><br><span class="line">    d = lfsr(d, md)</span><br><span class="line">    [ao, bo, co, do] = [i &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]</span><br><span class="line">    <span class="keyword">return</span> (ao*bo) ^ (bo*co) ^ (bo*do) ^ co ^ do</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genkey</span><span class="params">(nb)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nb*<span class="number">8</span>):</span><br><span class="line">        s += str(combine())</span><br><span class="line">    open(<span class="string">"data"</span>, <span class="string">"w+"</span>).write(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">genkey(<span class="number">128</span>*<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p><strong>data</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> <span class="keyword">string</span> that comprises <span class="keyword">of</span> <span class="number">128</span>*<span class="number">1024</span>*<span class="number">8</span> bits(only <span class="literal">zero</span> <span class="keyword">or</span> <span class="literal">one</span>)</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>There are four LFSR in quiz.py and each round, four LFSR simultaneously compute four according output. Then the combination function combines these four bits and output the combination result into file data.</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>Since LFSR is the basic knowledge for us, there will more no more explanation on it. So let’s see what we have  got from the files.</p><blockquote><p>the initial state length of each LFSR</p><p>the taps of each LFSR</p><p>a combination function</p><p>many rounds combination results</p></blockquote><p>It seems to be a simple quiz because we have already known the taps of each LFSR. However, each output of four LFSR is combined as one bit, from which we can hardly retrieve the outputs of four LFSR. If we use pure brute-force attack method, the complexity would be:</p><script type="math/tex; mode=display">O(2^{47})</script><p> Such a large scale. We must relate one or some output of four LFSR to the combination result and solve the each state independently. We can use a strategies called <strong>correlation attack</strong> in stream cipher.</p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>We first look into each possible situation of four LFSR and write down the result.</p><div class="table-container"><table><thead><tr><th>ao</th><th>bo</th><th>co</th><th>do</th><th>combine</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>In the table, ao represents the single output of LFSR-1 and so on. It is very obvious that ao has 75% correlation with the combination output, and we also know that if we have the correct initial state of LFSR-1,  three out of four output of LFSR-1 will be the same as the combination bits. As a result, we can independently search the initial state of LFSR-1, and the correct initial state should be the fittest one. Now the complexity comes down to:</p><script type="math/tex; mode=display">O(2^{19}+2^{28})=O({2^{28}})</script><p>This is already considerable in brute-force attack method (I use approximately 3 hours with C++, half a day with python to solve). But sadly, outputs of other LFSR just has 50% correlation with the combination output (actually no correlation). We can look into the combination function:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ao*<span class="keyword">bo</span>) ^ (<span class="keyword">bo</span>*<span class="keyword">co</span>) ^ (<span class="keyword">bo</span>*<span class="keyword">do</span>) ^ <span class="keyword">co</span> ^ <span class="keyword">do</span></span><br></pre></td></tr></table></figure><p>And interestingly it can be transformed into:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ao*<span class="keyword">bo</span>) ^ ((<span class="keyword">bo</span>^<span class="number">1</span>) * (<span class="keyword">co</span>^<span class="keyword">do</span>))</span><br></pre></td></tr></table></figure><p>Calculating the XOR result of co and do by ourselves, we can surprisingly find that there is correlation between (co^do) and the combination result. Try to write down the table again.</p><div class="table-container"><table><thead><tr><th>ao</th><th>bo</th><th>co^do</th><th>combine</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>Again we can know from the table that (co^do) has 75% correlation with the combination output, which is the same as ao. There the complexity comes down again to:</p><script type="math/tex; mode=display">O(2^{19}+2^{9}+2^{19})=O(2^{20})</script><p>The complexity is very considerable now.</p><h2 id="Realization"><a href="#Realization" class="headerlink" title="Realization"></a>Realization</h2><p>Official realization</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ma, mb, mc, md = <span class="number">0x505a1</span>, <span class="number">0x40f3f</span>, <span class="number">0x1f02</span>, <span class="number">0x31</span></span><br><span class="line">key = open(<span class="string">"data"</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span><span class="params">(r, m)</span>:</span> <span class="keyword">return</span> ((r &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span>) ^ (bin(r &amp; m).count(<span class="string">'1'</span>) % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcR</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(x) == len(y)</span><br><span class="line">    cnt = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(x, y):</span><br><span class="line">        cnt += (i == j)</span><br><span class="line">    <span class="keyword">return</span> cnt / len(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutea</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, reala = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">19</span>):</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        a = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            s += str(a &amp; <span class="number">1</span>)</span><br><span class="line">        r = calcR(s, key[:nb * <span class="number">8</span>])</span><br><span class="line">        <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">            relation, reala = r, i</span><br><span class="line">    print(reala, relation)</span><br><span class="line">    <span class="keyword">return</span> reala</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brutecd</span><span class="params">(nb)</span>:</span></span><br><span class="line">    relation, realc, reald = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">6</span>):</span><br><span class="line">        d = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">13</span>):</span><br><span class="line">            c = j</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">                c = lfsr(c, mc)</span><br><span class="line">                d = lfsr(d, md)</span><br><span class="line">                s += str((c &amp; <span class="number">1</span>) ^ (d &amp; <span class="number">1</span>))</span><br><span class="line">            r = calcR(s, key[:nb * <span class="number">8</span>])</span><br><span class="line">            <span class="keyword">if</span> relation &lt; r:</span><br><span class="line">                relation, realc, reald = r, j, i</span><br><span class="line">    print(realc, reald, relation)</span><br><span class="line">    <span class="keyword">return</span> realc, reald</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteb</span><span class="params">(nb, a_, c_, d_)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span> ** <span class="number">19</span>):</span><br><span class="line">        b = i</span><br><span class="line">        a, c, d = a_, c_, d_</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(nb * <span class="number">8</span>):</span><br><span class="line">            a = lfsr(a, ma)</span><br><span class="line">            b = lfsr(b, mb)</span><br><span class="line">            c = lfsr(c, mc)</span><br><span class="line">            d = lfsr(d, md)</span><br><span class="line">            [ao, bo, co, do] = [k &amp; <span class="number">1</span> <span class="keyword">for</span> k <span class="keyword">in</span> [a, b, c, d]]</span><br><span class="line">            s += str((ao * bo) ^ (bo * co) ^ (bo * do) ^ co ^ do)</span><br><span class="line">        <span class="keyword">if</span> s == key[:nb * <span class="number">8</span>]:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(start_time)</span><br><span class="line">    a = brutea(<span class="number">20</span>)</span><br><span class="line">    c, d = brutecd(<span class="number">20</span>)</span><br><span class="line">    b = bruteb(<span class="number">20</span>, a, c, d)</span><br><span class="line">    <span class="string">"De1CTF&#123;%s&#125;"</span> % (<span class="string">''</span>.join([hex(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c, d]]))</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Used time:"</span>, end_time - start_time)</span><br><span class="line"><span class="comment"># De1CTF&#123;58bb578d5611363f&#125;</span></span><br></pre></td></tr></table></figure><p>Other challenges still remain confused.</p><h1 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a>What I have done</h1><p>I spent half of my afternoon writing this article, and I still have a long way to go. Keep on learning IELTS and number theory.</p><h1 id="Things-to-Learn-and-Improve"><a href="#Things-to-Learn-and-Improve" class="headerlink" title="Things to Learn and Improve"></a>Things to Learn and Improve</h1><ul><li>How to use sage</li><li>Do a review on wangdibei</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://en.wikipedia.org/wiki/Correlation_attack" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Correlation_attack</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only review in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;nlfsr-unsolved&quot;&gt;&lt;a href=&quot;#nlfsr-unsolved&quot; class=&quot;headerlink&quot; title=&quot;nlfsr(unsolved)&quot;&gt;&lt;/a&gt;nlfsr(unsolve
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>天翼杯-2020-Writeup</title>
    <link href="https://buki-freak.github.io/2020/07/31/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2020-Writeup/"/>
    <id>https://buki-freak.github.io/2020/07/31/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2020-Writeup/</id>
    <published>2020-07-31T15:00:19.000Z</published>
    <updated>2020-08-24T03:28:24.850Z</updated>
    
    <content type="html"><![CDATA[<p>比赛排得很密，gkd 把 writeup 写了。</p><h1 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h1><p>签到题，对于每一次加密，明文空间小，于是直接遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = ...</span><br><span class="line">cipher = ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">e = <span class="number">11299</span></span><br><span class="line">plaintext = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> pow(ord(s),e,n) == cipher[i]:</span><br><span class="line">            plaintext += s</span><br><span class="line">            print(plaintext)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="hardRSA"><a href="#hardRSA" class="headerlink" title="hardRSA"></a>hardRSA</h1><p>已知 d 低 539 位，q 为 510 位，计算低位 q 的方法可以直接获得 q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_q</span><span class="params">(d0, kbits, e, n, p)</span>:</span></span><br><span class="line">    X = var(<span class="string">'X'</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*(p<span class="number">-1</span>)*X*(n//p-X+<span class="number">1</span>) + (p<span class="number">-1</span>)*k*(n//p) == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            q0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> n % q0 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> q0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">12723332779402711330767180202990021139894727917028981722242076998825097254419567024122271773380821224949951558669351311750240296591612098048129709925844660421849429715755474874708286508736369884566273719494870891070006251521469139401722700298201541140391493575314714966432624976434199682124684035067305114749262672684081617896579640435891181745346695293618235303178334371123418790204709073465264408888007492994820133128499094347122686903153588634296508454120927</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    p = <span class="number">3141886348112988339174865432179206412942588390228169645162293920470188882447855208783220899752887620221059861467348059334030873350571979462363834615231089</span></span><br><span class="line">    c = <span class="number">8696771272015513736887843395612361647314297287781507609196936354183211655364744684164300710583625473872942712063309507651496314800393009480421886926137403759228421858414833429980059903049311837014449093365911603108158352871851677457256058510822509157407703210866317472894586087554001158540951787167699161720491198674848526093644131709561995379565643716017359731201935855247285498574923656191121426618306186331615280461405913653781283860760013215603007314688132</span></span><br><span class="line">    d0 = <span class="number">0x414946b9c40728f9801e61e98ec6d17525cbe4163a5ffb8367b65c652ae4cc3abce62e70afbfb84fcf937b3119953b48922be19ef4312c4f3a88313368ca6c9b1d658b7</span></span><br><span class="line">    </span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    kbits = d0.nbits()</span><br><span class="line"></span><br><span class="line">    q = find_q(d0, kbits, e, n, p)</span><br><span class="line">    r = n // q // p</span><br><span class="line">    phi = (r - <span class="number">1</span>) * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    print(long_to_bytes(pow(c,d,n)))</span><br></pre></td></tr></table></figure><p>忽略一下推导过程了。。</p><h1 id="AliceHomework"><a href="#AliceHomework" class="headerlink" title="AliceHomework"></a>AliceHomework</h1><p>LLL 没跑出来，疑惑.jpg</p><h1 id="PolyCrypto"><a href="#PolyCrypto" class="headerlink" title="PolyCrypto"></a>PolyCrypto</h1><p>没时间看题。。。tcl</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;比赛排得很密，gkd 把 writeup 写了。&lt;/p&gt;
&lt;h1 id=&quot;easyRSA&quot;&gt;&lt;a href=&quot;#easyRSA&quot; class=&quot;headerlink&quot; title=&quot;easyRSA&quot;&gt;&lt;/a&gt;easyRSA&lt;/h1&gt;&lt;p&gt;签到题，对于每一次加密，明文空间小，
      
    
    </summary>
    
    
    
      <category term="Writeup" scheme="https://buki-freak.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>3kctf-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/07/27/3kctf-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/07/27/3kctf-2020-Review/</id>
    <published>2020-07-27T06:21:11.000Z</published>
    <updated>2020-08-03T03:26:54.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyzzle1"><a href="#pyzzle1" class="headerlink" title="pyzzle1"></a>pyzzle1</h1><p>Given a cst tree code, use libcst package in python to transform it into source code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libcst <span class="keyword">import</span> *</span><br><span class="line">abc = Module(....</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'...'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(str(abc.code))</span><br></pre></td></tr></table></figure><p>Here is the source code in python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">"REDACTED"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i]):</span><br><span class="line">            temp += <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp += <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinaryToDecimal</span><span class="params">(binary)</span>:</span></span><br><span class="line">    string = int(binary, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># encryption</span></span><br><span class="line">PT_Ascii = [ord(x) <span class="keyword">for</span> x <span class="keyword">in</span> plaintext]</span><br><span class="line"></span><br><span class="line">PT_Bin = [format(y, <span class="string">'08b'</span>) <span class="keyword">for</span> y <span class="keyword">in</span> PT_Ascii]</span><br><span class="line">PT_Bin = <span class="string">""</span>.join(PT_Bin)</span><br><span class="line"></span><br><span class="line">n = <span class="number">26936</span></span><br><span class="line">K1 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">K2 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line"></span><br><span class="line">L1 = PT_Bin[<span class="number">0</span>:n]</span><br><span class="line">R1 = PT_Bin[n::]</span><br><span class="line"></span><br><span class="line">f1 = exor(R1, K1)</span><br><span class="line">R2 = exor(f1, L1)</span><br><span class="line">L2 = R1</span><br><span class="line"></span><br><span class="line">f2 = exor(R2, K2)</span><br><span class="line">R3 = exor(f2, L2)</span><br><span class="line">L3 = R2</span><br><span class="line"></span><br><span class="line">R3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">L3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">cipher = L3+R3</span><br><span class="line"></span><br><span class="line"><span class="comment"># # decryption (redacted)</span></span><br><span class="line"><span class="comment"># plaintext = L6+R6</span></span><br><span class="line"><span class="comment"># plaintext = int(plaintext, 2)</span></span><br><span class="line"><span class="comment"># plaintext = binascii.unhexlify('%x' % plaintext)</span></span><br><span class="line"><span class="comment"># print(plaintext)</span></span><br></pre></td></tr></table></figure><p>This is a pretty easy structure, we can easily recover plaintext by:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    temp = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i]):</span><br><span class="line">            temp += <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp += <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">26936</span></span><br><span class="line">K1 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">K2 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">R3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line">L3 = <span class="string">''''''</span> <span class="comment"># Too long to show</span></span><br><span class="line"></span><br><span class="line">R2 = L3</span><br><span class="line">L2 = exor(exor(K2, R2), R3)</span><br><span class="line"></span><br><span class="line">R1 = L2</span><br><span class="line">L1 = exor(exor(K1, R1), R2)</span><br><span class="line"></span><br><span class="line">plaintext = L1+R1</span><br><span class="line">plaintext = int(plaintext, <span class="number">2</span>)</span><br><span class="line">plaintext = binascii.unhexlify(<span class="string">'%x'</span> % plaintext)</span><br><span class="line">plaintext = binascii.unhexlify(plaintext)</span><br><span class="line">print(plaintext)</span><br></pre></td></tr></table></figure><p>The flag is : 3k{almost_done_shizzle_up_my_nizzle}</p><h1 id="Once-upon-a-time"><a href="#Once-upon-a-time" class="headerlink" title="Once_upon_a_time"></a>Once_upon_a_time</h1><p>Given a program and encrypted flag:</p><blockquote><p>scss : program entrance</p><p>main.c</p><p>cipher.c</p><p>flag_encrypted</p><p>…</p></blockquote><p>Excellent realization of LFSR and block cipher encryption in C. </p><p>We notice that the initial vector is fixed, 0xa2 :) Addtionally, the key is fixed too, which means we can always get the same key stream. Moreover, I find something wired in cipher.c:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">ECB:</span></span><br><span class="line">    temp_ciphertext = temp_keystream ^ temp_plaintext;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>We can create a file with only ‘\x00’ and encrypt it in ECB mode to get the keystream. </p><p>Since there are five modes, we can only try every situations.</p><p>Woooool, finally catch ya! OFB!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: plaintext = <span class="string">''</span>                                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">113</span>): </span><br><span class="line">    ...:     iv = iv ^ keystream[i] </span><br><span class="line">    ...:     temp = iv ^ cipher[i] </span><br><span class="line">    ...:     plaintext += chr(temp) </span><br><span class="line">    ...:                                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: plaintext                                                              </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'3k&#123;my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail&#125;'</span></span><br></pre></td></tr></table></figure><p>The flag is : 3k{my_hands_are_registered_as_lethal_weapons_that_means_we_get_into_a_fight_i_accidentally_kill_you_i_go_to_jail}</p><h1 id="You-shall-not-get-my-cookies"><a href="#You-shall-not-get-my-cookies" class="headerlink" title="You shall not get my cookies"></a>You shall not get my cookies</h1><p>Given an example cipher, and if the cipher can be correctly decrypted, it will send “Nop” back.</p><p>I follow the write up here: <a href="https://ctftime.org/writeup/22602" target="_blank" rel="noopener">https://ctftime.org/writeup/22602</a></p><p>Notice that there is an error in the write up above: if the length of a block is 16 bytes, it will be appended a block of sixteen ‘\x16’ according to PKCS#7 padding principle.</p><p>Here is my exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">'youshallnotgetmycookies.3k.ctf.to'</span></span><br><span class="line">port = <span class="number">13337</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">"6F6A6A2C6E780D070A19001707060C0D"</span></span><br><span class="line"></span><br><span class="line">suffix = <span class="string">''</span></span><br><span class="line">fake_iv = <span class="string">''</span></span><br><span class="line">dc = <span class="string">''</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        <span class="keyword">assert</span>(len(dc) == <span class="number">2</span>*(i<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">            guess = hex(j)[<span class="number">2</span>:].upper().zfill(<span class="number">2</span>)</span><br><span class="line">            fake_iv = <span class="string">'00'</span> * (<span class="number">16</span>-i) + guess + suffix</span><br><span class="line">            print(<span class="string">'[-]'</span> + fake_iv)</span><br><span class="line">            p = remote(target, port)</span><br><span class="line">            p.sendlineafter(<span class="string">'So... whats your cookie: '</span>, fake_iv + cipher)</span><br><span class="line">            res = p.recvall(timeout=<span class="number">4</span>)</span><br><span class="line">            p.close()</span><br><span class="line">            res = res.decode()</span><br><span class="line">            <span class="keyword">if</span>  len(res) == <span class="number">11</span>:</span><br><span class="line">                pad = bytes([i])</span><br><span class="line">                dc = hex(int(guess, <span class="number">16</span>) ^ bytes_to_long(pad))[<span class="number">2</span>:].upper().zfill(<span class="number">2</span>) + dc</span><br><span class="line">                suffix = hex(int(dc, <span class="number">16</span>) ^ bytes_to_long(bytes([(i+<span class="number">1</span>)]) * i))[<span class="number">2</span>:].upper().zfill(i*<span class="number">2</span>)</span><br><span class="line">                print(<span class="string">'[-]  D(C1) '</span>+ dc)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'[-]  D(C1) '</span>+ dc)</span><br><span class="line"><span class="keyword">except</span> pwnlib.exception.PwnlibException:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1C091F451A0B070D00130A1D0D0C0607  for the first block to be d(C2)</span></span><br><span class="line"><span class="comment"># B0A608DDC37A458EEC0B74D37E888E8A  for the second block</span></span><br><span class="line"><span class="comment"># ...3B143145885BB42C94 for the third block</span></span><br><span class="line"><span class="comment"># C2</span></span><br><span class="line"><span class="comment"># 90C560B2A01529EF986E54B016E1FEAA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C1</span></span><br><span class="line"><span class="comment"># 6F6A6A2C6E780D070A19001707060C0D</span></span><br><span class="line"><span class="comment"># Calculate d(C1)</span></span><br><span class="line"><span class="comment"># 218A7AEECEFB49CADF3D227AD84A21CF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate C0</span></span><br><span class="line"><span class="comment"># 6CEB0A82ABDB06ABAB50471BB46A63A6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The whole fake cipher:</span></span><br><span class="line"><span class="comment"># 6CEB0A82ABDB06ABAB50471BB46A63A66F6A6A2C6E780D070A19001707060C0D90C560B2A01529EF986E54B016E1FEAA</span></span><br></pre></td></tr></table></figure><p>It cost 2 hours running this script twice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pyzzle1&quot;&gt;&lt;a href=&quot;#pyzzle1&quot; class=&quot;headerlink&quot; title=&quot;pyzzle1&quot;&gt;&lt;/a&gt;pyzzle1&lt;/h1&gt;&lt;p&gt;Given a cst tree code, use libcst package in pytho
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>2020-First-Half-Review</title>
    <link href="https://buki-freak.github.io/2020/06/30/2020-First-Half-Review/"/>
    <id>https://buki-freak.github.io/2020/06/30/2020-First-Half-Review/</id>
    <published>2020-06-30T15:23:46.000Z</published>
    <updated>2020-07-17T02:47:27.086Z</updated>
    
    <content type="html"><![CDATA[<p>2020 已经过半，新年的钟声仿佛仍然萦绕在耳边。时间过得太快，留下的太少。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>今年真的很特别啊，二月份的时候还抱着回学校上课的想法，现在已经上了一学期的网课。对于网课和回学校上课，我是偏后者的。要知道，待在家里学习效率不到学校的十分之一：）不过还好，现在好像慢慢习惯下去了 hhhhh</p><p>本来是二月底开学的，不过学校说推迟开学（不带网课的那种）。好吧，等到三月份，盼了许久谁知改成网课（直接裂开&gt;_&lt;，网课==自学。不得不说，这半年处于真·白学阶段，白学能力提高了不少。</p><p>一月主要在学了 Matlab 编程和 Latex，从基本语法到画图，再到如何用 Latex 写出一篇 nice 的论文。学这个主要是为了准备数模，不过听说毕业论文要用 Latex 2333。因为寒假前有个朋友拉数模美赛，自己感觉想试试（说不定好好学能拿个奖。于是就报名去了，报名费也不便宜。后面去听了听那边的基础课，建模对数学要求还是挺高的，有点懵。后面朋友说让我学学 Matlab 编程。基础学下来其实也不用花很长时间，但是拖着拖着到二月份去了。不过回想那个时候，自己跟着网上教程走，还是不错的。</p><p>美赛在三月份，基础搞好了以后就开始放飞自我了（真就只搞了基础 wdt。其实主要是发现自己太久没搞学科了，于是又跑来这边学学。掏出一个《快乐的 Linux 命令行》，也忘了是谁发给我的了，系统地过一遍 Linux。从文件系统跳转到 vim 处理文本 再到软件包管理，最后 shell 编程，途中顺便捡回了正则表达式。看的时候其实真的有很大感触。看懂命令，提高主动性，这是我悟出的一点。最近选课突然发现下学期有一门叫《操作系统实践》的课，讲得就是 Linux 命令2333</p><p>美赛那三天每天只睡了6个小时，负责编程。另外两个大佬建模分析等等（这里的等等省略了许多…… wtcl 代码都是队友帮我找的。当时其实挺自责的，到后两天我才开始发挥作用。最终还是两位大佬带着我一个菜鸡勉强拿了个奖。求下年别再拉我了。</p><p>到了三月底就开始上课了，通常第一个星期都是介绍课程，必须要听啊，种种原因。一开始的那几个星期还是很认真的听课的，后面就不忍直视了。school 特色原因，水课很多。这时候网课的优势就凸显出来了。话虽这么说，但是英语还是得好好学。</p><p>四月份开始准备学校的新生赛。Crypto 不会出题。于是直接用了上一年校赛的模板，一波三折，最后强行凑出三道题，难度还不小，直接丢到平台，没人做出来 555</p><p>大概四月中旬，家里人出事情了，心态有点崩，之后算是勉勉强强地在学习吧。</p><p>到了五月份，整个人勤快了，学得挺快。把 Crypto 的基础过了一遍，打下了几场比赛，看了不少paper，收获还是挺大的，可惜没有进到线下。一个队伍，三缺一，加上进线下的种种困难，离目标还是很远啊。</p><p>六月份主要在准备各科的考试，全力复习，毕竟还是想混个奖学金。现在想想，不知不觉，已经在家半年。。。希望快快开学。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>大学已经过去一半，庆幸自己这一年没有浪费，但也很可惜，没有达到自己预期的目标。怎么说呢，自己当初的目标其实已经改变了吧，现实中的变化的太快，而且自己当初的决心似乎也没有那么坚定。走一步看一步吧，毕竟不想浪费这几年宝贵的时间。</p><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>用某人的话：”少说话，多做事。光说不练假把式，要勤奋，勇于实践。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020 已经过半，新年的钟声仿佛仍然萦绕在耳边。时间过得太快，留下的太少。&lt;/p&gt;
&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;今年真的很特别啊，二月份的时候还抱着回学校上课的
      
    
    </summary>
    
    
    
      <category term="Personal Development" scheme="https://buki-freak.github.io/tags/Personal-Development/"/>
    
  </entry>
  
  <entry>
    <title>das-CTF&amp;GK-CTF-2020-Writeup</title>
    <link href="https://buki-freak.github.io/2020/05/24/das-CTF-GK-CTF-2020-Writeup/"/>
    <id>https://buki-freak.github.io/2020/05/24/das-CTF-GK-CTF-2020-Writeup/</id>
    <published>2020-05-24T01:30:24.000Z</published>
    <updated>2020-08-03T03:26:26.371Z</updated>
    
    <content type="html"><![CDATA[<p>Only writeup in Crypto.</p><h1 id="GKCTF"><a href="#GKCTF" class="headerlink" title="GKCTF"></a>GKCTF</h1><h2 id="小学生的密码学-Solved"><a href="#小学生的密码学-Solved" class="headerlink" title="小学生的密码学(Solved)"></a>小学生的密码学(Solved)</h2><p>Pretty easy affince cipher. Both keys are given.</p><h2 id="babycrypto-Solved"><a href="#babycrypto-Solved" class="headerlink" title="babycrypto(Solved)"></a>babycrypto(Solved)</h2><p>Partial high bits of p is known.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use sage to run the script</span></span><br><span class="line"><span class="comment"># Reference: https://www.jianshu.com/p/1a0e876d5929</span></span><br><span class="line"><span class="keyword">from</span> sage.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># All variables are in hex</span></span><br><span class="line">n = <span class="number">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding zeros to p --&gt; p4</span></span><br><span class="line">p4 = <span class="number">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000</span></span><br><span class="line">cipher = <span class="number">1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">kbits = <span class="number">128</span>  <span class="comment"># kbits represent the loss bits</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))  <span class="comment"># Create a polynomial ring</span></span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">    p = p4 + int(roots[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">    q = n / int(p)</span><br><span class="line">    phin = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    d = inverse_mod(e2,phin)</span><br><span class="line">    flag = pow(cipher,d,n)</span><br><span class="line">    <span class="keyword">print</span> long_to_bytes(flag)</span><br></pre></td></tr></table></figure><h2 id="汉字的密码-Solved"><a href="#汉字的密码-Solved" class="headerlink" title="汉字的密码(Solved)"></a>汉字的密码(Solved)</h2><p>当铺密码+Substitution Cipher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = [<span class="number">66</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">67</span>, <span class="number">118</span>, <span class="number">83</span>, <span class="number">72</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">71</span>, <span class="number">57</span>, <span class="number">82</span>, <span class="number">57</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">51</span>, <span class="number">107</span>]</span><br><span class="line">delta = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    print(chr(i+delta), end=<span class="string">""</span>)</span><br><span class="line">    delta += <span class="number">1</span></span><br><span class="line"><span class="comment"># FLAG&#123;YOU_ARE_GOOD&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Backdoor-Unsolved"><a href="#Backdoor-Unsolved" class="headerlink" title="Backdoor(Unsolved)"></a>Backdoor(Unsolved)</h2><p>Remain confused</p><h1 id="DASCTF"><a href="#DASCTF" class="headerlink" title="DASCTF"></a>DASCTF</h1><h2 id="bbcrypto-Solved"><a href="#bbcrypto-Solved" class="headerlink" title="bbcrypto(Solved)"></a>bbcrypto(Solved)</h2><p><strong>quiz.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> A,SALT</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, a, si)</span>:</span></span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line">        c+=hex(((ord(m[i])) * a + ord(next(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    m = <span class="string">'flag&#123;********************************&#125;'</span></span><br><span class="line">    a = A</span><br><span class="line">    salt = SALT</span><br><span class="line">    <span class="keyword">assert</span>(len(salt)==<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">assert</span>(salt.isalpha())</span><br><span class="line">    si = cycle(salt.lower())</span><br><span class="line">    print(<span class="string">"明文内容为："</span>)</span><br><span class="line">    print(m)</span><br><span class="line">    print(<span class="string">"加密后的密文为："</span>)</span><br><span class="line">    c=encrypt(m, a, si)</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="comment">#加密后的密文为：</span></span><br><span class="line">    <span class="comment">#177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d</span></span><br></pre></td></tr></table></figure><p>The length of salt is 3 and we have already known that the plain starts with “flag{“. Solve linear congruent equations to get the salt.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">"177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d"</span></span><br><span class="line">li_c = [int(c[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(c), <span class="number">2</span>)]</span><br><span class="line"><span class="comment"># print(li_c)</span></span><br><span class="line">m = <span class="string">"flag&#123;"</span></span><br><span class="line">d_c = li_c[<span class="number">3</span>] - li_c[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(d_c)</span></span><br><span class="line">d_m = ord(m[<span class="number">3</span>]) - ord(m[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># print(d_m)  # a = 57 mod 128</span></span><br><span class="line">a = <span class="number">57</span></span><br><span class="line"><span class="comment"># print((li_c[0] - a * ord(m[0])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(97))  y1 = 'a'</span></span><br><span class="line"><span class="comment"># print((li_c[1] - a * ord(m[1])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(104)) y2 = 'h'</span></span><br><span class="line"><span class="comment"># print((li_c[2] - a * ord(m[2])) % 128)</span></span><br><span class="line"><span class="comment"># print(chr(104))  # y3 = 'h'</span></span><br><span class="line"><span class="comment"># print((li_c[3] - a * ord(m[3])) % 128)</span></span><br><span class="line">m = <span class="string">""</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">inv_a = invert(a, <span class="number">128</span>)</span><br><span class="line">key = itertools.cycle(<span class="string">"ahh"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li_c:</span><br><span class="line">    m += chr(((i - ord(next(key))) * inv_a) % <span class="number">128</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h2 id="encrypt-img-Solved"><a href="#encrypt-img-Solved" class="headerlink" title="encrypt_img(Solved)"></a>encrypt_img(Solved)</h2><p><strong>quiz.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Key</span><br><span class="line"></span><br><span class="line">Plaintext1 = <span class="string">"RC4IsInteresting"</span></span><br><span class="line">Plaintext2 = <span class="string">"ThisIsAEasyGame"</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RC4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, Key)</span>:</span></span><br><span class="line">        self.S = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]  <span class="comment"># 0 - 255</span></span><br><span class="line">        self.K = [ord(Key[i % len(Key)])*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]   <span class="comment"># KEY * 2(0-255)</span></span><br><span class="line">        self.I, self.J = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        self.KSA()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">KSA</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            j = (i+self.K[i]+self.S[i]) % <span class="number">256</span></span><br><span class="line">            self.S[i], self.S[j] = self.S[j], self.S[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.I = (self.I+<span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        self.J = (self.J+self.S[self.I]) % <span class="number">256</span></span><br><span class="line">        self.S[self.J], self.S[self.I] = self.S[self.I], self.S[self.J]</span><br><span class="line">        tmp = (self.S[self.J] + self.S[self.I]) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> self.S[tmp]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encrypt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plain)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> cnt</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        self.rc4 = RC4(Key)</span><br><span class="line">        self.testRC4(plain)</span><br><span class="line">        flag_file = Image.open(<span class="string">r"flag.png"</span>)</span><br><span class="line">        img = array(flag_file)</span><br><span class="line">        self.enc(img)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testRC4</span><span class="params">(self, plain)</span>:</span></span><br><span class="line">        ciphertext = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> plain:</span><br><span class="line">            ciphertext = (ciphertext &lt;&lt; <span class="number">8</span>)+ord(i) ^ self.rc4.next()</span><br><span class="line">        print(<span class="string">"ciphertext&#123;&#125; = &#123;&#125;"</span>.format(cnt, ciphertext))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(self, img)</span>:</span></span><br><span class="line">        a, b, _ = img.shape</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, a):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, b):</span><br><span class="line">                pixel = img[x, y]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                    pixel[i] = pixel[i] ^ self.rc4.next()</span><br><span class="line">                img[x][y] = pixel</span><br><span class="line">        enc = Image.fromarray(img)</span><br><span class="line">        enc.save(<span class="string">"enc&#123;&#125;.png"</span>.format(cnt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Encrypt(Plaintext1)</span><br><span class="line">Encrypt(Plaintext2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ciphertext1 = 12078640933356268898100798377710191641</span></span><br><span class="line"><span class="comment"># ciphertext2 = 79124196547094980420644350061749775</span></span><br></pre></td></tr></table></figure><p><strong>enc1.png</strong></p><p><strong>enc2.png</strong></p><p><strong>Stream Cipher Insertion Attack</strong></p><p>Such a pity that I didn’t figure it out at that time. From two groups of plaintexts and ciphertexts we can recover keystream at the start. However, the second keystream has one bit less than the first one, from which we easily can retrieve m0, then k1, after that m1 and so on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">plaintext1 = "RC4IsInteresting"</span></span><br><span class="line"><span class="string">plaintext2 = "ThisIsAEasyGame"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ciphertext1 = 12078640933356268898100798377710191641</span></span><br><span class="line"><span class="string">ciphertext2 = 79124196547094980420644350061749775</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key1 = []</span></span><br><span class="line"><span class="string">for i in range(len(plaintext1) - 1, -1, -1):</span></span><br><span class="line"><span class="string">     key1 = [ord(plaintext1[i]) ^ (ciphertext1 &amp; 0xff)] + key1</span></span><br><span class="line"><span class="string">     ciphertext1 &gt;&gt;= 8</span></span><br><span class="line"><span class="string">print(key1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key2 = []</span></span><br><span class="line"><span class="string">for i in range(len(plaintext2) - 1, -1, -1):</span></span><br><span class="line"><span class="string">     key2 = [ord(plaintext2[i]) ^ (ciphertext2 &amp; 0xff)] + key2</span></span><br><span class="line"><span class="string">     ciphertext2 &gt;&gt;= 8</span></span><br><span class="line"><span class="string">print(key2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [91, 85, 118, 176, 158, 228, 216, 21, 145, 123, 89, 181, 165, 203, 106, 126]</span></span><br><span class="line"><span class="string"># [91, 85, 118, 176, 158, 228, 216, 21, 145, 123, 89, 181, 165, 203, 106]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># Suppose the bit length of the flag.png is n bits, key1 and key2 can be written like:</span></span><br><span class="line"><span class="comment"># key1: k1, k2, ..., kn</span></span><br><span class="line"><span class="comment"># key2: k0, k1, ..., k(n-1)</span></span><br><span class="line"><span class="comment"># Above we have already known k0 is 126, which is the last key of plaintext2,</span></span><br><span class="line"><span class="comment"># we can retrieve m0, then k1, after that m1 and so on</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">img1 = array(Image.open(<span class="string">r"./enc1.png"</span>))</span><br><span class="line">img2 = array(Image.open(<span class="string">r"./enc2.png"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recovery_img</span><span class="params">(im1, im2, k)</span>:</span></span><br><span class="line">    x1, y1, z1 = im1.shape</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x1):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(y1):</span><br><span class="line">            pixel1 = im1[i, j]</span><br><span class="line">            pixel2 = im2[i, j]</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                pixel2[_] = pixel2[_] ^ k</span><br><span class="line">                k = pixel1[_] ^ pixel2[_]</span><br><span class="line">    im2 = Image.fromarray(im2)</span><br><span class="line">    im2.save(<span class="string">"dec.png"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">recovery_img(img1, img2, <span class="number">126</span>)</span><br></pre></td></tr></table></figure><h2 id="babyLCG-Solved"><a href="#babyLCG-Solved" class="headerlink" title="babyLCG(Solved)"></a>babyLCG(Solved)</h2><p><strong>quiz.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.b = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.seed = (self.a*self.seed+self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;"</span>.format(self.a, self.b, self.m))</span><br><span class="line">        print(<span class="string">"state1 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line">        print(<span class="string">"state2 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DH</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lcg = LCG()</span><br><span class="line">        self.lcg.output()</span><br><span class="line">        self.g = getRandomNBitInteger(<span class="number">128</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">256</span>)</span><br><span class="line">        self.A, self.a = self.gen_AB()</span><br><span class="line">        self.B, self.b = self.gen_AB()</span><br><span class="line">        self.key = pow(self.A, self.b, self.m)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_AB</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            x += <span class="string">'1'</span> <span class="keyword">if</span> self.lcg.next() % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> pow(self.g, int(x, <span class="number">2</span>), self.m), int(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DH = DH()</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">print(<span class="string">"g = &#123;&#125;\nA = &#123;&#125;\nB = &#123;&#125;\nM = &#123;&#125;"</span>.format(DH.g, DH.A, DH.B, DH.m))</span><br><span class="line">print(<span class="string">"Cipher = &#123;&#125;"</span>.format(flag ^ DH.key))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">state1 = 16269</span></span><br><span class="line"><span class="string">state2 = 4249</span></span><br><span class="line"><span class="string">g = 183096451267674849541594370111199688704</span></span><br><span class="line"><span class="string">A = 102248652770540219619953045171664636108622486775480799200725530949685509093530</span></span><br><span class="line"><span class="string">B = 74913924633988481450801262607456437193056607965094613549273335198280176291445</span></span><br><span class="line"><span class="string">M = 102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line"><span class="string">Cipher = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>LCG+Diffie Hellman Exchange Key</strong></p><p>The seed is too small ,as a result, we use brute-force attack to get the seed and recover the key. When we XOR the cipher with the key, the plain is figured out.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">3844066521</span></span><br><span class="line">        self.b = <span class="number">3316005024</span></span><br><span class="line">        self.m = <span class="number">2249804527</span></span><br><span class="line">        self.seed = <span class="number">714405490</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.seed = (self.a*self.seed+self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;"</span>.format(self.a, self.b, self.m))</span><br><span class="line">        print(<span class="string">"state1 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line">        print(<span class="string">"state2 = &#123;&#125;"</span>.format(self.next()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DH</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lcg = LCG()</span><br><span class="line">        self.lcg.output()</span><br><span class="line">        self.g = <span class="number">183096451267674849541594370111199688704</span></span><br><span class="line">        self.m = <span class="number">102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line">        self.A, self.a = self.gen_AB()  <span class="comment"># a private key</span></span><br><span class="line">        self.B, self.b = self.gen_AB()  <span class="comment"># b private key</span></span><br><span class="line">        self.key = pow(self.A, self.b, self.m)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_AB</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">            x += <span class="string">'1'</span> <span class="keyword">if</span> self.lcg.next() % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> pow(self.g, int(x, <span class="number">2</span>), self.m), int(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def next(x):</span></span><br><span class="line"><span class="string">    return (x * a + b) % m</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def brute_force():</span></span><br><span class="line"><span class="string">    for i in range(1&lt;&lt;32):</span></span><br><span class="line"><span class="string">        if i % 10000000 == 0:</span></span><br><span class="line"><span class="string">            print("count:", i)</span></span><br><span class="line"><span class="string">        res = next(i)</span></span><br><span class="line"><span class="string">        if (res &gt;&gt; 16) == 16269 and (next(res) &gt;&gt; 16) == 4249:</span></span><br><span class="line"><span class="string">            print(i)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DH = DH()</span><br><span class="line">cipher = <span class="number">13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line">print(<span class="string">"g = &#123;&#125;\nA = &#123;&#125;\nB = &#123;&#125;\nM = &#123;&#125;"</span>.format(DH.g, DH.A, DH.B, DH.m))</span><br><span class="line">print(<span class="string">"flag = &#123;&#125;"</span>.format(cipher ^ DH.key))</span><br><span class="line"><span class="comment"># flag = 13040004482819966666226297285938773653367957972934959074317939536564198335643452104954492541</span></span><br><span class="line"><span class="comment"># flag&#123;4dfe14e0c6c21ffcf5a3b4f0ed1911f6&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a = 3844066521</span></span><br><span class="line"><span class="string">b = 3316005024</span></span><br><span class="line"><span class="string">m = 2249804527</span></span><br><span class="line"><span class="string">state1 = 16269</span></span><br><span class="line"><span class="string">state2 = 4249</span></span><br><span class="line"><span class="string">g = 183096451267674849541594370111199688704</span></span><br><span class="line"><span class="string">A = 102248652770540219619953045171664636108622486775480799200725530949685509093530</span></span><br><span class="line"><span class="string">B = 74913924633988481450801262607456437193056607965094613549273335198280176291445</span></span><br><span class="line"><span class="string">M = 102752586316294557951738800745394456033378966059875498971396396583576430992701</span></span><br><span class="line"><span class="string">Cipher = 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="Knapsack-Solved"><a href="#Knapsack-Solved" class="headerlink" title="Knapsack(Solved)"></a>Knapsack(Solved)</h2><p><strong>quiz.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genKey</span><span class="params">(length)</span>:</span></span><br><span class="line">    A, B = getPrime(<span class="number">64</span>), getPrime(<span class="number">1025</span>)</span><br><span class="line"></span><br><span class="line">    Rn = getPrime(<span class="number">1024</span>)</span><br><span class="line">    key1 = [Rn//<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length+<span class="number">1</span>)]</span><br><span class="line">    key2 = [i*A % B <span class="keyword">for</span> i <span class="keyword">in</span> key1]</span><br><span class="line">    <span class="keyword">return</span> key1,key2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text,key)</span>:</span></span><br><span class="line">    Sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text)):</span><br><span class="line">        Sum+=int(text[i])*key[i]</span><br><span class="line">    <span class="keyword">return</span> Sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(Ciper,Key)</span>:</span></span><br><span class="line">    f1=open(<span class="string">"pub.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(Key)):</span><br><span class="line">        f1.write(str(Key[i])+<span class="string">'\n'</span>)</span><br><span class="line">    f2=open(<span class="string">"cip.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    f2.write(hex(Ciper))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAG = bin(bytes_to_long(flag.encode()))[<span class="number">2</span>:]</span><br><span class="line">Key1,Key2 = genKey(len(FLAG))</span><br><span class="line">Ciper = encrypt(FLAG,Key1)</span><br><span class="line">save(Ciper,Key2)</span><br></pre></td></tr></table></figure><p><strong>cip.txt</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> <span class="keyword">long</span> hex <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p><strong>pub.txt</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1015 </span>public keys</span><br></pre></td></tr></table></figure><p>The last few key in pub.txt is too small, which actually is the original private key. We can use them to recover the original private key.</p><h2 id="backpacker-Unsolved"><a href="#backpacker-Unsolved" class="headerlink" title="backpacker(Unsolved)"></a>backpacker(Unsolved)</h2><p>Remain confused</p><h1 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a><strong>What I have done</strong></h1><p>Finish learning symmetric cipher and the first chapter of Network Introduction. </p><h1 id="Things-to-Improve"><a href="#Things-to-Improve" class="headerlink" title="Things to Improve"></a>Things to Improve</h1><ul><li>Don’t be panic when encountering a challenge that is never met</li><li>Be more concentrated on study</li><li>LLL algorithm</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only writeup in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;GKCTF&quot;&gt;&lt;a href=&quot;#GKCTF&quot; class=&quot;headerlink&quot; title=&quot;GKCTF&quot;&gt;&lt;/a&gt;GKCTF&lt;/h1&gt;&lt;h2 id=&quot;小学生的密码学-Solved&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="Writeup" scheme="https://buki-freak.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Npu-CTF-2020-Review</title>
    <link href="https://buki-freak.github.io/2020/05/12/Npu-CTF-2020-Review/"/>
    <id>https://buki-freak.github.io/2020/05/12/Npu-CTF-2020-Review/</id>
    <published>2020-05-12T13:20:15.000Z</published>
    <updated>2020-08-03T03:26:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>Only review in Crypto.</p><h1 id="What-does-the-tag-mean"><a href="#What-does-the-tag-mean" class="headerlink" title="What does the tag mean"></a>What does the tag mean</h1><div class="table-container"><table><thead><tr><th>Status</th><th>Description</th></tr></thead><tbody><tr><td>Solved</td><td>Solved in the competition</td></tr><tr><td>Unlved</td><td>Unsolved in the competition</td></tr></tbody></table></div><h1 id="Mersenne-Twister-unsolved"><a href="#Mersenne-Twister-unsolved" class="headerlink" title="Mersenne Twister(unsolved)"></a>Mersenne Twister(unsolved)</h1><p>This challenge is related to Mersenne Twister Encryption. However, there are differences between them exactly. Here is the file:</p><p><strong>Mersenne Twiser.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify , unhexlify</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag ,seed</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(flag) == <span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">7</span>] == <span class="string">'npuctf&#123;'</span></span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">-1</span>] == <span class="string">'&#125;'</span></span><br><span class="line"></span><br><span class="line">XOR = <span class="keyword">lambda</span> s1 ,s2 : bytes([x1 ^ x2 <span class="keyword">for</span> x1 ,x2 <span class="keyword">in</span> zip(s1 , s2)])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mt73991</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self , seed)</span>:</span></span><br><span class="line">        self.state = [seed] + [<span class="number">0</span>] * <span class="number">232</span></span><br><span class="line">        self.flag = <span class="number">0</span></span><br><span class="line">        self.srand()</span><br><span class="line">        self.generate()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">srand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">232</span>):</span><br><span class="line">            self.state[i+<span class="number">1</span>] = <span class="number">1812433253</span> * (self.state[i] ^ (self.state[i] &gt;&gt; <span class="number">27</span>)) - i</span><br><span class="line">            self.state[i+<span class="number">1</span>] &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">            y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i+<span class="number">1</span>)%<span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">            temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">            temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">            <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">                temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">            self.state[i] = temp</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getramdanbits</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="number">233</span>:</span><br><span class="line">            self.generate()</span><br><span class="line">            self.flag = <span class="number">0</span></span><br><span class="line">        bits = self.Next(self.state[self.flag]).to_bytes(<span class="number">4</span> , <span class="string">'big'</span>)</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> bits</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Next</span><span class="params">(self , tmp)</span>:</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">11</span>)</span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9ddf4680</span></span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc65400</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x34adf670</span></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key , plain)</span>:</span></span><br><span class="line">    tmp = md5(plain).digest()</span><br><span class="line">    <span class="keyword">return</span> hexlify(XOR(tmp , key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    flag = flag.encode()</span><br><span class="line">    random = mt73991(seed)</span><br><span class="line">    f = open(<span class="string">'./cipher.txt'</span> , <span class="string">'wb'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        key = <span class="string">b''</span>.join([random.getramdanbits() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line">        cipher = encrypt(key , chr(i).encode())</span><br><span class="line">        f.write(cipher)</span><br></pre></td></tr></table></figure><p><strong>cipher.txt</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">an</span> <span class="number">832</span> <span class="keyword">bytes</span> <span class="keyword">long</span> hex <span class="keyword">string</span></span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Mersenne Twister is a kind of PRNG, whose derives from the fact that its period length is chosen to be a Mersenne Prime. This Mersenne Twister challenge has a 32-bit length.</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>Only a few conditions are given.</p><blockquote><p>the encryption result in cipher.txt</p><p>the period length</p><p>partial flag</p><p>the length of the flag</p><p>encryption function</p></blockquote><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>Given that the first part of the flag is “npuctf{“, which is a 7 bytes long string, we can retrieve the first 28 generated states with the according cipher in cipher.txt. Since we also know the last byte of the string(“}”) and the length of the string, we can easily retrieve the 100th~103th generated states. </p><p>Then we look into the generate function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">        y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i + <span class="number">1</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">        temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">        temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">        <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">            temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">        self.state[i] = temp</span><br></pre></td></tr></table></figure><p>Suppose that i equals to 103, we try to write down that situation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">        y = (self.state[<span class="number">103</span>] &amp; <span class="number">0x80000000</span>) | (self.state[(<span class="number">104</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">        temp = y &gt;&gt; <span class="number">1</span>  <span class="comment"># 1</span></span><br><span class="line">        temp ^= self.state[(<span class="number">0</span>) % <span class="number">233</span>]  <span class="comment"># 2</span></span><br><span class="line">        <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">            temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">        self.state[<span class="number">103</span>] = temp  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>In this situation, it is possible for us to retrieve the104th initial state, which means that we can get the seed through inversing. There are two possibilities in this situation(state[104] is odd or even). We try to draw a table.</p><div class="table-container"><table><thead><tr><th>possibilites</th><th>hb(1)</th><th>hb(2)</th><th>hb(3)</th></tr></thead><tbody><tr><td>even</td><td>0</td><td>0</td><td>0</td></tr><tr><td>odd</td><td>0</td><td>0</td><td>1</td></tr></tbody></table></div><p>hb in the table above means the highest bit of the value in the line #n. Based on the fact that the true hb(3) is 0, which is the highest bit of the 103th generated state, it is impossible for the 104th initial state to be odd. Therefore, we can retrieve y and the low 31 bits of the 104 initial state. Since the highest bit is unknown, we can guess it (zero or one). Therefore, there are two possible seeds, which can be judged in the end. Because the seed is retrieved, we can decrypt the cipher easily.(Something just like Symmetric Cipher)</p><p>By the way, the md5 function in encrypt function seems to be useless because it only encrypts one character, for which we can correspondingly generate an md5 dictionary of all printable characters and print the corresponding characters.</p><h2 id="Realization"><a href="#Realization" class="headerlink" title="Realization"></a>Realization</h2><p>Here is my realization.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">XOR = <span class="keyword">lambda</span> s1, s2: bytes([x1 ^ x2 <span class="keyword">for</span> x1, x2 <span class="keyword">in</span> zip(s1, s2)])</span><br><span class="line">initial_state = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line">initial_state2 = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line">cipher = [<span class="string">'cef4876036ee8b55aa59bca043725bf3'</span>,</span><br><span class="line">          <span class="string">'50a5e491debdef7ef7d63e9609a288ca'</span>,</span><br><span class="line">          <span class="string">'1e2c82a7fe566bd8709e73c8d495ea50'</span>,</span><br><span class="line">          <span class="string">'4a486ed11189faf8e6fb35617e47d2d1'</span>,</span><br><span class="line">          <span class="string">'ad5e4783e96afeaae9f7104ec477fb39'</span>,</span><br><span class="line">          <span class="string">'fe4ec619bf58289709e15c4449f03fc5'</span>,</span><br><span class="line">          <span class="string">'1cba918cd0ebfdc12376b41e78154064'</span>,</span><br><span class="line">          <span class="string">'82733b3b200826b6c78d86563edaea94'</span>,</span><br><span class="line">          <span class="string">'dccf459a4291517a4b8367d7b4a53aee'</span>,</span><br><span class="line">          <span class="string">'cd7e0accf661bfc726f5ba62e1c0e041'</span>,</span><br><span class="line">          <span class="string">'00108ad32e7d5711f780185cba5cf31d'</span>,</span><br><span class="line">          <span class="string">'328bee84066be4ab9582cf9d4bfe3c6f'</span>,</span><br><span class="line">          <span class="string">'96a7732e1c37d800c90fd46277147f0a'</span>,</span><br><span class="line">          <span class="string">'26c149dcd5eeb0f2df0c075627bc220b'</span>,</span><br><span class="line">          <span class="string">'e5eefdd67186056ac28c21e155a7f247'</span>,</span><br><span class="line">          <span class="string">'664aaecdb498134de274df10114d1f06'</span>,</span><br><span class="line">          <span class="string">'f84dd21820f150d69c9439d909dec0f5'</span>,</span><br><span class="line">          <span class="string">'ccfeab61b62db2ea91d31bc8163ff16c'</span>,</span><br><span class="line">          <span class="string">'7f458006bd5ac4a5f5bfae2770b23ccf'</span>,</span><br><span class="line">          <span class="string">'b7195b76aa0a9aa146831667a7b9fe08'</span>,</span><br><span class="line">          <span class="string">'c19e691afadccb3ca5169ef3fabaa3da'</span>,</span><br><span class="line">          <span class="string">'d47d536e89ed4cee6f788bc969c3ad31'</span>,</span><br><span class="line">          <span class="string">'37850ebfc46a73af2b0c036c3da4b4a1'</span>,</span><br><span class="line">          <span class="string">'6506f499445c604dd73eeb846a52f881'</span>,</span><br><span class="line">          <span class="string">'515a3ad0ab448b4f9ed3e0ab1fffac60'</span>,</span><br><span class="line">          <span class="string">'b223dde6450ba6198e90e14de107aaf2'</span>]</span><br><span class="line"></span><br><span class="line">starts = <span class="string">"npuctf&#123;"</span></span><br><span class="line">ends = <span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mt73991</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self.state = [seed] + [<span class="number">0</span>] * <span class="number">232</span></span><br><span class="line">        self.flag = <span class="number">0</span></span><br><span class="line">        self.srand()</span><br><span class="line">        self.generate()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">srand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">232</span>):</span><br><span class="line">            self.state[i + <span class="number">1</span>] = <span class="number">1812433253</span> * (self.state[i] ^ (self.state[i] &gt;&gt; <span class="number">27</span>)) - i</span><br><span class="line">            self.state[i + <span class="number">1</span>] &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">233</span>):</span><br><span class="line">            y = (self.state[i] &amp; <span class="number">0x80000000</span>) | (self.state[(i + <span class="number">1</span>) % <span class="number">233</span>] &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">            temp = y &gt;&gt; <span class="number">1</span></span><br><span class="line">            temp ^= self.state[(i + <span class="number">130</span>) % <span class="number">233</span>]</span><br><span class="line">            <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">                temp ^= <span class="number">0x9908f23f</span></span><br><span class="line">            self.state[i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getramdanbits</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="number">233</span>:</span><br><span class="line">            self.generate()</span><br><span class="line">            self.flag = <span class="number">0</span></span><br><span class="line">        bits = self.Next(self.state[self.flag]).to_bytes(<span class="number">4</span>, <span class="string">'big'</span>)</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> bits</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Next</span><span class="params">(self, tmp)</span>:</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">11</span>)</span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9ddf4680</span></span><br><span class="line">        tmp ^= (tmp &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc65400</span></span><br><span class="line">        tmp ^= (tmp &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x34adf670</span></span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USMR</span><span class="params">(x, shift, mask)</span>:</span></span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &gt;&gt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USML</span><span class="params">(x, shift, mask)</span>:</span></span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_Next</span><span class="params">(x)</span>:</span></span><br><span class="line">    x = USMR(x, <span class="number">18</span>, <span class="number">0x34adf670</span>)</span><br><span class="line">    x = USML(x, <span class="number">15</span>, <span class="number">0xefc65400</span>)</span><br><span class="line">    x = USML(x, <span class="number">7</span>, <span class="number">0x9ddf4680</span>)</span><br><span class="line">    x = USR(x, <span class="number">11</span>, <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_srand</span><span class="params">(value, index)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(index<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        value += i</span><br><span class="line">        value *= inverse(<span class="number">1812433253</span>, <span class="number">0x100000000</span>)</span><br><span class="line">        value = USR(value, <span class="number">27</span>, <span class="number">0xffffffff</span>)</span><br><span class="line">        value &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USR</span><span class="params">(value, shift, mask)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i * shift &lt; <span class="number">32</span>:</span><br><span class="line">        partMask = ((<span class="number">0xffffffff</span> &lt;&lt; (<span class="number">32</span> - shift)) &amp; <span class="number">0xffffffff</span>) &gt;&gt; (shift * i)</span><br><span class="line">        part = value &amp; partMask</span><br><span class="line">        value ^= (part &gt;&gt; shift) &amp; mask</span><br><span class="line">        res |= part</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hash all known characters</span></span><br><span class="line">hash_starts = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starts:</span><br><span class="line">    hash_starts.append(hashlib.md5(i.encode()).digest())</span><br><span class="line"><span class="comment"># print(hash_starts)</span></span><br><span class="line">hash_ends = hashlib.md5(ends.encode()).digest()</span><br><span class="line"></span><br><span class="line">state = [<span class="number">0</span>] * <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># first 7 characters</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(starts)):</span><br><span class="line">    key = XOR(hash_starts[i], binascii.unhexlify(cipher[i]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        tmp = inv_Next(bytes_to_long(key[<span class="number">4</span>*j:<span class="number">4</span>*j+<span class="number">4</span>]))</span><br><span class="line">        state[<span class="number">4</span>*i+j] = tmp</span><br><span class="line"><span class="comment"># print(state[:28])  # check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key, cipher)</span>:</span></span><br><span class="line">    cipher = binascii.unhexlify(cipher)</span><br><span class="line">    temp = XOR(key, cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> md5_dic:</span><br><span class="line">        <span class="keyword">if</span> temp == i:</span><br><span class="line">            print(string.printable[md5_dic.index(i)], end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the last character</span></span><br><span class="line">key = XOR(hash_ends, binascii.unhexlify(cipher[<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    tmp = inv_Next(bytes_to_long(key[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>]))</span><br><span class="line">    state[<span class="number">100</span>+i] = tmp</span><br><span class="line"><span class="comment"># print(state[100:104]) # check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since it can be simplified, there are only two situations of old_state[104]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># old_state[104] is even</span></span><br><span class="line">y = (state[<span class="number">0</span>] ^ state[<span class="number">103</span>]) &lt;&lt; <span class="number">1</span>  <span class="comment"># recover y</span></span><br><span class="line"><span class="comment"># print(y) # check pass</span></span><br><span class="line">poss_1 = y &amp; <span class="number">0x7fffffff</span></span><br><span class="line">poss_2 = (y &amp; <span class="number">0x7fffffff</span>) | <span class="number">0x80000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(poss_1)</span></span><br><span class="line"><span class="comment"># print(poss_2)</span></span><br><span class="line"><span class="comment"># check pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get the seed of each situation</span></span><br><span class="line">poss_1 = inv_srand(poss_1, <span class="number">104</span>)</span><br><span class="line">poss_2 = inv_srand(poss_2, <span class="number">104</span>)</span><br><span class="line">print(poss_1)</span><br><span class="line">print(poss_2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate md5 dictionary</span></span><br><span class="line">md5_dic = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.printable:</span><br><span class="line">    md5_dic.append(hashlib.md5(i.encode()).digest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random_1 = mt73991(poss_1)</span><br><span class="line">random_2 = mt73991(poss_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># recover the flag from random_1</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    key = <span class="string">b''</span>.join([random_1.getramdanbits() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)])</span><br><span class="line">    decrypt(key, cipher[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since random_1 is the correct one, random_2 can be ignored.</span></span><br></pre></td></tr></table></figure><p>这题一开始出题人搞错了。。。自闭了一下午</p><h1 id="认清形势，建立信心"><a href="#认清形势，建立信心" class="headerlink" title="认清形势，建立信心"></a>认清形势，建立信心</h1><p>After observing the task.py, we can find that this is a classical discrete logarithm problem. Let’s see the file.</p><p><strong>task.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">25</span>)</span><br><span class="line">e = <span class="comment"># Hidden</span></span><br><span class="line">q = getPrime(<span class="number">25</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(flag.strip(<span class="string">b"npuctf&#123;"</span>).strip(<span class="string">b"&#125;"</span>))</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line">print(c)</span><br><span class="line">print(pow(<span class="number">2</span>, e, n))</span><br><span class="line">print(pow(<span class="number">4</span>, e, n))</span><br><span class="line">print(pow(<span class="number">8</span>, e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">169169912654178</span></span><br><span class="line"><span class="string">128509160179202</span></span><br><span class="line"><span class="string">518818742414340</span></span><br><span class="line"><span class="string">358553002064450</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation"></a>Explanation</h2><p>There are many methods to solve discrete logarithm problems, BSGS(Baby Steps Giant Steps), SPH method and so on.</p><h2 id="Condition-1"><a href="#Condition-1" class="headerlink" title="Condition"></a>Condition</h2><p>There are four equations in task.py and the remains of four equations are given. The flag is in the first equations. Here is what we have known.</p><blockquote><p>The length of q and p</p><p>remains of four equations</p></blockquote><p>My idea is that n is possible to be solved and after that we can use the second equation to calculate e, using  discrete logarithm calculation methods.</p><h2 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h2><p>We can notice that:</p><script type="math/tex; mode=display">n\;|\;gcd(c1^{3}\;-\;c3,\;c1^{2}\;-\;c2)</script><p>From this character and another character that n is the product of two big prime number, we can get n.</p><p>After that, it is really convenient that we can use discrete_log() function in Sage to calculate e. Luckily, e is coprime with n, so the inverse exists. The decryption is the similar with rsa.</p><h2 id="Realization-1"><a href="#Realization-1" class="headerlink" title="Realization"></a>Realization</h2><p>My realization.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">ture<span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">tureture<span class="keyword">return</span> a, <span class="number">0</span></span><br><span class="line">turea, b = gcd(b, a % b)</span><br><span class="line">ture<span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line">c = <span class="number">169169912654178</span></span><br><span class="line">c_1 = <span class="number">128509160179202</span></span><br><span class="line">c_2 = <span class="number">518818742414340</span></span><br><span class="line">c_3 = <span class="number">358553002064450</span></span><br><span class="line"></span><br><span class="line">dc_1 = c_1 ** <span class="number">2</span> - c_2</span><br><span class="line">dc_2 = c_1 ** <span class="number">3</span> - c_3</span><br><span class="line">n = gcd(dc_1, dc_2)[<span class="number">0</span>] / <span class="number">2</span></span><br><span class="line"><span class="comment"># print(n) # check pass</span></span><br><span class="line"></span><br><span class="line">n.factor()</span><br><span class="line">p = <span class="number">18195301</span></span><br><span class="line">q = <span class="number">28977097</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = discrete_log(Mod(c_1, n), Mod(<span class="number">2</span>, n))</span><br><span class="line"><span class="comment"># print(e)  # check pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(gcd(e, phi)[0])  # check pass</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://en.wikipedia.org/wiki/Mersenne_Twister" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Mersenne_Twister</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Only review in Crypto.&lt;/p&gt;
&lt;h1 id=&quot;What-does-the-tag-mean&quot;&gt;&lt;a href=&quot;#What-does-the-tag-mean&quot; class=&quot;headerlink&quot; title=&quot;What does the tag 
      
    
    </summary>
    
    
    
      <category term="Review" scheme="https://buki-freak.github.io/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>2020-05-03</title>
    <link href="https://buki-freak.github.io/2020/05/03/2020-05-03/"/>
    <id>https://buki-freak.github.io/2020/05/03/2020-05-03/</id>
    <published>2020-05-03T14:44:24.000Z</published>
    <updated>2020-05-03T14:50:02.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h1><p>Sadly, the quiz yesterday is still unsolved. It seems that z3-solver doesn’t work. As a result, I study <strong><em>Correlation Attack</em></strong>  which is a kind of brute-force attack method. The method seems to work now and I am trying to understanding the codes written by others. Daily IELTS exercises have been done. What a day!</p><h1 id="Things-to-Learn-and-Improve"><a href="#Things-to-Learn-and-Improve" class="headerlink" title="Things to Learn and Improve"></a>Things to Learn and Improve</h1><ul><li>Stream Cipher - Correlation Attack Method</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h1&gt;&lt;p&gt;Sadly, the qui
      
    
    </summary>
    
    
    
      <category term="Daily Post" scheme="https://buki-freak.github.io/tags/Daily-Post/"/>
    
  </entry>
  
  <entry>
    <title>2020-05-02</title>
    <link href="https://buki-freak.github.io/2020/05/02/2020-05-02/"/>
    <id>https://buki-freak.github.io/2020/05/02/2020-05-02/</id>
    <published>2020-05-02T13:12:07.000Z</published>
    <updated>2020-05-02T13:22:44.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h1><p>A competition is held in these days, exciting and also exhausting! I am confident on a quiz about LFSR, which I have lately learned. However, things always does go in the right way, isn’t it? After being trapped for over five hours, I went to sleep… While I did several IELTS reading exercises, oh of course, I have finished <em>The End of the fxxking world Season One</em> just for fun ha ha ha!</p><h1 id="Things-to-Learn-and-Improve"><a href="#Things-to-Learn-and-Improve" class="headerlink" title="Things to Learn and Improve"></a>Things to Learn and Improve</h1><ul><li>z3-solver</li><li>English reading speed</li><li>Be easygoing</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h1&gt;&lt;p&gt;A competition 
      
    
    </summary>
    
    
    
      <category term="Daily Post" scheme="https://buki-freak.github.io/tags/Daily-Post/"/>
    
  </entry>
  
  <entry>
    <title>Greeting</title>
    <link href="https://buki-freak.github.io/2020/05/01/Greeting/"/>
    <id>https://buki-freak.github.io/2020/05/01/Greeting/</id>
    <published>2020-05-01T12:33:15.000Z</published>
    <updated>2020-05-01T12:57:56.341Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I have deleted all blogs deployed before. My greeting is below.</p><h1 id="The-Past"><a href="#The-Past" class="headerlink" title="The Past"></a>The Past</h1><p>​    For a so-called loser, it is always mournful to talk about his or her past. Actually, I am one of them, after failing the college entrance examination. What’s more, things go wrong in these university days. It seems that I have have been trapped for such a long time, or have had a nightmare. Families, friends, mates, the environment, …, everything goes in a wrong way. However, Mama usually tells  me to be positive, which merely works at some time I think. Well, as is told, if you don’t like this world, you can just try to leave it and choose your life. It will be alright, since seldom people can live for 100 years. I mean I should do what I really want to do in limited time. Therefore, stop to complain about the past, leave that fxxking world and alter a world that you want.</p><h1 id="Present-Days"><a href="#Present-Days" class="headerlink" title="Present Days"></a>Present Days</h1><p>​    Well, all roads lead to Rome. There are many ways to achieve your ambition and I choose that one that I have lately planned. Once the goal is settled, you only need to:</p><ul><li>Focus</li><li>Focus</li><li>Focus</li></ul><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>Future is unpredictable, but we should be hopeful. Look at the sky, and you will find how lovely it is to see the past of others. They are shining for you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today, I have deleted all blogs deployed before. My greeting is below.&lt;/p&gt;
&lt;h1 id=&quot;The-Past&quot;&gt;&lt;a href=&quot;#The-Past&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
      <category term="Personal Development" scheme="https://buki-freak.github.io/tags/Personal-Development/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://buki-freak.github.io/2020/05/01/hello-world/"/>
    <id>https://buki-freak.github.io/2020/05/01/hello-world/</id>
    <published>2020-05-01T12:30:10.251Z</published>
    <updated>2019-08-27T01:03:22.557Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
